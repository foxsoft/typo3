a:2:{s:4:"meta";a:2:{s:5:"title";s:48:"TYPO3 Standard Frontend Engine ("cms" extension)";s:5:"descr";s:508:"Primarily the classes belonging to tslib/ which contains all major code for the TypoScript driven frontend.
The media/scripts/ folder is also documented. This contains a few libraries that has not moved into dedicated extensions but has remained here for historical reasons. This includes classes for making XML, WAP and plaintext output. Further the fe_adminLib and layered manu classes are there. And finally a bunch of test scripts which contains interesting examples of how to use custom PHP with TYPO3.";}s:5:"files";a:23:{s:33:"web_info/class.tx_cms_webinfo.php";a:3:{s:8:"filesize";i:5825;s:6:"header";a:5:{s:4:"text";s:143:"
 
Contains a class with functions for page related statistics added to the backend Info module

Revised for TYPO3 3.6 5/2003 by Kasper Skårhøj";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:3:"DAT";a:4:{i:1;a:8:{s:6:"header";s:52:"class tx_cms_webinfo_page extends t3lib_extobjbase {";s:5:"class";i:1;s:11:"parentClass";s:19:"tx_cms_webinfo_page";s:4:"cDat";a:3:{s:4:"text";s:74:"

Class for displaying page information (records, page record properties)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:2:"
	";i:1;i:-1;}s:12:"content_size";i:2;s:13:"content_lines";i:1;s:6:"atLine";i:44;}i:3;a:7:{s:6:"header";s:20:"function modMenu()	{";s:11:"parentClass";s:19:"tx_cms_webinfo_page";s:4:"cDat";a:3:{s:4:"text";s:25:"

Returns the menu array
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:478:"		global $LANG;
		return array (
			'pages' => array (
				0 => $LANG->getLL('pages_0'),
				2 => $LANG->getLL('pages_2'),
				1 => $LANG->getLL('pages_1')
			),
			'stat_type' => array(
				0 => $LANG->getLL('stat_type_0'),
				1 => $LANG->getLL('stat_type_1'),
				2 => $LANG->getLL('stat_type_2'),
			),
			'depth' => array(
				0 => $LANG->getLL('depth_0'),
				1 => $LANG->getLL('depth_1'),
				2 => $LANG->getLL('depth_2'),
				3 => $LANG->getLL('depth_3')
			)
		);
	}

	";i:1;i:0;}s:12:"content_size";i:478;s:13:"content_lines";i:21;s:6:"atLine";i:51;}i:5;a:4:{s:6:"header";s:17:"function main()	{";s:11:"parentClass";s:19:"tx_cms_webinfo_page";s:4:"cDat";a:3:{s:4:"text";s:72:"

MAIN function for page information display (including hit statistics)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:27:"Output HTML for the module.";}}s:6:"atLine";i:78;}i:7;a:8:{s:6:"header";s:55:"class tx_cms_webinfo_hits extends tx_cms_webinfo_page {";s:5:"class";i:1;s:11:"parentClass";s:19:"tx_cms_webinfo_hits";s:4:"cDat";a:3:{s:4:"text";s:363:"

Extension class for hits display, basically using tx_cms_webinfo_page (internally this is detected).
This construction is due to the old "pre-extensions" structure

IMPORTANT: This class is used by the extension "sys_stat" and will be added to the Info module only when "sys_stat" is installed.
The display of statistics goes on in "tx_cms_webinfo_page" though
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:224:"}


if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/cms/web_info/class.tx_cms_webinfo.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/cms/web_info/class.tx_cms_webinfo.php']);
}
?>";i:1;i:-1;}s:12:"content_size";i:224;s:13:"content_lines";i:6;s:6:"atLine";i:167;}}}s:29:"tslib/class.tslib_content.php";a:3:{s:8:"filesize";i:234993;s:6:"header";a:5:{s:4:"text";s:747:"

This class contains all main TypoScript features.
This includes the rendering of TypoScript content objects (cObjects).
Is the backbone of TypoScript Template rendering.

There are lots of functions you can use from your include-scripts.
The class "tslib_cObj" is normally instantiated and referred to as "cObj".
When you call your own PHP-code typically through a USER or USER_INT cObject then it is this class that instantiates the object and calls the main method. Before it does so it will set (if you are using classes) a reference to itself in the internal variable "cObj" of the object. Thus you can access all functions and data from this class by $this->cObj->... from within you classes written to be USER or USER_INT content objects.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:4:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:17:"@subpackage tslib";i:3;s:80:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&cHash=4ad9d7acb4";}s:11:"other_index";a:4:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:6:"tslib ";}s:5:"@link";a:1:{i:0;s:75:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&cHash=4ad9d7acb4 ";}}}s:3:"DAT";a:129:{i:1;a:8:{s:6:"header";s:18:"class tslib_cObj {";s:5:"class";i:1;s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:747:"

This class contains all main TypoScript features.
This includes the rendering of TypoScript content objects (cObjects).
Is the backbone of TypoScript Template rendering.

There are lots of functions you can use from your include-scripts.
The class "tslib_cObj" is normally instantiated and referred to as "cObj".
When you call your own PHP-code typically through a USER or USER_INT cObject then it is this class that instantiates the object and calls the main method. Before it does so it will set (if you are using classes) a reference to itself in the internal variable "cObj" of the object. Thus you can access all functions and data from this class by $this->cObj->... from within you classes written to be USER or USER_INT content objects.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:4:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:17:"@subpackage tslib";i:3;s:80:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&cHash=4ad9d7acb4";}s:11:"other_index";a:4:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:6:"tslib ";}s:5:"@link";a:1:{i:0;s:75:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&cHash=4ad9d7acb4 ";}}}s:7:"content";a:2:{i:0;s:4114:"	var $align = Array ('center', 'right', 'left');

	/** 
	 * Holds ImageMagick parameters and extensions used for compression
	 *
	 * @see IMGTEXT()
	 *
	 * 0= Default
	 * 1= Dont change! (removes all parameters for the image_object!!)
	 * 1x = GIFs
	 * 2x = JPGs
	 */
	var $image_compression = Array(
		10 => Array('params'=>'', 'ext'=>'gif'),
		11 => Array('params'=>'-colors 128', 'ext'=>'gif'),
		12 => Array('params'=>'-colors 64', 'ext'=>'gif'),
		13 => Array('params'=>'-colors 32', 'ext'=>'gif'),
		14 => Array('params'=>'-colors 16', 'ext'=>'gif'),
		15 => Array('params'=>'-colors 8', 'ext'=>'gif'),

		30 => Array('params'=>'-colors 256', 'ext'=>'png'),
		31 => Array('params'=>'-colors 128', 'ext'=>'png'),
		32 => Array('params'=>'-colors 64', 'ext'=>'png'),
		33 => Array('params'=>'-colors 32', 'ext'=>'png'),
		34 => Array('params'=>'-colors 16', 'ext'=>'png'),
		35 => Array('params'=>'-colors 8', 'ext'=>'png'),
		39 => Array('params'=>'', 'ext'=>'png'),

		20 => Array('params'=>'-quality 100', 'ext'=>'jpg'),
		21 => Array('params'=>'-quality 90', 'ext'=>'jpg'),
		22 => Array('params'=>'-quality 80', 'ext'=>'jpg'),
		23 => Array('params'=>'-quality 70', 'ext'=>'jpg'),
		24 => Array('params'=>'-quality 60', 'ext'=>'jpg'),
		25 => Array('params'=>'-quality 50', 'ext'=>'jpg'),
		26 => Array('params'=>'-quality 40', 'ext'=>'jpg'),
		27 => Array('params'=>'-quality 30', 'ext'=>'jpg'),
		28 => Array('params'=>'-quality 20', 'ext'=>'jpg')
	);

	/** 
	 * ImageMagick parameters for image effects
	 *
	 * @see IMGTEXT()
	 */
	var $image_effects = Array(
		1 => '-rotate 90',
		2 => '-rotate 270',
		3 => '-rotate 180',
		10 => '-colorspace GRAY',
		11 => '-sharpen 70',
		20 => '-normalize',
		23 => '-contrast',
		25 => '-gamma 1.3',
		26 => '-gamma 0.8'
	);
	
	/** 
	 * Loaded with the current data-record.
	 *
	 * If the instance of this class is used to render records from the database those records are found in this array.
	 * The function stdWrap has TypoScript properties that fetch field-data from this array.
	 * @see init()
	 */
	var $data = Array();			
	var $oldData = Array();			// Used for backup...
	var $alternativeData ='';		// If this is set with an array before stdWrap, it's used instead of $this->data in the data-property in stdWrap
	var $parameters = Array();		// Used by the parseFunc function and is loaded with tag-parameters when parsing tags.
	var $currentValKey = 'currentValue_kidjls9dksoje';
	var $currentRecord = '';		// This is set to the [table]:[uid] of the record delivered in the $data-array, if the cObjects CONTENT or RECORD is in operation. Note that $GLOBALS['TSFE']->currentRecord is set to an equal value but always indicating the latest record rendered.
	var $currentRecordTotal=0;		// Set in cObj->RECORDS and cObj->CONTENT to the current number of records selected in a query.
	var $currentRecordNumber=0;		// Incremented in cObj->RECORDS and cObj->CONTENT before each record rendering.
	var $parentRecordNumber=0;		// Incremented in parent cObj->RECORDS and cObj->CONTENT before each record rendering.
	var $parentRecord=array();		// If the tslib_cObj was started from CONTENT, RECORD or SEARCHRESULT cObject's this array has two keys, 'data' and 'currentRecord' which indicates the record and data for the parent cObj.
	var $regObj;		// This may be set as a reference to the calling object of eg. cObjGetSingle. Anyway, just use it as you like. It's used in productsLib.inc for example.

	// internal
	var $INT_include=0;		// Is set to 1 if the instance of this cObj is executed from a PHP_SCRIPT_INT -include script (see pagegen, bottom of document)
	var $checkPid_cache = Array();		// This is used by checkPid, that checks if pages are accessible. The $checkPid_cache['page_uid'] is set true or false upon this check featuring a caching function for the next request.
	var $checkPid_badDoktypeList = '255';
	var $lastTypoLinkUrl=''; 	// This will be set by typoLink() to the url of the most recent link created.
	var $lastTypoLinkTarget=''; 	// DO. link target.
	var $substMarkerCache=array();	// Caching substituteMarkerArrayCached function
	
	";i:1;i:-1;}s:12:"content_size";i:4114;s:13:"content_lines";i:83;s:6:"atLine";i:238;}i:3;a:7:{s:6:"header";s:33:"function start($data,$table='')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:365:"

Class constructor.
Well, it has to be called manually since it is not a real constructor function.
So after making an instance of the class, call this function and pass to it a database record and the tablename from where the record is from. That will then become the "current" record loaded into memory and accessed by the .fields property found in eg. stdWrap.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:39:"$data	the record data that is rendered.";}i:1;a:2:{i:0;s:6:"string";i:1;s:46:"$table	the table that the data record is from.";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:129:"		$this->data = $data;
		$this->currentRecord = $table ? $table.':'.$this->data['uid'] : '';
		$this->parameters = Array();
	}

	";i:1;i:0;}s:12:"content_size";i:129;s:13:"content_lines";i:5;s:6:"atLine";i:331;}i:5;a:7:{s:6:"header";s:42:"function setParent($data,$currentRecord)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:4:{s:4:"text";s:267:"

Sets the internal variable parentRecord with information about current record.
If the tslib_cObj was started from CONTENT, RECORD or SEARCHRESULT cObject's this array has two keys, 'data' and 'currentRecord' which indicates the record and data for the parent cObj.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:23:"$data: The record array";}i:1;a:2:{i:0;s:6:"string";i:1;s:260:"$currentRecord: This is set to the [table]:[uid] of the record delivered in the $data-array, if the cObjects CONTENT or RECORD is in operation. Note that $GLOBALS['TSFE']->currentRecord is set to an equal value but always indicating the latest record rendered.";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:218:"		$this->parentRecord=array('data'=>$data, 'currentRecord'=>$currentRecord);
	}
	
	






	/***********************************************
	 *
	 * CONTENT_OBJ:
	 *
	 ***********************************************/

	";i:1;i:0;}s:12:"content_size";i:218;s:13:"content_lines";i:16;s:6:"atLine";i:346;}i:7;a:8:{s:6:"header";s:26:"function getCurrentVal()	{";s:11:"parentClass";s:10:"tslib_cObj";s:11:"sectionText";a:1:{i:0;s:12:"CONTENT_OBJ:";}s:4:"cDat";a:3:{s:4:"text";s:440:"

Returns the "current" value.
The "current" value is just an internal variable that can be used by functions to pass a single value on to another function later in the TypoScript processing.
It's like "load accumulator" in the good old C64 days... basically a "register" you can use as you like.
The TSref will tell if functions are setting this value before calling some other object so that you know if it holds any special information.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:19:"The "current" value";}}s:7:"content";a:2:{i:0;s:49:"		return $this->data[$this->currentValKey];
	}

	";i:1;i:0;}s:12:"content_size";i:49;s:13:"content_lines";i:3;s:6:"atLine";i:371;}i:9;a:7:{s:6:"header";s:32:"function setCurrentVal($value)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:28:"

Sets the "current" value.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"mixed";i:1;s:46:"The variable that you want to set as "current"";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:20:"@see getCurrentVal()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:16:"getCurrentVal() ";}}}s:7:"content";a:2:{i:0;s:51:"		$this->data[$this->currentValKey] = $value;
	}

	";i:1;i:0;}s:12:"content_size";i:51;s:13:"content_lines";i:3;s:6:"atLine";i:382;}i:11;a:7:{s:6:"header";s:37:"function cObjGet($setup,$addKey='')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:141:"

Rendering of a "numerical array" of cObjects from TypoScript
Will call ->cObjGetSingle() for each cObject found and accumulate the output.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:38:"$setup: Array with cObjects as values.";}i:1;a:2:{i:0;s:6:"string";i:1;s:47:"$addKey: A prefix for the debugging information";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:47:"Rendered output from the cObjects in the array.";}s:5:"other";a:1:{i:0;s:20:"@see cObjGetSingle()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:16:"cObjGetSingle() ";}}}s:7:"content";a:2:{i:0;s:383:"		if (is_array($setup))	{
			$sKeyArray=t3lib_TStemplate::sortedKeyList($setup);
			$content ='';
			foreach($sKeyArray as $theKey)	{
				$theValue=$setup[$theKey];
				if (intval($theKey) && !strstr($theKey,'.'))	{
					$conf=$setup[$theKey.'.'];
					$content.=$this->cObjGetSingle($theValue,$conf,$addKey.$theKey);	// Get the contentObject
				}
			}
			return $content;
		}
	}

	";i:1;i:0;}s:12:"content_size";i:383;s:13:"content_lines";i:14;s:6:"atLine";i:395;}i:13;a:7:{s:6:"header";s:49:"function cObjGetSingle($name,$conf,$TSkey='__')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:27:"

Renders a content object
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:56:"The content object name, eg. "TEXT" or "USER" or "IMAGE"";}i:1;a:2:{i:0;s:5:"array";i:1;s:59:"The array with TypoScript properties for the content object";}i:2;a:2:{i:0;s:6:"string";i:1;s:56:"A string label used for the internal debugging tracking.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:14:"cObject output";}s:5:"other";a:1:{i:0;s:126:"@example http://typo3.org/doc.0.html?&encryptionKey=&tx_extrepmgm_pi1[extUid]=267&tx_extrepmgm_pi1[tocEl]=153&cHash=7e74f4d331";}s:11:"other_index";a:1:{s:8:"@example";a:1:{i:0;s:118:"http://typo3.org/doc.0.html?&encryptionKey=&tx_extrepmgm_pi1[extUid]=267&tx_extrepmgm_pi1[tocEl]=153&cHash=7e74f4d331 ";}}}s:7:"content";a:2:{i:0;s:507:"		$content='';
			// Checking that the function is not called eternally. This is done by interrupting at a depth of 100
		$GLOBALS['TSFE']->cObjectDepthCounter--;
		if ($GLOBALS['TSFE']->cObjectDepthCounter>0)	{
			$name = trim($name);
			if ($GLOBALS['TT']->LR) $GLOBALS['TT']->push($TSkey, $name);

				// Checking if the COBJ is a reference to another object. (eg. name of
[...]
***************
	 *
	 * Functions rendering content objects (cObjects)
	 *
	 ********************************************/

	";i:1;i:1;}s:12:"content_size";i:3506;s:13:"content_lines";i:131;s:6:"atLine";i:419;}i:15;a:8:{s:6:"header";s:22:"function HTML($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:11:"sectionText";a:1:{i:0;s:46:"Functions rendering content objects (cObjects)";}s:4:"cDat";a:5:{s:4:"text";s:30:"

Rendering the cObject, HTML
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=349&cHash=d3fd0c70b4";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=349&cHash=d3fd0c70b4 ";}}}s:7:"content";a:2:{i:0;s:62:"		return $this->stdWrap($conf['value'],$conf['value.']);
	}

	";i:1;i:0;}s:12:"content_size";i:62;s:13:"content_lines";i:3;s:6:"atLine";i:558;}i:17;a:7:{s:6:"header";s:22:"function TEXT($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:30:"

Rendering the cObject, TEXT
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=350&cHash=b49de28f83";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=350&cHash=b49de28f83 ";}}}s:7:"content";a:2:{i:0;s:52:"		return $this->stdWrap($conf['value'],$conf);
	}

	";i:1;i:0;}s:12:"content_size";i:52;s:13:"content_lines";i:3;s:6:"atLine";i:569;}i:19;a:7:{s:6:"header";s:26:"function CLEARGIF($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:34:"

Rendering the cObject, CLEARGIF
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=355&cHash=70c0f19915";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=355&cHash=70c0f19915 ";}}}s:7:"content";a:2:{i:0;s:411:"		$w = $this->stdWrap($conf['width'],$conf['width.']);
		$h = $this->stdWrap($conf['height'],$conf['height.']);
		$w = $w ? $w : 1;
		$h = $h ? $h : 1;
		$wrap = $conf['wrap'] ? $conf['wrap'] : '|<br />';
		$theValue = $this->wrap('<img src="'.$GLOBALS['TSFE']->absRefPrefix.'clear.gif" width="'.$w.'" height="'.$h.'" border="0" alt="" />', $wrap);
		
		return $this->stdWrap($theValue,$conf['stdWrap.']);
	}

	";i:1;i:0;}s:12:"content_size";i:411;s:13:"content_lines";i:10;s:6:"atLine";i:580;}i:21;a:7:{s:6:"header";s:36:"function COBJ_ARRAY($conf,$ext='')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:61:"

Rendering the cObject, COBJ_ARRAY / COA and COBJ_ARRAY_INT
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}i:1;a:2:{i:0;s:6:"string";i:1;s:98:"If "INT" then the cObject is a "COBJ_ARRAY_INT" (non-cached), otherwise just "COBJ_ARRAY" (cached)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=351&cHash=a09db0329c";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=351&cHash=a09db0329c ";}}}s:7:"content";a:2:{i:0;s:507:"		$content='';
		switch($ext)	{
			case 'INT':
				$substKey = $ext.'_SCRIPT.'.$GLOBALS['TSFE']->uniqueHash();
				$content.='<!--'.$substKey.'-->';
				$GLOBALS['TSFE']->config[$ext.'incScript'][$substKey] = array(
					'file'=>$incFile, 
					'conf'=>$conf,
					'cObj'=>serialize($this),
					'type'=>'COA'
				);
			break;
			default:
				if ($this->checkIf($conf['if.'])
[...]
stdWrap.']) {
						$content=$this->stdWrap($content, $conf['stdWrap.']);
					}
				}
			break;
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:643;s:13:"content_lines";i:27;s:6:"atLine";i:599;}i:23;a:7:{s:6:"header";s:30:"function USER($conf,$ext='')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:43:"

Rendering the cObject, USER and USER_INT
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}i:1;a:2:{i:0;s:6:"string";i:1;s:86:"If "INT" then the cObject is a "USER_INT" (non-cached), otherwise just "USER" (cached)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=369&cHash=b623aca0a9";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=369&cHash=b623aca0a9 ";}}}s:7:"content";a:2:{i:0;s:445:"		$content='';
		switch($ext)	{
			case 'INT':
				$substKey = $ext.'_SCRIPT.'.$GLOBALS['TSFE']->uniqueHash();
				$content.='<!--'.$substKey.'-->';
				$GLOBALS['TSFE']->config[$ext.'incScript'][$substKey] = array(
					'file'=>$incFile, 
					'conf'=>$conf,
					'cObj'=>serialize($this),
					'type'=>'FUNC'
				);
			break;
			default:
				$content.=$this->callUserFunction($conf['userFunc'],$conf,'');
			break;
		}
		return $content;
	}

	";i:1;i:0;}s:12:"content_size";i:445;s:13:"content_lines";i:19;s:6:"atLine";i:635;}i:25;a:7:{s:6:"header";s:22:"function FILE($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:30:"

Rendering the cObject, FILE
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=352&cHash=379c60f8bc";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=352&cHash=379c60f8bc ";}}}s:7:"content";a:2:{i:0;s:225:"		$theValue = $this->fileResource($this->stdWrap($conf['file'],$conf['file.']));
		if ($conf['linkWrap'])	{
			$theValue = $this->linkWrap($theValue,$conf['linkWrap']);
		}
		return $this->wrap($theValue,$conf['wrap']);
	}

	";i:1;i:0;}s:12:"content_size";i:225;s:13:"content_lines";i:7;s:6:"atLine";i:662;}i:27;a:7:{s:6:"header";s:23:"function IMAGE($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:31:"

Rendering the cObject, IMAGE
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=353&cHash=440681ea56";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=353&cHash=440681ea56 ";}}}s:7:"content";a:2:{i:0;s:228:"		$content='';
		if ($this->checkIf($conf['if.']))	{
			$theValue = $this->cImage($conf['file'],$conf);
			if ($conf['stdWrap.'])	{
				$theValue = $this->stdWrap($theValue,$conf['stdWrap.']);
			}
			return $theValue;
		}
	}

	";i:1;i:0;}s:12:"content_size";i:228;s:13:"content_lines";i:10;s:6:"atLine";i:677;}i:29;a:7:{s:6:"header";s:30:"function IMG_RESOURCE($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:38:"

Rendering the cObject, IMG_RESOURCE
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=354&cHash=46f9299706";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=354&cHash=46f9299706 ";}}}s:7:"content";a:2:{i:0;s:129:"		$imgArray = $this->getImgResource($conf['file'],$conf['file.']);
		return $this->stdWrap($imgArray[3],$conf['stdWrap.']);
	}

	";i:1;i:0;}s:12:"content_size";i:129;s:13:"content_lines";i:4;s:6:"atLine";i:695;}i:31;a:7:{s:6:"header";s:25:"function IMGTEXT($conf) {";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:33:"

Rendering the cObject, IMGTEXT
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=363&cHash=cf2969bce1";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=363&cHash=cf2969bce1 ";}}}s:7:"content";a:2:{i:0;s:507:"		$content='';
		if (is_array($conf['text.']))	{
			$content.= $this->stdWrap($this->cObjGet($conf['text.'],'text.'),$conf['text.']);	// this gets the surrounding content
		}
		$imgList=trim($this->stdWrap($conf['imgList'],$conf['imgList.']));	// gets images
		if ($imgList)	{
			$imgs = explode(',',$imgList);
			$imgStart = intval($this->stdWrap($conf['imgStart'],$conf['im
[...]
ult.= '</tr></table>';
					$output= $theResult;
				break;
			}
		} else {
			$output= $content;
		}
		return $output;
	}

	";i:1;i:1;}s:12:"content_size";i:16852;s:13:"content_lines";i:366;s:6:"atLine";i:707;}i:33;a:7:{s:6:"header";s:25:"function CONTENT($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:33:"

Rendering the cObject, CONTENT
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=356&cHash=9f3b5c6ba2";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=356&cHash=9f3b5c6ba2 ";}}}s:7:"content";a:2:{i:0;s:507:"		$theValue='';

		$originalRec=$GLOBALS['TSFE']->currentRecord;	
		if ($originalRec)	{		// If the currentRecord is set, we register, that this record has invoked this function. It's should not be allowed to do this again then!!
			$GLOBALS['TSFE']->recordRegister[md5($originalRec)]++;
		}

		if ($conf['table']=='pages' || substr($conf['table'],0,3)=='tt_' || substr($conf[
[...]
alue = $this->stdWrap($theValue,$conf['stdWrap.']);
		$GLOBALS['TSFE']->currentRecord=$originalRec;
		return $theValue;
	}

	";i:1;i:1;}s:12:"content_size";i:2236;s:13:"content_lines";i:45;s:6:"atLine";i:1081;}i:35;a:7:{s:6:"header";s:25:"function RECORDS($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:33:"

Rendering the cObject, RECORDS
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=357&cHash=303e959472";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=357&cHash=303e959472 ";}}}s:7:"content";a:2:{i:0;s:507:"		$theValue='';

		$originalRec=$GLOBALS['TSFE']->currentRecord;	
		if ($originalRec)	{		// If the currentRecord is set, we register, that this record has invoked this function. It's should not be allowed to do this again then!!
			$GLOBALS['TSFE']->recordRegister[md5($originalRec)]++;
		}

		$conf['source'] = $this->stdWrap($conf['source'],$conf['source.']);
		if ($conf['
[...]
END-->';}
				}
			}
		}
		$GLOBALS['TSFE']->currentRecord=$originalRec;
		return $this->wrap($theValue,$conf['wrap']);
	}

	";i:1;i:1;}s:12:"content_size";i:2433;s:13:"content_lines";i:58;s:6:"atLine";i:1134;}i:37;a:7:{s:6:"header";s:23:"function HMENU($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:31:"

Rendering the cObject, HMENU
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=358&cHash=5400c1c06a";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=358&cHash=5400c1c06a ";}}}s:7:"content";a:2:{i:0;s:507:"		$content='';
		if ($this->checkIf($conf['if.']))	{
			$cls=strtolower($conf[1]);
			if (t3lib_div::inList($GLOBALS['TSFE']->tmpl->menuclasses,$cls))	{
				if ($conf['special.']['value.'])	{
					$conf['special.']['value']  = $this->stdWrap($conf['special.']['value'],$conf['special.']['value.']);
				}
				$GLOBALS['TSFE']->register['count_HMENU']++;
				$GLOBALS['TSFE']-
[...]
conf['wrap']);
			if ($conf['stdWrap.'])	$content = $this->stdWrap($content, $conf['stdWrap.']);
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:967;s:13:"content_lines";i:24;s:6:"atLine";i:1200;}i:39;a:7:{s:6:"header";s:25:"function CTABLE ($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:32:"

Rendering the cObject, CTABLE
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=359&cHash=2e0065b4e7";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=359&cHash=2e0065b4e7 ";}}}s:7:"content";a:2:{i:0;s:507:"		$controlTable = t3lib_div::makeInstance('tslib_controlTable');
			if ($conf['tableParams'])	{
			$controlTable->tableParams = $conf['tableParams'];
		}
			// loads the pagecontent
		$controlTable->contentW = $conf['cWidth'];
			// loads the menues if any
		if (is_array($conf['c.']))	{
			$controlTable->content = $this->cObjGet($conf['c.'],'c.');
			$controlTable->content
[...]
s']) ? $conf['bm.']['TDParams'] : 'valign="top"';
		}
		return $controlTable->start($conf['offset'],$conf['cMargins']);
	}

	";i:1;i:1;}s:12:"content_size";i:1348;s:13:"content_lines";i:30;s:6:"atLine";i:1232;}i:41;a:7:{s:6:"header";s:25:"function OTABLE ($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:32:"

Rendering the cObject, OTABLE
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=360&cHash=02c9552d38";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=360&cHash=02c9552d38 ";}}}s:7:"content";a:2:{i:0;s:227:"		$controlTable = t3lib_div::makeInstance('tslib_tableOffset');
		if ($conf['tableParams'])	{
			$controlTable->tableParams = $conf['tableParams'];
		}
		return $controlTable->start($this->cObjGet($conf),$conf['offset']);
	}

	";i:1;i:0;}s:12:"content_size";i:227;s:13:"content_lines";i:7;s:6:"atLine";i:1270;}i:43;a:7:{s:6:"header";s:26:"function COLUMNS ($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:33:"

Rendering the cObject, COLUMNS
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=361&cHash=7e4e228cad";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=361&cHash=7e4e228cad ";}}}s:7:"content";a:2:{i:0;s:507:"		$content='';
		if (is_array($conf) && $this->checkIf($conf['if.']))	{
			$tdRowCount=0;
			$tableParams = $conf['tableParams'] ? ' '.$conf['tableParams'] : ' border="0" cellspacing="0" cellpadding="0"';
			$TDparams = $conf['TDparams'] ? ' '.$conf['TDparams']:' valign="top"';
			$rows = t3lib_div::intInRange($conf['rows'],2,20);
			$totalWidth = intval($conf['totalWidth'
[...]
r');
			if ($conf['stdWrap.'])	{
				$content = $this->stdWrap($content,$conf['stdWrap.']);
			}
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:2894;s:13:"content_lines";i:71;s:6:"atLine";i:1285;}i:45;a:7:{s:6:"header";s:25:"function HRULER ($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:32:"

Rendering the cObject, HRULER
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=362&cHash=2a462aa084";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=362&cHash=2a462aa084 ";}}}s:7:"content";a:2:{i:0;s:507:"		$lineThickness = t3lib_div::intInRange($this->stdWrap($conf['lineThickness'],$conf['lineThickness.']),1,50);
		$lineColor = $conf['lineColor'] ? $conf['lineColor'] : 'black';
		$spaceBefore = intval($conf['spaceLeft']);
		$spaceAfter = intval($conf['spaceRight']);
		$content='';
		
		$content.='<table border="0" cellspacing="0" cellpadding="0" width="99%"><tr>';
		if ($s
[...]
 /></td>'; }
		$content.='</tr></table>';

		$content = $this->stdWrap($content, $conf['stdWrap.']);
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:941;s:13:"content_lines";i:16;s:6:"atLine";i:1364;}i:47;a:7:{s:6:"header";s:26:"function CASEFUNC ($conf){";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:30:"

Rendering the cObject, CASE
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=364&cHash=cffedd09e3";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=364&cHash=cffedd09e3 ";}}}s:7:"content";a:2:{i:0;s:522:"		$content='';
		if ($this->checkIf($conf['if.']))	{
			if ($conf['setCurrent'] || $conf['setCurrent.']){$this->data[$this->currentValKey] = $this->stdWrap($conf['setCurrent'], $conf['setCurrent.']);}
	 		$key = $this->stdWrap($conf['key'],$conf['key.']);
	 		$key = $conf[$key] ? $key : 'default';
	 		$name = $conf[$key];
	 		$theValue = $this->cObjGetSingle($name,$conf[$key.'.'], $key);
	 		if ($conf['stdWrap.'])	{
	 			$theValue = $this->stdWrap($theValue,$conf['stdWrap.']);
	 		}			
	 		return $theValue;
		}
	}

	";i:1;i:0;}s:12:"content_size";i:522;s:13:"content_lines";i:14;s:6:"atLine";i:1388;}i:49;a:7:{s:6:"header";s:37:"function LOAD_REGISTER($conf,$name)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:178:"

Rendering the cObject, LOAD_REGISTER and RESTORE_REGISTER
NOTICE: This cObject does NOT return any content since it just sets internal data based on the TypoScript properties.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}i:1;a:2:{i:0;s:6:"string";i:1;s:96:"If "RESTORE_REGISTER" then the cObject rendered is "RESTORE_REGISTER", otherwise "LOAD_REGISTER"";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:51:"Empty string (the cObject only sets internal data!)";}s:5:"other";a:2:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=365&cHash=4935524e2e";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=366&cHash=4f9485e8cc";}s:11:"other_index";a:1:{s:5:"@link";a:2:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=365&cHash=4935524e2e ";i:1;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=366&cHash=4f9485e8cc ";}}}s:7:"content";a:2:{i:0;s:507:"		if ($name=='RESTORE_REGISTER')	{
			$GLOBALS['TSFE']->register = array_pop($GLOBALS['TSFE']->registerStack);
		} else {
			array_push($GLOBALS['TSFE']->registerStack,$GLOBALS['TSFE']->register);
			if (is_array($conf))	{
				reset($conf);
				while(list($theKey,$theValue)=each($conf))	{
					if (!strstr($theKey,'.') || !isset($conf[substr($theKey,0,-1)]))	{		// Only if 1
[...]
BALS['TSFE']->register[$theKey] = $this->stdWrap($conf[$theKey],$conf[$theKey.'.']);
					}
				}
			}
		}
		return '';
	}

	";i:1;i:1;}s:12:"content_size";i:671;s:13:"content_lines";i:19;s:6:"atLine";i:1413;}i:51;a:7:{s:6:"header";s:38:"function FORM($conf,$formData='')    {";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:589:"

Rendering the cObject, FORM

Note on $formData:
In the optional $formData array each entry represents a line in the ordinary setup.
In those entries each entry (0,1,2...) represents a space normally divided by the '|' line.

$formData [] = array('Name:', 'name=input, 25 ', 'Default value....');
$formData [] = array('Email:', 'email=input, 25 ', 'Default value for email....');

- corresponds to the $conf['data'] value being :
Name:|name=input, 25 |Default value....||Email:|email=input, 25 |Default value for email....

If $formData is an array the value of $conf['data'] is ignored.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}i:1;a:2:{i:0;s:5:"array";i:1;s:62:"Alternative formdata overriding whatever comes from TypoScript";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=367&cHash=bbc518d930";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=367&cHash=bbc518d930 ";}}}s:7:"content";a:2:{i:0;s:507:"		$content='';
		if (is_array($formData))	{
			$dataArr = $formData;
		} else {
			$data=$this->stdWrap($conf['data'],$conf['data.']);
				// Clearing dataArr
			$dataArr=array();
				// Getting the original config
			if (trim($data))	{
				$data = ereg_replace(chr(10),'||',$data);
				$dataArr = explode('||',$data);
			} 
				// Adding the new dataArray config form:
			if
[...]
]=$validateForm;
			$content['formname']=$formname;
			return $content;	
		} else {
			return implode('',$content);
		}
	}

	";i:1;i:1;}s:12:"content_size";i:16235;s:13:"content_lines";i:359;s:6:"atLine";i:1453;}i:53;a:7:{s:6:"header";s:30:"function SEARCHRESULT($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:38:"

Rendering the cObject, SEARCHRESULT
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=368&cHash=d00731cd7b";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=368&cHash=d00731cd7b ";}}}s:7:"content";a:2:{i:0;s:507:"		if (t3lib_div::GPvar('sword') && t3lib_div::GPvar('scols'))	{
			$search = t3lib_div::makeInstance('tslib_search');
			$search->register_and_explode_search_string(stripSlashes(t3lib_div::GPvar('sword')));
			$search->register_tables_and_columns(t3lib_div::GPvar('scols'),$conf['allowedCols']);
				// depth		
			$depth=100;
				// the startId is found
			$theStartId=0;
			
[...]
tdWrap($content, $conf['stdWrap.']);
			}
				// returning
			$GLOBALS['TSFE']->set_no_cache();
			return $content;
		}
	}

	";i:1;i:1;}s:12:"content_size";i:5820;s:13:"content_lines";i:146;s:6:"atLine";i:1820;}i:55;a:7:{s:6:"header";s:36:"function PHP_SCRIPT($conf,$ext='')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:71:"

Rendering the cObject, PHP_SCRIPT, PHP_SCRIPT_INT and PHP_SCRIPT_EXT
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}i:1;a:2:{i:0;s:6:"string";i:1;s:128:"If "INT", then rendering "PHP_SCRIPT_INT"; If "EXT", then rendering "PHP_SCRIPT_EXT"; Default is rendering "PHP_SCRIPT" (cached)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:3:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=370&cHash=aa107f2ad8";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=371&cHash=53f71d025e";i:2;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=372&cHash=91fe391e1c";}s:11:"other_index";a:1:{s:5:"@link";a:3:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=370&cHash=aa107f2ad8 ";i:1;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=371&cHash=53f71d025e ";i:2;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=372&cHash=91fe391e1c ";}}}s:7:"content";a:2:{i:0;s:507:"		$incFile = $GLOBALS['TSFE']->tmpl->getFileName($conf['file']);
		$content='';
		if ($incFile && $GLOBALS['TSFE']->checkFileInclude($incFile))	{
			switch($ext)	{
				case 'INT':
				case 'EXT':
					$substKey = $ext.'_SCRIPT.'.$GLOBALS['TSFE']->uniqueHash();
					$content.='<!--'.$substKey.'-->';
					$GLOBALS['TSFE']->config[$ext.'incScript'][$substKey] = array(
						'
[...]
tore...
					if ($RESTORE_OLD_DATA)	{
						$this->data = $this->oldData;
					}
				break;
			}
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:965;s:13:"content_lines";i:34;s:6:"atLine";i:1977;}i:57;a:7:{s:6:"header";s:26:"function TEMPLATE($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:34:"

Rendering the cObject, TEMPLATE
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=373&cHash=109a171b1e";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=373&cHash=109a171b1e ";}}}s:7:"content";a:2:{i:0;s:507:"		$subparts = Array();
		$marks = Array();
		$wraps = Array();
		$content='';
		
		list($PRE,$POST) = explode('|',$conf['markerWrap'] ? $conf['markerWrap'] : '### | ###');
		$POST = trim($POST);
		$PRE  = trim($PRE);
		
			// Getting the content
		$content = $this->cObjGetSingle($conf['template'],$conf['template.'],'template');
		if ($conf['workOnSubpart'])	{
			$content =
[...]
this->substituteMarkerArrayCached($content,$markerArray,$subpartArray,$subpartWraps);
				}
			}
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:4568;s:13:"content_lines";i:136;s:6:"atLine";i:2019;}i:59;a:7:{s:6:"header";s:28:"function MULTIMEDIA($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:36:"

Rendering the cObject, MULTIMEDIA
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Array of TypoScript properties";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:6:"Output";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=374&cHash=efd88ab4a9";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=374&cHash=efd88ab4a9 ";}}}s:7:"content";a:2:{i:0;s:507:"		$content='';
		$filename=$this->stdWrap($conf['file'],$conf['file.']);
		$incFile = $GLOBALS['TSFE']->tmpl->getFileName($filename);
		if ($incFile)	{
			$fileinfo = t3lib_div::split_fileref($incFile);
			if (t3lib_div::inList('txt,html,htm',$fileinfo['fileext']))	{
				$content = $GLOBALS['TSFE']->tmpl->fileContent($incFile);
			} else {
					// default params...
				$pa
[...]
**********************
	 *
	 * Various helper functions for content objects:
	 *
	 ************************************/
	 
	";i:1;i:1;}s:12:"content_size";i:1974;s:13:"content_lines";i:73;s:6:"atLine";i:2163;}i:61;a:8:{s:6:"header";s:67:"function netprintApplication_offsiteLinkWrap($str,$imgConf,$conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:11:"sectionText";a:1:{i:0;s:45:"Various helper functions for content objects:";}s:4:"cDat";a:4:{s:4:"text";s:143:"

Creates a link to a netprint application on another website (where the "netprint" extension is running")
Related to the extension "netprint"
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:36:"The input string to add the link to.";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:39:"Array with information about the image.";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:51:"TypoScript properties for the netprint application.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:61:"The input string possibly with the netprint link before/after";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"		if ($conf['url'] && @is_file($imgConf['origFile']))	{
			$thisUrl = $conf['thisUrl'] ? $conf['thisUrl'] : t3lib_div::getIndpEnv('TYPO3_REQUEST_DIR');
			$origFile=$thisUrl.$imgConf['origFile'];
				// Original file dimensions:
			$gifCreator = t3lib_div::makeInstance('tslib_gifbuilder');
			$gifCreator->init();
			$origDim = $gifCreator->getImageDimensions($imgConf['orig
[...]
ore'])	{
						$str=$linkCObject.$str;
					} else {
						$str=$str.$linkCObject;
					}
				}
			}
		}
		return $str;
	}

	";i:1;i:1;}s:12:"content_size";i:1317;s:13:"content_lines";i:30;s:6:"atLine";i:2247;}i:63;a:7:{s:6:"header";s:72:"function getFieldDefaultValue($noValueInsert, $fieldName, $defaultVal) {";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:4:{s:4:"text";s:261:"

Returns a default value for a form field in the FORM cObject.
If noValueInsert OR if the no_cache flag for this page is NOT set, the original default value is returned.
Page CANNOT be cached because that would include the inserted value for the current user.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:7:"boolean";i:1;s:19:"$noValueInsert: ...";}i:1;a:2:{i:0;s:6:"string";i:1;s:54:"$fieldName: The POST var name to get default value for";}i:2;a:2:{i:0;s:6:"string";i:1;s:38:"$defaultVal: The current default value";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:108:"The default value, either from INPUT var or the current default, based on whether caching is enabled or not.";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:239:"		if (!$GLOBALS['TSFE']->no_cache || (!isset($GLOBALS['HTTP_POST_VARS'][$fieldName]) && !isset($GLOBALS['HTTP_GET_VARS'][$fieldName])) || $noValueInsert)	{
			return $defaultVal;
		} else {
			return t3lib_div::GPvar($fieldName);
		}
	}

	";i:1;i:0;}s:12:"content_size";i:239;s:13:"content_lines";i:7;s:6:"atLine";i:2289;}i:65;a:7:{s:6:"header";s:30:"function cImage($file,$conf) {";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:10:"$file: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$info = $this->getImgResource($file,$conf['file.']);
		$GLOBALS['TSFE']->lastImageInfo=$info;
		if (is_array($info))	{
			$info[3] = t3lib_div::png_to_gif_by_imagemagick($info[3]);
			$GLOBALS['TSFE']->imagesOnPage[]=$info[3];		// This array is used to collect the image-refs on the page...
			$alttext = strip_tags($this->stdWrap($conf['alttext'],$conf['alttext.']));
			$
[...]
LinkWrap($theValue,$info['origFile'],$conf['imageLinkWrap.']);
			}
			return $this->wrap($theValue,$conf['wrap']);
		}
	}

	";i:1;i:1;}s:12:"content_size";i:871;s:13:"content_lines";i:16;s:6:"atLine";i:2304;}i:67;a:7:{s:6:"header";s:50:"function imageLinkWrap($string,$imageFile,$conf) {";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:12:"$string: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:15:"$imageFile: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$a1='';
		$a2='';
		$content=$string;
		if ($this->stdWrap($conf['enable'],$conf['enable.']))	{
			$content=$this->typolink($string, $conf['typolink.']);
				// imageFileLink:
			if ($content==$string && @is_file($imageFile)) {
				$params = '';
				if ($conf['width']) {$params.='&width='.rawurlencode($conf['width']);}
				if ($conf['height']) {$params.='&height='.rawurl
[...]
t.$GLOBALS['TSFE']->ATagParams.'>';
					$a2='</a>';
				}
				$content=$a1.$string.$a2;
			}
		}
		
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:2449;s:13:"content_lines";i:56;s:6:"atLine";i:2329;}i:69;a:7:{s:6:"header";s:31:"function lastChanged($tstamp)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:5:{s:4:"text";s:311:"

Sets the SYS_LASTCHANGED timestamp if input timestamp is larger than current value.
The SYS_LASTCHANGED timestamp can be used by various caching/indexing applications to determine if the page has new content.
Therefore you should call this function with the last-changed timestamp of any element you display.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:45:"Unix timestamp (number of seconds since 1970)";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:34:"@see tslib_fe::setSysLastChanged()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:30:"tslib_fe::setSysLastChanged() ";}}}s:7:"content";a:2:{i:0;s:169:"		$tstamp = intval($tstamp);
		if ($tstamp>intval($GLOBALS['TSFE']->register['SYS_LASTCHANGED']))	{
			$GLOBALS['TSFE']->register['SYS_LASTCHANGED'] = $tstamp;
		}
	}

	";i:1;i:0;}s:12:"content_size";i:169;s:13:"content_lines";i:6;s:6:"atLine";i:2395;}i:71;a:7:{s:6:"header";s:35:"function linkWrap($content,$wrap)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$wrap: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:443:"		$wrapArr = explode('|', $wrap);
		if (ereg("\{([0-9]*)\}",$wrapArr[0],$reg))	{
			if ($uid = $GLOBALS['TSFE']->tmpl->rootLine[$reg[1]]['uid'])	{
				$wrapArr[0] = str_replace($reg[0],$uid,$wrapArr[0]);
			}
		}
		return trim($wrapArr[0]).$content.trim($wrapArr[1]);
	}












	
	






	/***********************************************
	 *
	 * HTML template processing functions
	 *
	 ***********************************************/

	";i:1;i:0;}s:12:"content_size";i:443;s:13:"content_lines";i:34;s:6:"atLine";i:2409;}i:73;a:8:{s:6:"header";s:40:"function getSubpart($content, $marker)	{";s:11:"parentClass";s:10:"tslib_cObj";s:11:"sectionText";a:1:{i:0;s:34:"HTML template processing functions";}s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:12:"$marker: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:426:"		if ($marker && strstr($content,$marker))	{
			$start = strpos($content, $marker)+strlen($marker);
			$stop = @strpos($content, $marker, $start+1);
			$sub = substr($content, $start, $stop-$start);
	
			$reg=Array();		
			ereg('^[^<]*-->',$sub,$reg);
			$start+=strlen($reg[0]);
			
			$reg=Array();		
			ereg('<!--[^>]*$',$sub,$reg);
			$stop-=strlen($reg[0]);
			
			return substr($content, $start, $stop-$start);
		}
	}

	";i:1;i:0;}s:12:"content_size";i:426;s:13:"content_lines";i:17;s:6:"atLine";i:2451;}i:75;a:7:{s:6:"header";s:75:"function substituteSubpart($content,$marker,$subpartContent,$recursive=1)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:12:"$marker: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:20:"$subpartContent: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:15:"$recursive: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"			// This function substitutes a subpart in $content with the content of $subpartContent.
			// If $recursive is set, the function calls itself with the content set to the remaining part of the content after the second marker. This means that proceding subparts are ALSO substituted!
			// If $subpartContent happens to be an array, it's [0] and [1] elements are wrapped aro
[...]
,$marker,$subpartContent);
			} else {
				return $before.$substContent.$after;
			}
		} else {
			return $content;
		}
	}

	";i:1;i:1;}s:12:"content_size";i:1360;s:13:"content_lines";i:35;s:6:"atLine";i:2478;}i:77;a:7:{s:6:"header";s:58:"function substituteMarker($content,$marker,$markContent)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:12:"$marker: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:17:"$markContent: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:58:"		return str_replace($marker,$markContent,$content);
	}

	";i:1;i:0;}s:12:"content_size";i:58;s:13:"content_lines";i:3;s:6:"atLine";i:2522;}i:79;a:7:{s:6:"header";s:139:"function substituteMarkerArrayCached($content,$markContentArray=array(),$subpartContentArray=array(),$wrappedSubpartContentArray=array())	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:715:"

Multi substitution function with caching.

This function should be a one-stop substitution function for working with HTML-template. It does not substitute by str_replace but by splitting. This secures that the value inserted does not themselves contain markers or subparts.
This function takes three kinds of substitutions in one:
$markContentArray is a regular marker-array where the 'keys' are substituted in $content with their values
$subpartContentArray works exactly like markContentArray only is whole subparts substituted and not only a single marker.
$wrappedSubpartContentArray is an array of arrays with 0/1 keys where the subparts pointed to by the main key is wrapped with the 0/1 value alternating.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:22:"$markContentArray: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:25:"$subpartContentArray: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:32:"$wrappedSubpartContentArray: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$GLOBALS['TT']->push('/substituteMarkerArray/');

			// If not arrays then set them
		if (!is_array($markContentArray))	$markContentArray=array();	// Plain markers
		if (!is_array($subpartContentArray))	$subpartContentArray=array();	// Subparts being directly substituted
		if (!is_array($wrappedSubpartContentArray))	$wrappedSubpartContentArray=array();	// Subparts being 
[...]
g[$keyN]++;
			}
		}
		$content.=$storeArr['c'][count($storeArr['k'])];
		
		$GLOBALS['TT']->pull();
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:2979;s:13:"content_lines";i:86;s:6:"atLine";i:2541;}i:81;a:7:{s:6:"header";s:82:"function substituteMarkerArray($content,$markContentArray,$wrap='',$uppercase=0)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:22:"$markContentArray: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:10:"$wrap: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:15:"$uppercase: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:381:"		if (is_array($markContentArray))	{
			reset($markContentArray);
			$wrapArr=t3lib_div::trimExplode('|',$wrap);
			while(list($marker,$markContent)=each($markContentArray))	{
				if($uppercase)	$marker=strtoupper($marker);
				if(strcmp($wrap,''))		$marker=$wrapArr[0].$marker.$wrapArr[1];
				$content=str_replace($marker,$markContent,$content);
			}
		}
		return $content;
	}

	";i:1;i:0;}s:12:"content_size";i:381;s:13:"content_lines";i:12;s:6:"atLine";i:2637;}i:83;a:7:{s:6:"header";s:63:"function substituteMarkerInObject (&$tree, $markContentArray) {";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$$tree: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:22:"$markContentArray: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:262:"		if (is_array ($tree))	{
			reset($tree);
			while(list($key,$value)=each($tree))	{
				$this->substituteMarkerInObject ($tree[$key], $markContentArray);
			}
		} else {
			$tree = $this->substituteMarkerArray($tree,$markContentArray);
		}
		return $tree;
	}

	";i:1;i:0;}s:12:"content_size";i:262;s:13:"content_lines";i:11;s:6:"atLine";i:2657;}i:85;a:7:{s:6:"header";s:96:"function fillInMarkerArray($markContentArray, $row, $fieldList='', $nl2br=1, $prefix='FIELD_')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:22:"$markContentArray: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:9:"$row: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:15:"$fieldList: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:11:"$nl2br: ...";}i:4;a:2:{i:0;s:6:"[type]";i:1;s:12:"$prefix: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		if ($fieldList)	{
			$fArr=t3lib_div::trimExplode(',',$fieldList,1);
			reset($fArr);
			while(list(,$field)=each($fArr))	{
				$markContentArray['###'.$prefix.$field.'###'] = $nl2br?nl2br($row[$field]):$row[$field];
			}
		} else {
			if (is_array($row))	{
				reset($row);
				while(list($field,)=each($row))	{
					if (!t3lib_div::testInt($field))	{		$markContentArray['
[...]
*******************************
	 *
	 * "stdWrap" + sub functions
	 *
	 ***********************************************/

	
	";i:1;i:1;}s:12:"content_size";i:662;s:13:"content_lines";i:48;s:6:"atLine";i:2679;}i:87;a:8:{s:6:"header";s:34:"function stdWrap($content,$conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:11:"sectionText";a:1:{i:0;s:25:""stdWrap" + sub functions";}s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"			// It $this->alternativeData is an array it's used instead of the $this->data array in ->getData
		if (is_array($conf))	{
			if ($conf['setContentToCurrent']){$this->data[$this->currentValKey]=$content;}
			if ($conf['setCurrent'] || $conf['setCurrent.']){$this->data[$this->currentValKey] = $this->stdWrap($conf['setCurrent'], $conf['setCurrent.']);}
			if (isset($conf['
[...]
a))	{
					echo '<b>$cObj->alternativeData:</b>';
					debug($this->alternativeData);
				}
			}
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:8683;s:13:"content_lines";i:123;s:6:"atLine";i:2735;}i:89;a:7:{s:6:"header";s:25:"function numRows($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:326:"		$query = $this->getQuery($conf['table'],$conf['select.']);
		$query = str_replace('SELECT *','SELECT count(*)',$query);
		$res = @mysql(TYPO3_db,$query);
		if ($error = mysql_error())	{
			$GLOBALS['TT']->setTSlogMessage($error.':   '.$query,3);
		} else {
			$row=mysql_fetch_row($res);
			return intval($row[0]);
		}
	}

	";i:1;i:0;}s:12:"content_size";i:326;s:13:"content_lines";i:11;s:6:"atLine";i:2865;}i:91;a:7:{s:6:"header";s:25:"function checkIf($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		if (!is_array($conf))	{return true;}
		if (isset($conf['directReturn']))	{return $conf['directReturn'] ? 1 : 0;}
		$flag = true;
			if (isset($conf['isTrue']) || isset($conf['isTrue.']))	{
				$isTrue = trim($this->stdWrap($conf['isTrue'],$conf['isTrue.']));
				if (!$isTrue)	{
					$flag=0;
				}
			}
			if (isset($conf['isFalse']) || isset($conf['isFalse.']))	{
				$is
[...]
ist($value,$number))	{
						$flag=0;
					}
				}
			}
		if ($conf['negate'])	{$flag = $flag ? 0 : 1;}
		return $flag;
	}

	";i:1;i:1;}s:12:"content_size";i:1666;s:13:"content_lines";i:53;s:6:"atLine";i:2883;}i:93;a:7:{s:6:"header";s:26:"function filelist($data)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:10:"$data: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$data = trim($data);
		if ($data)	{
			$data_arr = explode('|',$data);
				// read directory:
			if ($GLOBALS['TSFE']->lockFilePath)	{		// MUST exist!
				$path = $this->clean_directory($data_arr[0]);	// Cleaning name..., only relative paths accepted.
				$path = substr($path,0,strlen($GLOBALS['TSFE']->lockFilePath))==$GLOBALS['TSFE']->lockFilePath ? $path : '';
			}
			
[...]
th ? $path.'/'.$items['files'][$key] : $items['files'][$key];
					}
					return implode($list_arr,',');
				}
			}
		}
	}

	";i:1;i:1;}s:12:"content_size";i:2213;s:13:"content_lines";i:70;s:6:"atLine";i:2943;}i:95;a:7:{s:6:"header";s:35:"function clean_directory($theDir)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:12:"$theDir: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:414:"			// Cleans $theDir for slashes in the end of the string and returns the new path, if it exists on the server.
		if (t3lib_div::validPathStr($theDir))	{		// proceeds if no '//', '..' or '\' is in the $theFile
			$theDir = ereg_replace("[\/\. ]*$",'',$theDir);		// Removes all dots, slashes and spaces after a path...
			if (!t3lib_div::isAbsPath($theDir) && @is_dir($theDir))	{
				return $theDir;
			}
		}
	}
	
	";i:1;i:0;}s:12:"content_size";i:414;s:13:"content_lines";i:9;s:6:"atLine";i:3020;}i:97;a:7:{s:6:"header";s:48:"function HTMLparser_TSbridge($theValue, $conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:14:"$theValue: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:223:"		$htmlParser = t3lib_div::makeInstance('t3lib_parsehtml');
		$htmlParserCfg =  $htmlParser->HTMLparserConfig($conf);
		return $htmlParser->HTMLcleaner($theValue,$htmlParserCfg[0],$htmlParserCfg[1],$htmlParserCfg[2]);
	}

	";i:1;i:0;}s:12:"content_size";i:223;s:13:"content_lines";i:5;s:6:"atLine";i:3037;}i:99;a:7:{s:6:"header";s:35:"function dataWrap($content,$wrap)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$wrap: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:62:"		return $this->wrap($content,$this->insertData($wrap));
	}

	";i:1;i:0;}s:12:"content_size";i:62;s:13:"content_lines";i:3;s:6:"atLine";i:3050;}i:101;a:7:{s:6:"header";s:27:"function insertData($str)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:9:"$str: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:429:"		$inside=0;
		$newVal='';
		$pointer=0;
		$totalLen = strlen($str);
		do	{
			if (!$inside)	{
				$len = strcspn(substr($str,$pointer),'{');
				$newVal.=substr($str,$pointer,$len);
				$inside = 1;
			} else {
				$len = strcspn(substr($str,$pointer),'}')+1;
				$newVal.=$this->getData(substr($str,$pointer+1,$len-2),$this->data);
				$inside = 0;
			}
			$pointer+=$len;
		} while($pointer<$totalLen);
		return $newVal;
	}

	";i:1;i:0;}s:12:"content_size";i:429;s:13:"content_lines";i:19;s:6:"atLine";i:3060;}i:103;a:7:{s:6:"header";s:39:"function substring($content,$options)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:13:"$options: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:187:"		$options = t3lib_div::intExplode(',',$options.',');
		if ($options[1])	{
			return substr($content,$options[0],$options[1]);
		} else {
			return substr($content,$options[0]);
		}
	}

	";i:1;i:0;}s:12:"content_size";i:187;s:13:"content_lines";i:8;s:6:"atLine";i:3087;}i:105;a:7:{s:6:"header";s:34:"function crop($content,$options)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:13:"$options: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:335:"		$options = explode('|',$options);
		$chars=intval($options[0]);
		$afterstring=trim($options[1]);
		if ($chars)	{
			if (strlen($content)>abs($chars))	{
				if ($chars<0)	{
					$content= $afterstring.substr($content,$chars);
				} else {
					$content= substr($content,0,$chars).$afterstring;
				}
			}
		}
		return $content;
	}

	";i:1;i:0;}s:12:"content_size";i:335;s:13:"content_lines";i:15;s:6:"atLine";i:3103;}i:107;a:7:{s:6:"header";s:38:"function textStyle($theValue, $conf) {";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:14:"$theValue: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$conf['face.'][1] = 'Times New Roman';
		$conf['face.'][2] = 'Verdana,Arial,Helvetica,Sans serif';
		$conf['face.'][3] = 'Arial,Helvetica,Sans serif';

		$conf['size.'][1] = 1;
		$conf['size.'][2] = 2;
		$conf['size.'][3] = 3;
		$conf['size.'][4] = 4;
		$conf['size.'][5] = 5;
		$conf['size.'][10] = '+1';
		$conf['size.'][11] = '-1';
	
		$conf['color.'][240] = 'black';
		
[...]
n
		if ($align)	{$theValue=$this->wrap($theValue, '<div align="'.$align.'">|</div>');}
			// return
		return $theValue;
	}

	";i:1;i:1;}s:12:"content_size";i:2262;s:13:"content_lines";i:56;s:6:"atLine";i:3126;}i:109;a:7:{s:6:"header";s:39:"function tableStyle($theValue, $conf) {";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:14:"$theValue: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$conf['color.'][240] = 'black';
		$conf['color.'][241] = 'white';
		$conf['color.'][242] = '#333333';
		$conf['color.'][243] = 'gray';
		$conf['color.'][244] = 'silver';

		$align = $this->stdWrap($conf['align'],$conf['align.']);
		$border = intval($this->stdWrap($conf['border'],$conf['border.']));
		$cellspacing = intval($this->stdWrap($conf['cellspacing'],$conf['cellsp
[...]
de($tableTagArray,' ').'> | </table>';
		$theValue=$this->wrap($theValue, $tableWrap);
			// return
		return $theValue;
	}

	";i:1;i:1;}s:12:"content_size";i:1168;s:13:"content_lines";i:31;s:6:"atLine";i:3190;}i:111;a:7:{s:6:"header";s:37:"function filelink($theValue, $conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:14:"$theValue: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$output = '';
		$aTagParams = $GLOBALS['TSFE']->ATagParams.($conf['ATagParams']?' '.$conf['ATagParams']:'');
		$initP = '?id='.$GLOBALS['TSFE']->id.'&type='.$GLOBALS['TSFE']->type;
		$conf['path'] = $this->stdWrap($conf['path'],$conf['path.']);
		$theFile = trim($conf['path']).$theValue;
		if (@is_file($theFile))	{
			$theFileEnc = str_replace('%2F', '/', rawurlencode($t
[...]
stdWrap($theValue,$conf['file.']);
				// output			
			return $this->stdWrap($icon.$file.$size, $conf['stdWrap.']);
		}
	}

	";i:1;i:1;}s:12:"content_size";i:2886;s:13:"content_lines";i:56;s:6:"atLine";i:3229;}i:113;a:7:{s:6:"header";s:36:"function locDataJU($jumpUrl,$conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$jumpUrl: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$fI = pathinfo($jumpUrl);
		$mimetype='';
		if ($fI['extension'])	{
			$mimeTypes = t3lib_div::trimExplode(',',$conf['mimeTypes'],1);
			reset($mimeTypes);
			while(list(,$v)=each($mimeTypes))	{
				$parts = explode('=',$v,2);
				if (strtolower($fI['extension']) == strtolower(trim($parts[0])))	{
					$mimetype = '&mimeType='.rawurlencode(trim($parts[1]));
				}
			}
		}
[...]
onKey']
		);
		$juHash='&juHash='.t3lib_div::shortMD5(serialize($hArr));
		return '&juSecure=1'.$mimetype.$rec.$juHash;
	}

	";i:1;i:1;}s:12:"content_size";i:707;s:13:"content_lines";i:23;s:6:"atLine";i:3293;}i:115;a:7:{s:6:"header";s:21:"function calc($val)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:9:"$val: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:478:"		$parts= t3lib_div::splitCalc($val,'+-*/');
		$value=0;
		reset($parts);
		while(list(,$part)=each($parts))	{
			$theVal = $part[1];
			$sign =  $part[0];
			if ((string)intval($theVal)==(string)$theVal)	{
				$theVal = intval($theVal);
			} else {
				$theVal =0;
			}
			if ($sign=='-')	{$value-=$theVal;}
			if ($sign=='+')	{$value+=$theVal;}
			if ($sign=='/')	{if (intval($theVal)) $value/=intval($theVal);}
			if ($sign=='*')	{$value*=$theVal;}
		}
		return $value;
	}

	";i:1;i:0;}s:12:"content_size";i:478;s:13:"content_lines";i:19;s:6:"atLine";i:3323;}i:117;a:7:{s:6:"header";s:42:"function calcIntExplode($delim, $string)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$delim: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:12:"$string: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:238:"		// This explodes a comma-list into an array where the values are parsed through intval();
		$temp = explode($delim,$string);
		while(list($key,$val)=each($temp))	{
			$temp[$key]=intval(tslib_cObj::calc($val));
		}
		return $temp;
	}

	";i:1;i:0;}s:12:"content_size";i:238;s:13:"content_lines";i:8;s:6:"atLine";i:3350;}i:119;a:7:{s:6:"header";s:34:"function splitObj($value, $conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$value: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$conf['token']=$this->stdWrap($conf['token'],$conf['token.']);
		
		if ($conf['token'])	{
			$conf['max']=intval($this->stdWrap($conf['max'],$conf['max.']));
			$conf['min']=intval($this->stdWrap($conf['min'],$conf['min.']));
			
			$valArr=explode($conf['token'],$value);
				// calculate splitCount
			$splitCount = count($valArr);
			if ($conf['max'] && $splitCount>$con
[...]
rap']) {
					$value=$this->wrap($value,$splitArr[$a]['wrap']);
				}
				$content.=$value;
			}
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:1258;s:13:"content_lines";i:41;s:6:"atLine";i:3366;}i:121;a:7:{s:6:"header";s:39:"function parseFunc ($theValue, $conf) {";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:14:"$theValue: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		if (strcmp($conf['externalBlocks'],''))	{
			$tags = strtolower(implode(',',t3lib_div::trimExplode(',',$conf['externalBlocks'])));
			$htmlParser = t3lib_div::makeInstance('t3lib_parsehtml');
			$parts = $htmlParser->splitIntoBlock($tags,$theValue);
			
			reset($parts);
			while(list($k,$v)=each($parts))	{
				if ($k%2)	{	// font:
					$tagName=strtolower($htmlParser->g
[...]
unc($parts[$k], $conf);
				}
			}

			return implode('',$parts);
		} else return $this->_parseFunc ($theValue, $conf);
	}

	";i:1;i:1;}s:12:"content_size";i:3385;s:13:"content_lines";i:84;s:6:"atLine";i:3415;}i:123;a:7:{s:6:"header";s:40:"function _parseFunc ($theValue, $conf) {";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:14:"$theValue: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		if (!$this->checkIf($conf['if.']))	{
			return $theValue;
		}
		$inside=0;	// Indicates that the data is from within a tag.
		$pointer=0;	// Pointer to the total string position
		$currentTag='';	// Loaded with the current typo-tag if any.
		$stripNL=0;
		$contentAccum=array();
		$contentAccumP=0;

		$allowTags=strtolower(str_replace(' ','',$conf['allowTags']));
		$denyT
[...]
['nonTypoTagUserFunc'], $conf['nonTypoTagUserFunc.'], $contentAccum[$a]);}
			}
		}
		return implode('',$contentAccum);
	}

	";i:1;i:1;}s:12:"content_size";i:7883;s:13:"content_lines";i:196;s:6:"atLine";i:3507;}i:125;a:7:{s:6:"header";s:45:"function encaps_lineSplit($theValue, $conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:14:"$theValue: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$lParts = explode(chr(10),$theValue);

		$encapTags = t3lib_div::trimExplode(',',strtolower($conf['encapsTagList']),1);
		$nonWrappedTag = $conf['nonWrappedTag'];
		$defaultAlign=trim($this->stdWrap($conf['defaultAlign'],$conf['defaultAlign.']));
		
		if (!strcmp('',$theValue))	return '';
		
		while(list($k,$l)=each($lParts))	{
			$sameBeginEnd=0;
			$l=trim($l);
			$att
[...]
 = $str_content;
		}
#debug($lParts);
//debug(t3lib_div::debug_ordvalue($theValue));
		return implode(chr(10),$lParts);
	}

	";i:1;i:1;}s:12:"content_size";i:2788;s:13:"content_lines";i:73;s:6:"atLine";i:3711;}i:127;a:7:{s:6:"header";s:38:"function http_makelinks($data,$conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:10:"$data: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		// http-split
		$aTagParams = $GLOBALS['TSFE']->ATagParams.($conf['ATagParams']?' '.$conf['ATagParams']:'');
		$textpieces = explode('http://', $data);
		$pieces = count($textpieces);
		$textstr = $textpieces[0];
		$initP = '?id='.$GLOBALS['TSFE']->id.'&type='.$GLOBALS['TSFE']->type;
		for($i=1; $i<$pieces; $i++)	{
			$len=strcspn($textpieces[$i],chr(32).chr(9).chr(13).c
[...]
			}
				$textstr.=$res.$parts[1];
			} else {
				$textstr.='http://'.$textpieces[$i];
			}				
		}
		return $textstr;
	}

	";i:1;i:1;}s:12:"content_size";i:2043;s:13:"content_lines";i:50;s:6:"atLine";i:3792;}i:129;a:7:{s:6:"header";s:40:"function mailto_makelinks($data,$conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:10:"$data: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		// http-split
		$aTagParams = $GLOBALS['TSFE']->ATagParams.($conf['ATagParams']?' '.$conf['ATagParams']:'');
		$textpieces = explode('mailto:', $data);
		$pieces = count($textpieces);
		$textstr = $textpieces[0];
		$initP = '?id='.$GLOBALS['TSFE']->id.'&type='.$GLOBALS['TSFE']->type;
		for($i=1; $i<$pieces; $i++)	{
			$len=strcspn($textpieces[$i],chr(32).chr(9).chr(13).c
[...]
			}
				$textstr.=$res.$parts[1];
			} else {
				$textstr.='mailto:'.$textpieces[$i];
			}				
		}
		return $textstr;
	}

	";i:1;i:1;}s:12:"content_size";i:1417;s:13:"content_lines";i:33;s:6:"atLine";i:3850;}i:131;a:7:{s:6:"header";s:31:"function fileResource($fName)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$fName: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		// If gif/jpg: returns image_tag with picture in
		// If html,txt: returns content
		$incFile = $GLOBALS['TSFE']->tmpl->getFileName($fName);
		if ($incFile)	{
			$fileinfo = t3lib_div::split_fileref($incFile);
			if (t3lib_div::inList('jpg,gif,jpeg,png',$fileinfo['fileext']))	{
				$imgFile = $incFile;
				$imgInfo = @getImageSize($imgFile);
				return '<img src="'.$GLOB
[...]
"" />';
			} elseif (filesize($incFile)<1024*1024) {
				return $GLOBALS['TSFE']->tmpl->fileContent($incFile);
			}
		}
	}

	";i:1;i:1;}s:12:"content_size";i:602;s:13:"content_lines";i:15;s:6:"atLine";i:3890;}i:133;a:7:{s:6:"header";s:43:"function getImgResource($file,$fileArray)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:10:"$file: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:15:"$fileArray: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		// returns info-array
		// info[origFile] = original file.
		if (is_array($fileArray))	{
			switch($file)	{
				case 'GIFBUILDER':
					$gifCreator = t3lib_div::makeInstance('tslib_gifbuilder');
					$gifCreator->init();
					$theImage='';
					if ($GLOBALS['TYPO3_CONF_VARS']['GFX']['gdlib'])	{
						$gifCreator->start($fileArray,$this->data);
						$theImage = $gifCreat
[...]
*************************************
	 *
	 * Data retrieval etc.
	 *
	 ***********************************************/

	
	";i:1;i:1;}s:12:"content_size";i:7350;s:13:"content_lines";i:167;s:6:"atLine";i:3913;}i:135;a:8:{s:6:"header";s:30:"function getFieldVal($field)	{";s:11:"parentClass";s:10:"tslib_cObj";s:11:"sectionText";a:1:{i:0;s:19:"Data retrieval etc.";}s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$field: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:245:"		if (!strstr($field,'//'))	{
			return $this->data[trim($field)];
		} else {
			$sections = t3lib_div::trimExplode('//',$field,1);
			while (list(,$k)=each($sections)) {
				if (strcmp($this->data[$k],''))	return $this->data[$k];
			}
		}
	}

	";i:1;i:0;}s:12:"content_size";i:245;s:13:"content_lines";i:10;s:6:"atLine";i:4087;}i:137;a:7:{s:6:"header";s:39:"function getData($string,$fieldArray)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:12:"$string: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:16:"$fieldArray: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		if (!is_array($fieldArray))	{
			$fieldArray=$GLOBALS['TSFE']->page;
		}
		$retVal = '';
		$sections = explode('//',$string);

		while (!$retVal AND list($secKey, $secVal)=each($sections)) {
			$parts = explode(':',$secVal,2);
			$key = trim($parts[1]);
			if ((string)$key!='')	{
				switch(strtolower(trim($parts[0])))	{
					case 'gpvar':
						$retVal= t3lib_div::GPvar
[...]
s_array($db_rec) && $selectParts[2])	{$retVal = $db_rec[$selectParts[2]];}
					break;
				}
			}
		}
		return $retVal;
	}

	";i:1;i:1;}s:12:"content_size";i:2331;s:13:"content_lines";i:75;s:6:"atLine";i:4105;}i:139;a:7:{s:6:"header";s:66:"function rootLineValue($key,$field,$slideBack=0,$altRootLine='')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:9:"$key: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:11:"$field: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:15:"$slideBack: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:17:"$altRootLine: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:262:"		$rootLine = is_array($altRootLine) ? $altRootLine : $GLOBALS['TSFE']->tmpl->rootLine;
		if (!$slideBack)	{
			return $rootLine[$key][$field];
		} else {
			for ($a=$key;$a>=0;$a--)	{
				$val = $rootLine[$a][$field];
				if ($val)	{return $val;}
			}
		}
	}

	";i:1;i:0;}s:12:"content_size";i:262;s:13:"content_lines";i:11;s:6:"atLine";i:4190;}i:141;a:7:{s:6:"header";s:26:"function getGlobal($var) {";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:9:"$var: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:271:"		$vars = explode('|',$var);
		$c = count($vars);
		$theVar = $GLOBALS[trim($vars[0])];
		for ($a=1;$a<$c;$a++) {
			if (!isset($theVar))	{break;}
			$theVar = $theVar[trim($vars[$a])];
		}
		if (!is_array($theVar))	{
			return $theVar;
		} else {
			return '';
		}
	}

	";i:1;i:0;}s:12:"content_size";i:271;s:13:"content_lines";i:14;s:6:"atLine";i:4208;}i:143;a:7:{s:6:"header";s:28:"function getKey($key,$arr)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:9:"$key: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:9:"$arr: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:467:"		$key = intval($key);
		if (is_array($arr))	{
			if ($key < 0)	{
				$key = count($arr)+$key;	// entrylevel = -1 means that entryLevel ends up pointing at the outermost-level, -2 means the level before the outermost...
			}
			if ($key < 0)	{
				$key=0;
			}		
		}
		return $key;
	}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	






	/***********************************************
	 *
	 * Link functions (typolink)
	 *
	 ***********************************************/

	
	";i:1;i:0;}s:12:"content_size";i:467;s:13:"content_lines";i:41;s:6:"atLine";i:4230;}i:145;a:8:{s:6:"header";s:36:"function typoLink($linktxt, $conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:11:"sectionText";a:1:{i:0;s:25:"Link functions (typolink)";}s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$linktxt: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"#debug($conf);
		$finalTagParts=array();
		$finalTagParts['aTagParams'] = $GLOBALS['TSFE']->ATagParams.($conf['ATagParams']?' '.$conf['ATagParams']:'');
		
		$link_param = trim($this->stdWrap($conf['parameter'],$conf['parameter.']));
		$sectionMark = trim($this->stdWrap($conf['section'],$conf['section.']));
		$sectionMark = $sectionMark ? '#'.$sectionMark : '';
		$initP = 
[...]
</a>';
			} else {
				return $this->wrap($res.$linktxt.'</a>', $conf['wrap']);
			}
		} else {
			return $linktxt;
		}
	}

	";i:1;i:1;}s:12:"content_size";i:10202;s:13:"content_lines";i:201;s:6:"atLine";i:4279;}i:147;a:7:{s:6:"header";s:30:"function typoLink_URL($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:476:"		$this->typolink('|',$conf);
		return $this->lastTypoLinkUrl;
	}

	/*
	 * Returns a linked string made from typoLink parameters. 
	 *
	 * This function takes $label as a string, wraps it in a link-tag based on the $params string, which should contain data like that you would normally pass to the popular <LINK>-tag in the TSFE.
	 * Optionally you can supply $urlParameters which is an array with key/value pairs that are rawurlencoded and appended to the resulting url.
	 */";i:1;i:0;}s:12:"content_size";i:476;s:13:"content_lines";i:9;s:6:"atLine";i:4487;}i:149;a:6:{s:6:"header";s:72:"function getTypoLink($label,$params,$urlParameters=array(),$target='')	{";s:11:"parentClass";s:10:"tslib_cObj";s:7:"content";a:2:{i:0;s:461:"		$conf=array();
		$conf['parameter'] = $params;
		if ($target)	{
			$conf['target']=$target;
			$conf['extTarget']=$target;
		}
		if (is_array($urlParameters))	{
			if (count($urlParameters))	{
				reset($urlParameters);
				while(list($k,$v)=each($urlParameters))	{
					$conf['additionalParams'].='&'.$k.'='.rawurlencode($v);
				}
			}
		} else {
			$conf['additionalParams'].=$urlParameters;
		}
		$out = $this->typolink($label,$conf);
		return $out;
	}

	";i:1;i:0;}s:12:"content_size";i:461;s:13:"content_lines";i:20;s:6:"atLine";i:4498;}i:151;a:7:{s:6:"header";s:30:"function typolinkWrap($conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:76:"		$k=md5(microtime());
		return explode($k,$this->typolink($k,$conf));
	}

	";i:1;i:0;}s:12:"content_size";i:76;s:13:"content_lines";i:4;s:6:"atLine";i:4525;}i:153;a:7:{s:6:"header";s:69:"function getTypoLink_URL($params,$urlParameters=array(),$target='')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:12:"$params: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:19:"$urlParameters: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:12:"$target: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:95:"		$this->getTypoLink('',$params,$urlParameters,$target);
		return $this->lastTypoLinkUrl;
	}

	";i:1;i:0;}s:12:"content_size";i:95;s:13:"content_lines";i:4;s:6:"atLine";i:4538;}i:155;a:7:{s:6:"header";s:55:"function currentPageUrl($urlParameters=array(),$id=0)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:19:"$urlParameters: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:8:"$id: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:282:"		return $this->getTypoLink_URL($id?$id:$GLOBALS['TSFE']->id,$urlParameters,$GLOBALS['TSFE']->sPre);
	}
























	/***********************************************
	 *
	 * Miscellaneous functions, stand alone
	 *
	 ***********************************************/

	
	";i:1;i:0;}s:12:"content_size";i:282;s:13:"content_lines";i:33;s:6:"atLine";i:4550;}i:157;a:8:{s:6:"header";s:37:"function noTrimWrap($content,$wrap)	{";s:11:"parentClass";s:10:"tslib_cObj";s:11:"sectionText";a:1:{i:0;s:36:"Miscellaneous functions, stand alone";}s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$wrap: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:125:"		if ($wrap)	{
			$wrapArr = explode('|', $wrap);
			return $wrapArr[1].$content.$wrapArr[2];
		} else return $content;
	}

	";i:1;i:0;}s:12:"content_size";i:125;s:13:"content_lines";i:6;s:6:"atLine";i:4591;}i:159;a:7:{s:6:"header";s:41:"function wrap($content,$wrap,$char='|')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$wrap: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:10:"$char: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:139:"		if ($wrap)	{
			$wrapArr = explode($char, $wrap);
			return trim($wrapArr[0]).$content.trim($wrapArr[1]);
		} else return $content;
	}

	";i:1;i:0;}s:12:"content_size";i:139;s:13:"content_lines";i:6;s:6:"atLine";i:4606;}i:161;a:7:{s:6:"header";s:43:"function listNum($content,$listNum,$char) {";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:13:"$listNum: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:10:"$char: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:248:"		$char = $char ? $char : ',';
		if (t3lib_div::testInt($char))	{
			$char = chr($char);
		}
		$temp = explode($char,$content);
		$last = ''.(count($temp)-1);
		$index=$this->calc(eregi_replace('last',$last,$listNum));
		return $temp[$index];
	}

	";i:1;i:0;}s:12:"content_size";i:248;s:13:"content_lines";i:10;s:6:"atLine";i:4621;}i:163;a:7:{s:6:"header";s:36:"function addParams($content,$conf) {";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		if (!is_array($conf))	{return $content;}
		$key = 1;
		$parts = explode('<',$content);
		if (intval($conf['_offset']))	$key = intval($conf['_offset'])<0 ? count($parts)+intval($conf['_offset']) : intval($conf['_offset']);
		$subparts=explode('>',$parts[$key]);
		if (trim($subparts[0]))	{
				// Get attributes and name
			$attribs = t3lib_div::get_tag_attributes('<'.$subp
[...]
eParams($attribs));
			$parts[$key] = implode('>',$subparts);
			$content = implode('<',$parts);
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:979;s:13:"content_lines";i:26;s:6:"atLine";i:4639;}i:165;a:7:{s:6:"header";s:37:"function wrapSpace($content, $wrap)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$wrap: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:551:"			// This wraps stuff around content
		$result = $content;
		if (trim($wrap))	{
			$wrapArray = explode('|',$wrap);
			$wrapBefore = intval($wrapArray[0]);
			$wrapAfter = intval($wrapArray[1]);
			if ($wrapBefore)	{
				$result = '<img src="'.$GLOBALS['TSFE']->absRefPrefix.'clear.gif" width="1" height="'.$wrapBefore.'" border="0" alt="" /><br />'.$result;
			}
			if ($wrapAfter)	{
				$result.='<img src="'.$GLOBALS['TSFE']->absRefPrefix.'clear.gif" width="1" height="'.$wrapAfter.'" border="0" alt="" /><br />';
			}
		}
		return $result;
	}
	
	";i:1;i:0;}s:12:"content_size";i:551;s:13:"content_lines";i:16;s:6:"atLine";i:4673;}i:167;a:7:{s:6:"header";s:53:"function callUserFunction($funcName,$conf,$content)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:14:"$funcName: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$pre = $GLOBALS['TSFE']->TYPO3_CONF_VARS['FE']['userFuncClassPrefix'];
		if ($pre && 
			!t3lib_div::isFirstPartOfStr(trim($funcName),$pre) &&
			!t3lib_div::isFirstPartOfStr(trim($funcName),'tx_')
			)	{
			$GLOBALS['TT']->setTSlogMessage('Function "'.$funcName.'" was not prepended with "'.$pre.'"',3);
			return $content;
		}
			// Split parts
		$parts = explode('->',$f
[...]
		} else {
				$GLOBALS['TT']->setTSlogMessage('Function "'.$funcName.'" did not exist',3);
			}
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:1138;s:13:"content_lines";i:33;s:6:"atLine";i:4698;}i:169;a:7:{s:6:"header";s:33:"function processParams($params)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:187:"

Parses a set of text lines with "[parameters] = [values]" into an array with parameters as keys containing the value
If lines are empty or begins with "/" or "#" then they are ignored.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:25:"Text which the parameters";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:44:"Array with the parameters as key/value pairs";}}s:7:"content";a:2:{i:0;s:278:"		$paramArr=array();
		$lines=t3lib_div::trimExplode(chr(10),$params,1);
		foreach($lines as $val)	{
			$pair = explode('=',$val,2);
			if (!t3lib_div::inList('#,/',substr(trim($pair[0]),0,1)))	{
				$paramArr[trim($pair[0])] = trim($pair[1]);
			}
		}
		return $paramArr;
	}

	";i:1;i:0;}s:12:"content_size";i:278;s:13:"content_lines";i:11;s:6:"atLine";i:4739;}i:171;a:7:{s:6:"header";s:29:"function keywords($content)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:169:"		$listArr = split(',|;|'.chr(10),$content);
		reset($listArr);
		while(list($k,$v)=each($listArr))	{
			$listArr[$k]=trim($v);
		}
		return implode($listArr,',');
	}

	";i:1;i:0;}s:12:"content_size";i:169;s:13:"content_lines";i:8;s:6:"atLine";i:4757;}i:173;a:7:{s:6:"header";s:38:"function caseshift($theValue, $case)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:14:"$theValue: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$case: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:346:"		$case = strtolower($case);
		switch($case)	{
			case 'upper':
				$theValue = strtoupper($theValue);
				$theValue = strtr($theValue, 'áéúíâêûôîæøåäöü', 'ÁÉÚÍÄËÜÖÏÆØÅÄÖÜ');
			break;
			case 'lower':
				$theValue = strtolower($theValue);
				$theValue = strtr($theValue, 'ÁÉÚÍÄËÜÖÏÆØÅ', 'áéúíâêûôîæøå');
			break;
		}
		return $theValue;
	}

	";i:1;i:0;}s:12:"content_size";i:346;s:13:"content_lines";i:14;s:6:"atLine";i:4773;}i:175;a:7:{s:6:"header";s:42:"function HTMLcaseshift($theValue, $case)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:14:"$theValue: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$case: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:446:"		$inside=0;
		$newVal='';
		$pointer=0;
		$totalLen = strlen($theValue);
		do	{
			if (!$inside)	{
				$len = strcspn(substr($theValue,$pointer),'<');
				$newVal.=$this->caseshift(substr($theValue,$pointer,$len),$case);
				$inside = 1;
			} else {
				$len = strcspn(substr($theValue,$pointer),'>')+1;
				$newVal.=substr($theValue,$pointer,$len);
				$inside = 0;
			}
			$pointer+=$len;
		} while($pointer<$totalLen);
		return $newVal;
	}

	";i:1;i:0;}s:12:"content_size";i:446;s:13:"content_lines";i:19;s:6:"atLine";i:4795;}i:177;a:7:{s:6:"header";s:30:"function bytes($sizeInBytes)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:17:"$sizeInBytes: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:398:"				// Formats a number to Mb or Kb or just bytes
		if ($sizeInBytes>900)	{
			if ($sizeInBytes>900000)	{	// MB
				$val = $sizeInBytes/(1024*1024);
				return number_format($val, (($val<20)?1:0), '.', '').' M';
			} else {	// KB
				$val = $sizeInBytes/(1024);
				return number_format($val, (($val<20)?1:0), '.', '').' K';
			}
		} else {	// Bytes
			return $sizeInBytes.'&nbsp;&nbsp;';
		}
	}

	";i:1;i:0;}s:12:"content_size";i:398;s:13:"content_lines";i:14;s:6:"atLine";i:4821;}i:179;a:7:{s:6:"header";s:36:"function calcAge($seconds,$labels)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$seconds: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:12:"$labels: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"			// returns the 'age' of the tstamp $seconds, 
			// $labels are the labels of the individual units. Defaults to : ' min| hrs| days| yrs'
		if (t3lib_div::testInt($labels)) {
			$labels = ' min| hrs| days| yrs';
		} else {
			$labels=str_replace('"','',$labels);
		}
		
		$labelArr = explode('|',$labels);
		if ($seconds<3600)	{
			$seconds = round ($seconds/60).$labelArr[
[...]
/(24*3600)).$labelArr[2];
		} else {
			$seconds = round ($seconds/(365*24*3600)).$labelArr[3];
		}
		return $seconds;
	}
	
	";i:1;i:1;}s:12:"content_size";i:651;s:13:"content_lines";i:21;s:6:"atLine";i:4843;}i:181;a:7:{s:6:"header";s:96:"function sendNotifyEmail($msg, $recipients, $cc, $email_from, $email_fromName='', $replyTo='')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:74:"

Sending a notification email using $GLOBALS['TSFE']->plainMailEncoded()
";s:5:"param";a:6:{i:0;a:2:{i:0;s:6:"string";i:1;s:48:"The message content. If blank, no email is sent.";}i:1;a:2:{i:0;s:6:"string";i:1;s:39:"Comma list of recipient email addresses";}i:2;a:2:{i:0;s:6:"string";i:1;s:123:"Email address of recipient of an extra mail. The same mail will be sent ONCE more; not using a CC header but sending twice.";}i:3;a:2:{i:0;s:6:"string";i:1;s:20:""From" email address";}i:4;a:2:{i:0;s:6:"string";i:1;s:20:"Optional "From" name";}i:5;a:2:{i:0;s:6:"string";i:1;s:41:"Optional "Reply-To" header email address.";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:20:"Returns true if sent";}}s:7:"content";a:2:{i:0;s:507:"			// Sends order emails:
		$headers=array();
		if ($email_from)	{$headers[]='From: '.$email_fromName.' <'.$email_from.'>';}
		if ($replyTo)		{$headers[]='Reply-To: '.$replyTo;}

		$recipients=implode(t3lib_div::trimExplode(',',$recipients,1),',');
		
		$emailContent = trim($msg);
		if ($emailContent)	{
			$parts = split(chr(10),$emailContent,2);		// First line is subject

[...]
cc)	$GLOBALS['TSFE']->plainMailEncoded($cc, $subject, $plain_message, implode($headers,chr(10)));
			return true;
		}		
	}

	";i:1;i:1;}s:12:"content_size";i:698;s:13:"content_lines";i:19;s:6:"atLine";i:4876;}i:183;a:7:{s:6:"header";s:33:"function URLqMark($url,$params)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:9:"$url: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:12:"$params: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:245:"		// checks if $url has a '?' in it and if not, a '?' is inserted between $url and $params, which are anyway concatenated and returned
		if ($params && !strstr($url,'?'))	{
			return $url.'?'.$params;
		} else {
			return $url.$params;
		}
	}

	";i:1;i:0;}s:12:"content_size";i:245;s:13:"content_lines";i:8;s:6:"atLine";i:4903;}i:185;a:7:{s:6:"header";s:29:"function checkEmail($email)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$email: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:85:"		return ereg('^[A-Za-z0-9\._-]*[@][A-Za-z0-9\._-]*[\.].[A-Za-z0-9]*$',$email);
	}

	";i:1;i:0;}s:12:"content_size";i:85;s:13:"content_lines";i:3;s:6:"atLine";i:4918;}i:187;a:7:{s:6:"header";s:46:"function clearTSProperties($TSArr,$propList)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$TSArr: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:14:"$propList: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:174:"		$list = explode(',',$propList);
		while(list(,$prop)=each($list))	{
			$prop = trim($prop);
			unset($TSArr[$prop]);
			unset($TSArr[$prop.'.']);
		}
		return $TSArr;
	}

	";i:1;i:0;}s:12:"content_size";i:174;s:13:"content_lines";i:9;s:6:"atLine";i:4929;}i:189;a:7:{s:6:"header";s:37:"function mergeTSRef($confArr,$prop)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$confArr: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$prop: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:468:"		if (substr($confArr[$prop],0,1)=='<')	{
			$key = trim(substr($confArr[$prop],1));
			$cF = t3lib_div::makeInstance('t3lib_TSparser');
				// $name and $conf is loaded with the referenced values.
			$old_conf=$confArr[$prop.'.'];
			list($name, $conf) = $cF->getVal($key,$GLOBALS['TSFE']->tmpl->setup);
			if (is_array($old_conf) && count($old_conf))	{
				$conf = $this->joinTSarrays($conf,$old_conf);
			}
			$confArr[$prop.'.']=$conf;
		}
		return $confArr;
	}

	";i:1;i:0;}s:12:"content_size";i:468;s:13:"content_lines";i:14;s:6:"atLine";i:4946;}i:191;a:7:{s:6:"header";s:40:"function joinTSarrays($conf,$old_conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:14:"$old_conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:252:"		if (is_array($old_conf))	{
			reset($old_conf);
			while(list($key,$val)=each($old_conf))	{
				if (is_array($val))	{
					$conf[$key] = $this->joinTSarrays($conf[$key],$val);
				} else {
					$conf[$key] = $val;
				}
			}
		}
		return $conf;
	}

	";i:1;i:0;}s:12:"content_size";i:252;s:13:"content_lines";i:13;s:6:"atLine";i:4968;}i:193;a:7:{s:6:"header";s:59:"function gifBuilderTextBox($gifbuilderConf, $conf, $text)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:20:"$gifbuilderConf: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:10:"$text: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"			// This function creates a number of TEXT-objects in a Gifbuilder configuration in order to create a text-field like thing. Used with the script tslib/media/scripts/postit.inc
		$chars = intval($conf['chars']) ? intval($conf['chars']) : 20;
		$lineDist = intval($conf['lineDist']) ? intval($conf['lineDist']) : 20;
		$Valign = strtolower(trim($conf['Valign']));
		$tmplObj
[...]
hunk;
			}
			$gifbuilderConf = $this->clearTSProperties($gifbuilderConf,$tmplObjNumber);
		}
		return $gifbuilderConf;
	}

	";i:1;i:1;}s:12:"content_size";i:1757;s:13:"content_lines";i:46;s:6:"atLine";i:4990;}i:195;a:7:{s:6:"header";s:49:"function linebreaks($string,$chars,$maxLines=0)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:12:"$string: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:11:"$chars: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:14:"$maxLines: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:361:"		$lines = explode(chr(10),$string);
		$lineArr=Array();
		$c=0;
		while(list(,$paragraph)=each($lines))	{
			$words = explode(' ',$paragraph);
			while(list(,$word)=each($words))	{
				if (strlen($lineArr[$c].$word)>$chars)	{
					$c++;
				}
				if (!$maxLines || $c<$maxLines)	{
					$lineArr[$c].= $word.' ';
				}
			}
			$c++;
		}
		return $lineArr;
	}

	";i:1;i:0;}s:12:"content_size";i:361;s:13:"content_lines";i:18;s:6:"atLine";i:5045;}i:197;a:7:{s:6:"header";s:86:"function getUpdateJS($dataArray, $formName, $arrPrefix, $fieldList, $stripSlashes=1)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:15:"$dataArray: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:14:"$formName: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:15:"$arrPrefix: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:15:"$fieldList: ...";}i:4;a:2:{i:0;s:6:"[type]";i:1;s:18:"$stripSlashes: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$JSPart='';
		$updateValues=t3lib_div::trimExplode(',',$fieldList);
		while(list(,$fKey)=each($updateValues))	{
			$value = $dataArray[$fKey];
			if (is_array($value))	{
				reset($value);
				while(list(,$Nvalue)=each($value))	{
					$Nvalue = stripslashes($Nvalue);
					if ($stripSlashes)	{$Nvalue = stripslashes($Nvalue);}
					$JSPart.="
	updateForm('".$formName."','"
[...]
*******************
	 *
	 * Database functions, making of queries
	 *
	 ***********************************************/

	
	";i:1;i:1;}s:12:"content_size";i:1135;s:13:"content_lines";i:62;s:6:"atLine";i:5074;}i:199;a:8:{s:6:"header";s:73:"function DBgetUpdate($table, $uid, $dataArr, $fieldList, $addSlashes=0)	{";s:11:"parentClass";s:10:"tslib_cObj";s:11:"sectionText";a:1:{i:0;s:37:"Database functions, making of queries";}s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$table: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:9:"$uid: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:13:"$dataArr: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:15:"$fieldList: ...";}i:4;a:2:{i:0;s:6:"[type]";i:1;s:16:"$addSlashes: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		unset($dataArr['uid']);	// uid can never be set
		$uid=intval($uid);
		if ($uid)	{
			$fieldList=implode(t3lib_div::trimExplode(',',$fieldList,1),',');
			$query='';
			$queryA=array();
			reset($dataArr);
			while(list($f,$v)=each($dataArr))	{
				if (t3lib_div::inList($fieldList,$f))	{
					$queryA[]=$f.'="'.($addSlashes?addslashes($v):$v).'"';
				}
			}
			if ($GLOBA
[...]
nt($queryA))	{
				$query='UPDATE '.$table.' SET '.implode($queryA,',').' WHERE uid='.$uid;
				return $query;
			}
		}
	}

	";i:1;i:1;}s:12:"content_size";i:622;s:13:"content_lines";i:22;s:6:"atLine";i:5147;}i:201;a:7:{s:6:"header";s:36:"function DBgetDelete($table, $uid)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$table: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:9:"$uid: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:303:"		$uid=intval($uid);
		if ($uid)	{
			if ($GLOBALS['TCA'][$table]['ctrl']['delete'])	{
				$field=$GLOBALS['TCA'][$table]['ctrl']['delete'];
				$query='UPDATE '.$table.' SET '.$field.'=1 WHERE uid='.$uid;
			} else {
				$query='DELETE FROM '.$table.' WHERE uid='.$uid;
			}
			return $query;
		}
	}

	";i:1;i:0;}s:12:"content_size";i:303;s:13:"content_lines";i:12;s:6:"atLine";i:5177;}i:203;a:7:{s:6:"header";s:73:"function DBgetInsert($table, $pid, $dataArr, $fieldList, $addSlashes=0)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$table: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:9:"$pid: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:13:"$dataArr: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:15:"$fieldList: ...";}i:4;a:2:{i:0;s:6:"[type]";i:1;s:16:"$addSlashes: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$fp=array();
		$vp=array();
		$extraList='pid';
		if ($GLOBALS['TCA'][$table]['ctrl']['tstamp'])	{$field=$GLOBALS['TCA'][$table]['ctrl']['tstamp']; $dataArr[$field]=time(); $extraList.=','.$field;}
		if ($GLOBALS['TCA'][$table]['ctrl']['crdate'])	{$field=$GLOBALS['TCA'][$table]['ctrl']['crdate']; $dataArr[$field]=time(); $extraList.=','.$field;}
		if ($GLOBALS['TCA'][$ta
[...]
$f))	{
				$fp[]=$f;
				$vp[]=$addSlashes?addslashes($v):$v;
			}
		}
		return $this->DBcompileInsert($table,$fp,$vp);
	}

	";i:1;i:1;}s:12:"content_size";i:1410;s:13:"content_lines";i:22;s:6:"atLine";i:5200;}i:205;a:7:{s:6:"header";s:42:"function DBcompileInsert($table,$fp,$vp)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$table: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:8:"$fp: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:8:"$vp: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:116:"		$query = 'INSERT INTO '.$table.' ('.implode($fp,',').') VALUES ("'.implode('","',$vp).'")';
		return $query;
	}

	";i:1;i:0;}s:12:"content_size";i:116;s:13:"content_lines";i:4;s:6:"atLine";i:5231;}i:207;a:7:{s:6:"header";s:84:"function DBmayFEUserEdit($table,$row, $feUserRow, $allowedGroups='',$feEditSelf=0)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$table: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:9:"$row: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:15:"$feUserRow: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:19:"$allowedGroups: ...";}i:4;a:2:{i:0;s:6:"[type]";i:1;s:16:"$feEditSelf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$groupList = $allowedGroups ? implode(array_intersect(t3lib_div::trimExplode(',',$feUserRow['usergroup'],1),t3lib_div::trimExplode(',',$allowedGroups,1)),',') : $feUserRow['usergroup'];
		$ok=0;
			// points to the field that allowes further editing from frontend if not set. If set the record is locked.
		if (!$GLOBALS['TCA'][$table]['ctrl']['fe_admin_lock'] || !$row[$GL
[...]
f ($rowFEUser)	{
					if (t3lib_div::inList($groupList, $rowFEUser))	{
						$ok=1;
					}
				}
			}
		}
		return $ok;
	}

	";i:1;i:1;}s:12:"content_size";i:1271;s:13:"content_lines";i:28;s:6:"atLine";i:5246;}i:209;a:7:{s:6:"header";s:83:"function DBmayFEUserEditSelect($table,$feUserRow,$allowedGroups='',$feEditSelf=0)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$table: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:15:"$feUserRow: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:19:"$allowedGroups: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:16:"$feEditSelf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"			// Returns where-definition that selects user-editable records.
		$groupList = $allowedGroups ? implode(array_intersect(t3lib_div::trimExplode(',',$feUserRow['usergroup'],1),t3lib_div::trimExplode(',',$allowedGroups,1)),',') : $feUserRow['usergroup'];
		$OR_arr=array();
			// points to the field (integer) that holds the fe_users-id of the creator fe_user
		if ($GLOBALS[
[...]
min_lock'])	{
				$whereDef.=' AND NOT '.$GLOBALS['TCA'][$table]['ctrl']['fe_admin_lock'];
			}
		}
		return $whereDef;
	}

	";i:1;i:1;}s:12:"content_size";i:1306;s:13:"content_lines";i:29;s:6:"atLine";i:5284;}i:211;a:7:{s:6:"header";s:46:"function enableFields($table,$show_hidden=0)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$table: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:17:"$show_hidden: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:181:"		return $GLOBALS['TSFE']->sys_page->enableFields($table,$show_hidden?$show_hidden:($table=='pages' ? $GLOBALS['TSFE']->showHiddenPage : $GLOBALS['TSFE']->showHiddenRecords));
	}

	";i:1;i:0;}s:12:"content_size";i:181;s:13:"content_lines";i:3;s:6:"atLine";i:5321;}i:213;a:7:{s:6:"header";s:109:"function getTreeList($id,$depth,$begin=0,$dontCheckEnableFields=0,$addSelectFields='',$moreWhereClauses='')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:6:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:8:"$id: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:11:"$depth: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:11:"$begin: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:27:"$dontCheckEnableFields: ...";}i:4;a:2:{i:0;s:6:"[type]";i:1;s:21:"$addSelectFields: ...";}i:5;a:2:{i:0;s:6:"[type]";i:1;s:22:"$moreWhereClauses: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		/* Generates a list of Page-uid's from $id. List does not include $id itself
		 The only pages WHICH PREVENTS DECENDING in a branch are 
		   - deleted pages, 
		   - pages in a recycler (added 061101) or of the Backend User Section type (added 080102)
		   - pages that has the extendToSubpages set, WHERE start/endtime, hidden and fe_users would hide the records.
		 Appa
[...]
tCheckEnableFields, $addSelectFields, $moreWhereClauses);
					}
				}
			}
		}
//		debug($theList);
		return $theList;
	}

	";i:1;i:1;}s:12:"content_size";i:1826;s:13:"content_lines";i:36;s:6:"atLine";i:5336;}i:215;a:7:{s:6:"header";s:45:"function whereSelectFromList($field,$value)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$field: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:11:"$value: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:203:"		$command=addslashes($value);
		$where='('.$field.' LIKE "%,'.$command.',%" OR '.$field.' LIKE "'.$command.',%" OR '.$field.' LIKE "%,'.$command.'" OR '.$field.'="'.$command.'")';
		return $where;
	}

	";i:1;i:0;}s:12:"content_size";i:203;s:13:"content_lines";i:5;s:6:"atLine";i:5380;}i:217;a:7:{s:6:"header";s:99:"function mm_query_uidList($select,$local_table_uidlist,$mm_table,$foreign_table='',$endClause='')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:12:"$select: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:25:"$local_table_uidlist: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:14:"$mm_table: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:19:"$foreign_table: ...";}i:4;a:2:{i:0;s:6:"[type]";i:1;s:15:"$endClause: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:268:"		$query = 'SELECT '.$select.'
			FROM '.$mm_table.($foreign_table?','.$foreign_table:'').'
			WHERE '.$mm_table.'.uid_local IN ('.$local_table_uidlist.')'.($foreign_table?' AND '.$foreign_table.'.uid='.$mm_table.'.uid_foreign ':' ').$endClause;
		return $query;
	}

	";i:1;i:0;}s:12:"content_size";i:268;s:13:"content_lines";i:6;s:6:"atLine";i:5396;}i:219;a:7:{s:6:"header";s:80:"function mm_query($select,$local_table,$mm_table,$foreign_table,$endClause='')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:12:"$select: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:17:"$local_table: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:14:"$mm_table: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:19:"$foreign_table: ...";}i:4;a:2:{i:0;s:6:"[type]";i:1;s:15:"$endClause: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:276:"		$query = 'SELECT '.$select.'
			FROM '.$local_table.','.$mm_table.($foreign_table?','.$foreign_table:'').'
			WHERE '.$local_table.'.uid='.$mm_table.'.uid_local'.($foreign_table?' AND '.$foreign_table.'.uid='.$mm_table.'.uid_foreign ':' ').$endClause;
		return $query;
	}

	";i:1;i:0;}s:12:"content_size";i:276;s:13:"content_lines";i:6;s:6:"atLine";i:5413;}i:221;a:7:{s:6:"header";s:64:"function searchWhere($sw,$searchFieldList,$prefixTableName='')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:35:"

Generates a search where clause.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:8:"$sw: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:21:"$searchFieldList: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:21:"$prefixTableName: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:547:"		$prefixTableName = $prefixTableName?$prefixTableName.'.':'';
		$where='';
		if ($sw)	{
			$searchFields=explode(',',$searchFieldList);
			$kw=split('[ ,]',$sw);

			while(list(,$val)=each($kw))	{
				$val=trim($val);
				$where_p=array();
				if (strlen($val)>=2)	{
					reset($searchFields);
					while(list(,$field)=each($searchFields))	{
						$where_p[]=$prefixTableName.$field.' LIKE "%'.addslashes($val).'%"';
					}
				}
				if (count($where_p))	{
					$where.=' AND ('.implode($where_p,' OR ').')';
				}
			}
		}
		return $where;
	}

	";i:1;i:0;}s:12:"content_size";i:547;s:13:"content_lines";i:23;s:6:"atLine";i:5428;}i:223;a:7:{s:6:"header";s:33:"function getQuery($table,$conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$table: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$conf['pidInList'] = trim($this->stdWrap($conf['pidInList'],$conf['pidInList.']));
		if (!strcmp($conf['pidInList'],''))	{
			$conf['pidInList'] = 'this';
		}
		
		$where = $this->getWhere($table,$conf);
		if ($conf['max'] || $conf['begin']) {
			if (strstr(strtolower($conf['begin'].$conf['max']),'total'))	{
				$res = @mysql(TYPO3_db,'SELECT count(*) FROM '.$table.' '.$
[...]
IN ' .trim($conf['rightjoin']);
			}
			$query = 'SELECT * FROM '.$table.' '.$joinPart.' '.$where;
		}
		return $query;
	}

	";i:1;i:1;}s:12:"content_size";i:1468;s:13:"content_lines";i:47;s:6:"atLine";i:5459;}i:225;a:7:{s:6:"header";s:34:"function checkPidArray($listArr)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$listArr: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:486:"		$outArr = Array();
		if (is_array($listArr) && count($listArr))	{
			$query = 'SELECT uid FROM pages WHERE uid IN ('.implode($listArr,',').')'.$this->enableFields('pages').' AND doktype NOT IN ('.$this->checkPid_badDoktypeList.')';
			$res = @mysql(TYPO3_db,$query);
			if ($error = mysql_error())	{
				$GLOBALS['TT']->setTSlogMessage($error.': '.$query,3);
			} else {
				while($row = mysql_fetch_assoc($res))	{
					$outArr[]=$row['uid'];
				}
			}			
		}
		return $outArr;
	}

	";i:1;i:0;}s:12:"content_size";i:486;s:13:"content_lines";i:15;s:6:"atLine";i:5513;}i:227;a:7:{s:6:"header";s:25:"function checkPid($uid)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:9:"$uid: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:410:"		$uid = intval($uid);
		if (!isset($this->checkPid_cache[$uid]))	{	
			$query = 'SELECT uid FROM pages WHERE uid='.$uid.$this->enableFields('pages').' AND doktype NOT IN ('.$this->checkPid_badDoktypeList.')';
			$res = @mysql(TYPO3_db,$query);
			if (mysql_num_rows($res))	{
				$this->checkPid_cache[$uid]=1;
			} else {
				$this->checkPid_cache[$uid]=0;
			}
		}
		return $this->checkPid_cache[$uid];
	}

	";i:1;i:0;}s:12:"content_size";i:410;s:13:"content_lines";i:13;s:6:"atLine";i:5535;}i:229;a:7:{s:6:"header";s:33:"function getWhere($table,$conf)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$table: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$query = '';
		$pid_uid_flag=0;
		if (trim($conf['uidInList']))	{
			$listArr = t3lib_div::intExplode(',',str_replace('this',$GLOBALS['TSFE']->contentPid,$conf['uidInList']));  // str_replace instead of ereg_replace 020800
			if (count($listArr)==1)	{
				$query.=' AND uid='.$listArr[0];
			} else {
				$query.=' AND uid IN ('.implode($listArr,',').')';
			}
			$pid_uid_
[...]
********************************
	 *
	 * Frontend editing functions
	 *
	 ***********************************************/

	";i:1;i:1;}s:12:"content_size";i:2047;s:13:"content_lines";i:90;s:6:"atLine";i:5556;}i:231;a:8:{s:6:"header";s:74:"function editPanel($content, $conf, $currentRecord='', $dataArr=array())	{";s:11:"parentClass";s:10:"tslib_cObj";s:11:"sectionText";a:1:{i:0;s:26:"Frontend editing functions";}s:4:"cDat";a:5:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:19:"$currentRecord: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:13:"$dataArr: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=375&cHash=7d8915d508";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=375&cHash=7d8915d508 ";}}}s:7:"content";a:2:{i:0;s:507:"		global $TCA,$BE_USER;

			// If no backend user, return immediately
		if (!$GLOBALS['TSFE']->beUserLogin)		{return $content;}
		
			// If a backend user is logged in, then go on...
		if ($conf['newRecordFromTable'])	{
			$currentRecord = $conf['newRecordFromTable'].':NEW';
			$conf['allow']='new';
		}
		
		if (!$currentRecord)	$currentRecord=$this->currentRecord;
		if (!
[...]
reviewBorder($table,$dataArr,$finalOut,$conf['previewBorder']);
			return $finalOut;
		} else {
			return $content;
		}
	}

	";i:1;i:1;}s:12:"content_size";i:9369;s:13:"content_lines";i:147;s:6:"atLine";i:5657;}i:233;a:7:{s:6:"header";s:109:"function editIcons($content,$params, $conf=array(), $currentRecord='', $dataArr=array(),$addUrlParamStr='')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:6:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:12:"$params: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:10:"$conf: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:19:"$currentRecord: ...";}i:4;a:2:{i:0;s:6:"[type]";i:1;s:13:"$dataArr: ...";}i:5;a:2:{i:0;s:6:"[type]";i:1;s:20:"$addUrlParamStr: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		global $BE_USER;

			// If no backend user, return immediately
		if (!$GLOBALS['TSFE']->beUserLogin)		{return $content;}
		
			// Check incoming params:
		$rParts = explode(':',$currentRecord?$currentRecord:$this->currentRecord);
#debug($rParts);

		list($table,$fieldList)=t3lib_div::trimExplode(':',$params,1);
		if (!$fieldList)	{
			$fieldList=$table;
			$table=$rParts
[...]
Buf)).$icon.substr($content,strlen($cBuf)) : $content=$icon.$content;
			} else $content.=$icon;
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:2098;s:13:"content_lines";i:45;s:6:"atLine";i:5816;}i:235;a:7:{s:6:"header";s:82:"function editPanelLinkWrap($string,$formName,$cmd,$currentRecord='',$confirm='')	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:12:"$string: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:14:"$formName: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:9:"$cmd: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:19:"$currentRecord: ...";}i:4;a:2:{i:0;s:6:"[type]";i:1;s:13:"$confirm: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$eFONPage = $GLOBALS['BE_USER']->uc['TSFE_adminConfig']['edit_editFormsOnPage'];
		$nV=t3lib_div::GPvar('ADMCMD_view')?1:0;
		if ($cmd=='edit' && !$eFONPage)	{
			$rParts = explode(':',$currentRecord);
			$out=$this->editPanelLinkWrap_doWrap($string,TYPO3_mainDir.'alt_doc.php?edit['.$rParts[0].']['.$rParts[1].']=edit&noView='.$nV,$currentRecord);
		} elseif ($cmd=='new' 
[...]
ue=\''.$cmd.'\'; document.'.$formName.'.submit();'.$cf2.' return false;').
				'">'.$string.'</a>';
		}
		return $out;	
	}

	";i:1;i:1;}s:12:"content_size";i:1216;s:13:"content_lines";i:27;s:6:"atLine";i:5872;}i:237;a:7:{s:6:"header";s:64:"function editPanelLinkWrap_doWrap($string,$url,$currentRecord)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:12:"$string: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:9:"$url: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:19:"$currentRecord: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		if ($GLOBALS['BE_USER']->uc['TSFE_adminConfig']['edit_editNoPopup'] || $GLOBALS['BE_USER']->extAdminConfig['module.']['edit.']['forceNoPopup'])	{
			$retUrl = t3lib_div::getIndpEnv('REQUEST_URI');
			$rParts = explode(':',$currentRecord);
			if ($rParts[0]=='tt_content' && $this->parentRecordNumber>2)	{	// This parentRecordNumber is used to make sure that only elements 3
[...]
ight=400').',status=0,menubar=0,scrollbars=1,resizable=1\');vHWin.focus();return false;').
				'">'.$string.'</a>';
		}
	}

	";i:1;i:1;}s:12:"content_size";i:932;s:13:"content_lines";i:14;s:6:"atLine";i:5908;}i:239;a:7:{s:6:"header";s:62:"function editPanelPreviewBorder($table,$row,$content,$thick)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$table: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:9:"$row: ...";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:11:"$thick: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:264:"		$thick = t3lib_div::intInRange($thick,1,100);
		if ($this->isDisabled($table,$row))	{
			$content='<table border="'.$thick.'" cellpadding="0" cellspacing="0" bordercolor="#cccccc" width="100%"><tr><td>'.$content.'</td></tr></table>';
		}
		return $content;
	}

	";i:1;i:0;}s:12:"content_size";i:264;s:13:"content_lines";i:7;s:6:"atLine";i:5932;}i:241;a:7:{s:6:"header";s:34:"function isDisabled($table,$row)	{";s:11:"parentClass";s:10:"tslib_cObj";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$table: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:9:"$row: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		global $TCA;
		if (
			($TCA[$table]['ctrl']['enablecolumns']['disabled'] && $row[$TCA[$table]['ctrl']['enablecolumns']['disabled']]) ||
			($TCA[$table]['ctrl']['enablecolumns']['fe_group'] && $GLOBALS['TSFE']->simUserGroup && $row[$TCA[$table]['ctrl']['enablecolumns']['fe_group']]==$GLOBALS['TSFE']->simUserGroup) ||
			($TCA[$table]['ctrl']['enablecolumns']['starttime'
[...]
['enablecolumns']['endtime']] && $row[$TCA[$table]['ctrl']['enablecolumns']['endtime']]<time())
		)	return true;
	}
}







";i:1;i:1;}s:12:"content_size";i:655;s:13:"content_lines";i:16;s:6:"atLine";i:5947;}i:243;a:8:{s:6:"header";s:22:"class tslib_frameset {";s:5:"class";i:1;s:11:"parentClass";s:14:"tslib_frameset";s:4:"cDat";a:5:{s:4:"text";s:25:"

Rendering of framesets
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:17:"@subpackage tslib";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:6:"tslib ";}}}s:7:"content";a:2:{i:0;s:2:"
	";i:1;i:-1;}s:12:"content_size";i:2;s:13:"content_lines";i:1;s:6:"atLine";i:5971;}i:245;a:7:{s:6:"header";s:23:"function make($setup)	{";s:11:"parentClass";s:14:"tslib_frameset";s:4:"cDat";a:3:{s:4:"text";s:1:"
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$setup: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$content = '';
		if (is_array($setup))	{
			$sKeyArray=t3lib_TStemplate::sortedKeyList($setup);
			reset($sKeyArray);
			while(list(,$theKey)=each($sKeyArray))	{
				$theValue=$setup[$theKey];
				if (intval($theKey) && $conf=$setup[$theKey.'.'])	{
					switch($theValue)	{
						case 'FRAME':
							$typeNum = intval($GLOBALS['TSFE']->tmpl->setup[$conf['obj'].'.']['typeN
[...]
			break;
					}
				}
			}
			return '<frameset'.$this->framesetParams($setup).'>'.chr(10).$content.'</frameset>';
		}
	}

	";i:1;i:1;}s:12:"content_size";i:807;s:13:"content_lines";i:26;s:6:"atLine";i:5977;}i:247;a:7:{s:6:"header";s:40:"function frameParams($setup, $typeNum)	{";s:11:"parentClass";s:14:"tslib_frameset";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$setup: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:13:"$typeNum: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$paramStr = '';
		$name = $setup['obj'];
			// 		
		if ($GLOBALS['TSFE']->config['config']['simulateStaticDocuments'])	{
			$theCompURL='';
			$theCompURL.=$GLOBALS['TSFE']->makeSimulFileName($GLOBALS['TSFE']->page['title'],
				($GLOBALS['TSFE']->page['alias'] ? $GLOBALS['TSFE']->page['alias'] : $GLOBALS['TSFE']->page['uid']),
				intval($typeNum));
			if ($GLOBALS['TSF
[...]
else {$paramStr.=' name="'.$name.'"';}
		if ($setup['params']) {	$paramStr.=' '.$setup['params'];	}
		return $paramStr;
	}

	";i:1;i:1;}s:12:"content_size";i:1368;s:13:"content_lines";i:26;s:6:"atLine";i:6011;}i:249;a:7:{s:6:"header";s:33:"function framesetParams($setup)	{";s:11:"parentClass";s:14:"tslib_frameset";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$setup: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:257:"		$paramStr = '';
		if ($setup['cols']) {		$paramStr.=' cols="'.$setup['cols'].'"';	}
		if ($setup['rows']) {		$paramStr.=' rows="'.$setup['rows'].'"';	}
		if ($setup['params']) {	$paramStr.=' '.$setup['params'];	}
		return $paramStr;
	}
}

















";i:1;i:0;}s:12:"content_size";i:257;s:13:"content_lines";i:24;s:6:"atLine";i:6044;}i:251;a:8:{s:6:"header";s:25:"class tslib_tableOffset	{";s:5:"class";i:1;s:11:"parentClass";s:17:"tslib_tableOffset";s:4:"cDat";a:5:{s:4:"text";s:33:"

Rendering of tables for offset
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:4:{i:0;s:25:"@see	tslib_cObj::OTABLE()";i:1;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:2;s:14:"@package TYPO3";i:3;s:17:"@subpackage tslib";}s:11:"other_index";a:4:{s:4:"@see";a:1:{i:0;s:21:"tslib_cObj::OTABLE() ";}s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:6:"tslib ";}}}s:7:"content";a:2:{i:0;s:188:"	var $tableParams = 'border="0" cellspacing="0" cellpadding="0"';
	var $default_tableParams = 'border="0" cellspacing="0" cellpadding="0"';
	var $tdParams = ' width="99%" valign="top"';

	";i:1;i:-1;}s:12:"content_size";i:188;s:13:"content_lines";i:4;s:6:"atLine";i:6077;}i:253;a:7:{s:6:"header";s:34:"function start($content,$offset)	{";s:11:"parentClass";s:17:"tslib_tableOffset";s:4:"cDat";a:3:{s:4:"text";s:1:"
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:13:"$content: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:12:"$offset: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$valPairs = t3lib_div::intExplode(',',$offset.',,,,,');
	//	debug($valPairs);
		if ($valPairs[0] || $valPairs[1] || $valPairs[2] || $valPairs[3] || $valPairs[4] || $valPairs[5])	{
				// If width is defined AND there has been no change to the default table params, then extend them to a tablewidth of 1
			if ($valPairs[4] && $this->default_tableParams==$this->tableParams)
[...]

//			debug($rows);
			return $this->begin.implode('',$rows).$this->end;
		} else return $content;
	}
}





















";i:1;i:1;}s:12:"content_size";i:2491;s:13:"content_lines";i:70;s:6:"atLine";i:6087;}i:255;a:5:{s:6:"header";s:26:"class tslib_controlTable	{";s:5:"class";i:1;s:11:"parentClass";s:18:"tslib_controlTable";s:4:"cDat";a:5:{s:4:"text";s:46:"

Rendering of tables for content positioning
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:4:{i:0;s:25:"@see tslib_cObj::CTABLE()";i:1;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:2;s:14:"@package TYPO3";i:3;s:17:"@subpackage tslib";}s:11:"other_index";a:4:{s:4:"@see";a:1:{i:0;s:21:"tslib_cObj::CTABLE() ";}s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:6:"tslib ";}}}s:6:"atLine";i:6166;}i:257;a:7:{s:6:"header";s:35:"function start($offset,$cMargins)	{";s:11:"parentClass";s:18:"tslib_controlTable";s:4:"cDat";a:3:{s:4:"text";s:1:"
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:12:"$offset: ...";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:14:"$cMargins: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"		$offArr = t3lib_div::intExplode(',',$offset);
		$cMargArr = t3lib_div::intExplode(',',$cMargins);
		
	
	
		$cols = 0;
		$rows = 0;
		
		if ($this->lm) $cols++;
		if ($this->rm) $cols++;
		if ($cMargArr[0]) $cols++;
		if ($cMargArr[2]) $cols++;
		if ($cMargArr[1]||$cMargArr[3]||$this->tm||$this->bm||$this->content||$this->contentW) $cols++;
		
		if ($cMargArr[1]) $rows++;
[...]
ib/class.tslib_content.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/class.tslib_content.php']);
}

?>";i:1;i:1;}s:12:"content_size";i:2936;s:13:"content_lines";i:68;s:6:"atLine";i:6196;}}}s:24:"tslib/class.tslib_fe.php";a:3:{s:8:"filesize";i:105982;s:6:"header";a:5:{s:4:"text";s:89:"

Main frontend class, instantiated in the index_ts.php script as the global object TSFE
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:3:"DAT";a:84:{i:1;a:8:{s:6:"header";s:16:"class tslib_fe	{";s:5:"class";i:1;s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:5:{s:4:"text";s:89:"

Main frontend class, instantiated in the index_ts.php script as the global object TSFE
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:7:"content";a:2:{i:0;s:10655:"
		// CURRENT PAGE:
	var $id='';							// The page id (int)
	var $type='';						// RO The type (int)
	var $idParts=array();				// Loaded with the id, exploded by ','
	var $cHash='';						// The submitted cHash
	var $no_cache=''; 					// Page will not be cached. Write only true. Never clear value (some other code might have reasons to set it true)
	var $rootLine='';					// The rootLine (all the way to tree root, not only the current site!) (array)
	var $page='';						// The pagerecord (array)
	var $contentPid=0;					// This will normally point to the same value as id, but can be changed to point to another page from which content will then be displayed instead.
	var $sys_page='';					// The object with pagefunctions (object)
	var $jumpurl='';		
	var $pageNotFound=0;				// Is set to 1 if a pageNotFound handler could have been called.
	var $domainStartPage=0;				// Domain start page
	var $MP='';
	var $RDCT='';
	var $page_cache_reg1=0;				// This can be set from applications as a way to tag cached versions of a page and later perform some external cache management, like clearing only a part of the cache of a page...

		// USER
	var $fe_user='';					// The user (object)
	var $loginUser='';					// Global falg indicating that a front-end user is logged in. This is set only if a user really IS logged in. The group-list may show other groups (like added by IP filter or so) even though there is no user. 
	var $gr_list='';					// (RO=readonly) The group list, sorted numerically. Group '0,-1' is the default group, but other groups may be added by other means than a user being logged in though...
	var $beUserLogin='';				// Flag that indicates if a Backend user is logged in!

		// PREVIEW
	var $fePreview='';					// Flag indication that preview is active. This is based on the login of a backend user and whether the backend user has read access to the current page.
	var $showHiddenPage='';				// Flag indicating that hidden pages should be shown, selected and so on. This goes for almost all selection of pages!
	var $showHiddenRecords='';			// Flag indicating that hidden records should be shown. This includes sys_template, pages_language_overlay and even fe_groups in addition to all other regular content. So in effect, this includes everything except pages.
	var $simUserGroup='0';				// Value that contains the simulated usergroup if any

		// CONFIGURATION
	var $TYPO3_CONF_VARS=array();		// The configuration array as set up in t3lib/config_default.php. Should be an EXACT copy of the global array.
	var $config='';						// 'CONFIG' object from TypoScript. Array generated based on the TypoScript configuration of the current page. Saved with the cached pages.

		// TEMPLATE / CACHE
	var $tmpl='';						// The TypoScript template object. Used to parse the TypoScript template
	var $cacheTimeOutDefault='';		// Is set to the time-to-live time of cached pages. If false, default is 60*60*24, which is 24 hours.
	var $cacheContentFlag='';			// Set internally if cached content is fetched from the database
	var $all='';						// $all used by template fetching system. This array is an identification of the template. If $this->all is empty it's because the template-data is not cached, which it must be.
	var $sPre='';						// toplevel - objArrayName, eg 'page'
	var $pSetup='';						// TypoScript configuration of the page-object pointed to by sPre. $this->tmpl->setup[$this->sPre.'.']
	var $newHash='';					// This hash is unique to the template, the $this->id and $this->type vars and the gr_list (list of groups). Used to get and later store the cached data
	var $getMethodUrlIdToken='';		// If config.ftu (Frontend Track User) is set in TypoScript for the current page, the string value of this var is substituted in the rendered source-code with the string, '&ftu=[token...]' which enables GET-method usertracking as opposed to cookie based
	var $noCacheBeforePageGen='';		// This flag is set before inclusion of pagegen.php IF no_cache is set. If this flag is set after the inclusion of pagegen.php, no_cache is forced to be set. This is done in order to make sure that php-code from pagegen does not falsely clear the no_cache flag.
	var $tempContent='';				// This flag indicates if temporary content went into the cache during page-generation.
	var $forceTemplateParsing='';				// Boolean, passed to TypoScript template class and tells it to render the template forcibly
	var $cHash_array=array();			// The array which cHash_calc is based on, see ->makeCacheHash().
	var $hash_base='';					// Loaded with the serialized array that is used for generating a hashstring for the cache
	var $pagesTSconfig='';				// May be set to the pagesTSconfig
		// PAGE-GENERATION / cOBJ
	/*
		Eg. insert JS-functions in this array ($additionalHeaderData) to include them once. Use associative keys.
		Keys in use:
			JSFormValidate	:		<script type="text/javascript" src="'.$GLOBALS["TSFE"]->absRefPrefix.'t3lib/jsfunc.validateform.js"></script>
			JSincludeFormupdate :	<script type="text/javascript" src="t3lib/jsfunc.updateform.js"></script>
			JSMenuCode, JSMenuCode_menu :			JavaScript for the JavaScript menu
			JSCode : reserved
			JSImgCode : reserved
	*/
	var $additionalHeaderData=array();	// used to accumulate additional HTML-code for the header-section, <head>...</head>. Insert either associative keys (like additionalHeaderData['myStyleSheet'], see reserved keys above) or num-keys (like additionalHeaderData[] = '...')
	var $additionalJavaScript=array();	// used to accumulate additional JavaScript-code. Works like additionalHeaderData. Reserved keys at 'openPic' and 'mouseOver'
	var $additionalCSS=array();			// used to accumulate additional Style code. Works like additionalHeaderData.
	var $JSeventFuncCalls = array(		// you can add JavaScript functions to each entry in these arrays. Please see how this is done in the GMENU_LAYERS script. The point is that many applications on a page can set handlers for onload, onmouseover and onmouseup
		'onmousemove' => array(),
		'onmouseup' => array(),
		'onload' => array(),
	);
	var $JSCode='';						// Depreciated, use additionalJavaScript instead.
	var $JSImgCode='';					// Used to accumulate JavaScript loaded images (by menus)
	var $divSection='';					// Used to accumulate DHTML-layers.

		// RENDERING configuration, settings from TypoScript is loaded into these vars. See pagegen.php
	var $debug='';						// Debug flag, may output special debug html-code.
	var $intTarget='';					// Default internal target
	var $extTarget='';					// Default external target
	var $MP_defaults=array();			// Keys are page ids and values are default &MP (mount point) values to set when using the linking features...)
	var $spamProtectEmailAddresses=0;	// If set, typolink() function encrypts email addresses. Is set in pagegen-class.
	var $absRefPrefix='';				// Absolute Reference prefix
	var $absRefPrefix_force=0;			// Absolute Reference prefix force flag. This is set, if the type and id is retrieve from PATH_INFO and thus we NEED to prefix urls with at least '/'
	var $compensateFieldWidth='';		// Factor for form-field widths compensation
	var $lockFilePath='';				// Lock file path
	var $ATagParams='';					// <A>-tag parameters
	var $sWordRegEx='';					// Search word regex, calculated if there has been search-words send. This is used to mark up the found search words on a page when jumped to from a link in a search-result.
	var $sWordList='';					// Is set to the incoming array sword_list in case of a page-view jumped to from a search-result.
	var $linkVars='';					// A string prepared for insertion in all links on the page as url-parameters. Based on configuration in TypoScript where you defined which GET_VARS you would like to pass on.
	var $displayEditIcons='';			// If set, edit icons are rendered aside content records. Must be set only if the ->beUserLogin flag is set and set_no_cache() must be called as well.
	var $displayFieldEditIcons='';		// If set, edit icons are rendered aside individual fields of content. Must be set only if the ->beUserLogin flag is set and set_no_cache() must be called as well.
	var $sys_language_uid=0;			// Site language, 0 (zero) is default, int+ is uid pointing to a sys_language record.

		// RENDERING data 
	var $applicationData=Array();		//	 'Global' Storage for various applications. Keys should be 'tx_'.extKey for extensions.
	var $register=Array();				
	var $registerStack=Array();			// Stack used for storing array and retrieving register arrays (see LOAD_REGISTER and CLEAR_REGISTER)
	var $cObjectDepthCounter = 50;		// Checking that the function is not called eternally. This is done by interrupting at a depth of 50
	var $recordRegister = Array();		// used by cObj->RECORDS and cObj->CONTENT to ensure the a records is NOT rendered twice through it!
	var $currentRecord = '';			// This is set to the [table]:[uid] of the latest record rendered. Note that class tslib_cObj has an equal value, but that is pointing to the record delivered in the $data-array of the tslib_cObj instance, if the cObjects CONTENT or RECORD created that instance
	var $accessKey =array();			// Used by class tslib_menu to keep track of access-keys.
	var $imagesOnPage=array();			// Numerical array where image filenames are added if they are referenced in the rendered document. This includes only Typo3 generated/inserted images.
	var $lastImageInfo=array();			// Is set in tslib_cObj->cImage() function to the info-array of the most recent rendered image. The information is used in tslib_cObj->IMGTEXT
	var $uniqueCounter=0;				// Used to generate page-unique keys. Point is that uniqid() functions is very slow, so a unikey key is made based on this, see function uniqueHash()
	var $uniqueString='';
	var $indexedDocTitle='';			// This value will be used as the title for the page in the indexer (if indexing happens)
	var $altPageTitle='';				// Alternative page title (normally the title of the page record). Can be set from applications you make.
	var $pEncAllowedParamNames=array();	// An array that holds parameter names (keys) of GET parameters which MAY be MD5/base64 encoded with simulate_static_documents method.

		// Page content render object
	var $cObj ='';						// is instantiated object of tslib_cObj
	
		// CONTENT accumulation
	var $content='';					// All page content is accumulated in this variable. See pagegen.php
	
		// GENERAL
	var $clientInfo='';				// Set to the browser: net / msie if 4+ browsers
	var $scriptParseTime=0;
	var $TCAloaded = 0;			// Set ONLY if the full TCA is loaded
	
		// LANG:
	var $lang='';
	var $langSplitIndex=0;
	var $LL_labels_cache=array();
	var $LL_files_cache=array();
	
	



	";i:1;i:-1;}s:12:"content_size";i:10655;s:13:"content_lines";i:126;s:6:"atLine";i:176;}i:3;a:7:{s:6:"header";s:103:"function tslib_fe($TYPO3_CONF_VARS, $id, $type, $no_cache='', $cHash='', $jumpurl='',$MP='',$RDCT='')	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:5:{s:4:"text";s:317:"

Class constructor
Takes a number of GET/POST input variable as arguments and stores them internally.
The processing of these variables goes on later in this class.
Also sets internal clientInfo array (browser information) and a unique string (->uniqueString) for this script instance; A md5 hash of the microtime()
";s:5:"param";a:8:{i:0;a:2:{i:0;s:5:"array";i:1;s:78:"The global $TYPO3_CONF_VARS array. Will be set internally in ->TYPO3_CONF_VARS";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:35:"The value of t3lib_div::GPvar('id')";}i:2;a:2:{i:0;s:7:"integer";i:1;s:37:"The value of t3lib_div::GPvar('type')";}i:3;a:2:{i:0;s:7:"boolean";i:1;s:59:"The value of t3lib_div::GPvar('no_cache'), evaluated to 1/0";}i:4;a:2:{i:0;s:6:"string";i:1;s:38:"The value of t3lib_div::GPvar('cHash')";}i:5;a:2:{i:0;s:6:"string";i:1;s:40:"The value of t3lib_div::GPvar('jumpurl')";}i:6;a:2:{i:0;s:6:"string";i:1;s:35:"The value of t3lib_div::GPvar('MP')";}i:7;a:2:{i:0;s:6:"string";i:1;s:37:"The value of t3lib_div::GPvar('RDCT')";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:17:"@see index_ts.php";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:13:"index_ts.php ";}}}s:7:"content";a:2:{i:0;s:391:"			// Setting some variables:
		$this->id = $id;
		$this->type = $type;
		$this->no_cache = $no_cache ? 1 : 0;
		$this->cHash = $cHash;
		$this->jumpurl = $jumpurl;
		$this->MP = $TYPO3_CONF_VARS['FE']['enable_mount_pids']?$MP:'';
		$this->RDCT = $RDCT;
		$this->TYPO3_CONF_VARS = $TYPO3_CONF_VARS;
		$this->clientInfo = t3lib_div::clientInfo();
		$this->uniqueString=md5(microtime());
	}

	";i:1;i:0;}s:12:"content_size";i:391;s:13:"content_lines";i:13;s:6:"atLine";i:320;}i:5;a:7:{s:6:"header";s:27:"function connectToMySQL()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:114:"

Connect to MySQL
May exit after outputting an error message or some JavaScript redirecting to the install tool.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		if (@mysql_pconnect(TYPO3_db_host, TYPO3_db_username, TYPO3_db_password))	{
			if (!TYPO3_db)	{
				$this->printError('No database selected','Database Error');
					// Redirects to the Install Tool:
				echo '<script type="text/javascript">
						/*<![CDATA[*/
					document.location = "'.TYPO3_mainDir.'install/index.php?mode=123&step=1&password=joh316";
						/*]]>*/
			
[...]
 was not accepted when the connection to the database was attempted to be established!','Database Error');
			exit;
		}
	}

	";i:1;i:1;}s:12:"content_size";i:1013;s:13:"content_lines";i:29;s:6:"atLine";i:340;}i:7;a:7:{s:6:"header";s:25:"function sendRedirect()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:212:"

Looks up the value of $this->RDCT in the database and if it is found to be associated with a redirect URL then the redirection is carried out with a 'Location:' header
May exit after sending a location-header.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:446:"		$query='SELECT params FROM cache_md5params WHERE md5hash="'.addslashes($this->RDCT).'"';
		$res=mysql(TYPO3_db,$query);
		echo mysql_error();
		if ($row=mysql_fetch_assoc($res))	{
			$this->updateMD5paramsRecord($this->RDCT);
			header('Location: '.$row['params']);
			exit;
		}
	}
















		

	/********************************************
	 *
	 * Initializing, resolving page id
	 *
	 ********************************************/


	";i:1;i:0;}s:12:"content_size";i:446;s:13:"content_lines";i:34;s:6:"atLine";i:376;}i:9;a:8:{s:6:"header";s:23:"function initFEuser()	{";s:11:"parentClass";s:8:"tslib_fe";s:11:"sectionText";a:1:{i:0;s:31:"Initializing, resolving page id";}s:4:"cDat";a:3:{s:4:"text";s:40:"

Initializes the front-end login user.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		$this->fe_user = t3lib_div::makeInstance('tslib_feUserAuth');
			
		$this->fe_user->checkPid = $this->TYPO3_CONF_VARS['FE']['checkFeUserPid'];
		$this->fe_user->checkPid_value = implode(',',t3lib_div::intExplode(',',t3lib_div::GPvar('pid')));	// List of pid's acceptable

			// Check if a session is transferred:
		if (t3lib_div::GPvar('FE_SESSION_KEY'))	{
			$fe_sParts = 
[...]
C_TIME']).' WHERE uid='.intval($this->fe_user->user['uid']);
			$res=mysql(TYPO3_db,$query);
			echo mysql_error();
		}
	}

	";i:1;i:1;}s:12:"content_size";i:1437;s:13:"content_lines";i:34;s:6:"atLine";i:416;}i:11;a:7:{s:6:"header";s:38:"function checkAlternativeIdMethods()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:5:{s:4:"text";s:1098:"

Provides ways to bypass the '?id=[xxx]&type=[xx]' format, using either PATH_INFO or virtual HTML-documents (using Apache mod_rewrite)

Two options:
1) Apache mod_rewrite: Here a .htaccess file maps all .html-files to index.php and then we extract the id and type from the name of that HTML-file.
2) Use PATH_INFO (also Apache) to extract id and type from that var. Does not require any special modules compiled with apache.

Support for RewriteRule to generate   (simulateStaticDocuments)
With the mod_rewrite compiled into apache, put these lines into a .htaccess in this directory:
RewriteEngine On
RewriteRule   ^[^/]*\.html$  index.php
The url must end with '.html' and the format must comply with either of these:
1:      '[title].[id].[type].html'			- title is just for easy recognition in the logfile!; no practical use of the title for Typo3.
2:      '[id].[type].html'					- above, but title is omitted; no practical use of the title for Typo3.
3:      '[id].html'							- only id, type is set to the default, zero!
NOTE: In all case 'id' may be the uid-numer OR the page alias (if any)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:80:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&cHash=4ad9d7acb4";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:75:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&cHash=4ad9d7acb4 ";}}}s:7:"content";a:2:{i:0;s:507:"		IF (TYPO3_OS=='WIN')	return;

			// Redirect by mod_rewrite:
		if ($GLOBALS['HTTP_SERVER_VARS']['REDIRECT_URL'])	{		// If there has been a redirect this can happend either due to a CGI-script or because of reWrite rule.
			$uParts = parse_url($GLOBALS['HTTP_SERVER_VARS']['REQUEST_URI']);
			$requestFilename = trim(ereg_replace('.*\/','',$uParts['path']));		// This is the
[...]
unt-3];
				} else {
					$this->type = 0;
					$this->id= $parts[0];
				}
				$this->absRefPrefix_force=1;
#			}
		}
	}
	
	";i:1;i:1;}s:12:"content_size";i:1781;s:13:"content_lines";i:39;s:6:"atLine";i:471;}i:13;a:7:{s:6:"header";s:26:"function clear_preview()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:234:"

Clears the preview-flags, sets sim_exec_time to current time.
Hidden pages must be hidden as default, $GLOBALS['SIM_EXEC_TIME'] is set to $GLOBALS['EXEC_TIME'] in t3lib/config_default.inc. Alter it by adding or subtracting seconds.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:144:"		$this->showHiddenPage = 0;
		$this->showHiddenRecords = 0;
		$GLOBALS['SIM_EXEC_TIME'] = $GLOBALS['EXEC_TIME'];	
		$this->fePreview = 0;
	}

	";i:1;i:0;}s:12:"content_size";i:144;s:13:"content_lines";i:6;s:6:"atLine";i:517;}i:15;a:7:{s:6:"header";s:24:"function determineId()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:271:"

Determines the id and evaluates any preview settings
Basically this function is about determining whether a backend user is logged in, if he has read access to the page and if he's previewing the page. That all determines which id to show and how to initialize the id.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"			// Getting ARG-v values if some
		$this->setIDfromArgV();	
			
			// If there is a Backend login we are going to check for any preview settings:
		$GLOBALS['TT']->push('beUserLogin','');
		if ($this->beUserLogin)	{		
			$this->fePreview = $GLOBALS['BE_USER']->extGetFeAdminValue('preview');

				// If admin panel preview is enabled...
			if ($this->fePreview)	{
				$fe_u
[...]
tentPid=intval($this->id);	// Make sure it's an integer
		$this->type=intval($this->type);	// Make sure it's an integer
	}

	";i:1;i:1;}s:12:"content_size";i:2633;s:13:"content_lines";i:63;s:6:"atLine";i:530;}i:17;a:7:{s:6:"header";s:25:"function fetch_the_id()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:4:{s:4:"text";s:251:"

Get The Page ID
This gets the id of the page, checks if the page is in the domain and if the page is accessible
Sets variables such as $this->sys_page, $this->loginUser, $this->gr_list, $this->id, $this->type, $this->domainStartPage, $this->idParts
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"		$GLOBALS['TT']->push('fetch_the_id initialize/','');

			// Initialize the page-select functions. 
		$this->sys_page = t3lib_div::makeInstance('t3lib_pageSelect');
		$this->sys_page->init($this->showHiddenPage);

			// Sets ->loginUser and ->gr_list based on front-end user status.
		$this->fe_user->showHiddenRecords = $this->showHiddenRecords;		// This affects the hidden
[...]
s->set_no_cache();
		}
			// Init SYS_LASTCHANGED
		$this->register['SYS_LASTCHANGED'] = intval($this->page['tstamp']);
	}

	";i:1;i:1;}s:12:"content_size";i:4062;s:13:"content_lines";i:92;s:6:"atLine";i:602;}i:19;a:7:{s:6:"header";s:31:"function getPageAndRootline() {";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:4:{s:4:"text";s:532:"

Gets the page and rootline arrays based on the id, $this->id

If the id does not correspond to a proper page, the 'previous' valid page in the rootline is found
If the page is a shortcut (doktype=4), the ->id is loaded with that id

Whether or not the ->id is changed to the shortcut id or the previous id in rootline (eg if a page is hidden), the ->page-array and ->rootline is found and must also be valid.

Sets or manipulates internal variables such as: $this->id, $this->page, $this->rootLine, $this->MP, $this->pageNotFound
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"		$this->page = $this->sys_page->getPage($this->id);
		if (!count($this->page))	{
			// If no page, we try to find the page before in the rootLine.
			$this->pageNotFound=1;			// Page is 'not found' in case the id itself was not an accessible page. code 1
			$this->rootLine = $this->sys_page->getRootLine($this->id,$this->MP);
			if (count($this->rootLine))	{
				$c=count($
[...]
$this->sys_page->getPage($this->id);
				$this->rootLine = $this->sys_page->getRootLine($this->id,$this->MP);
			}
		}
	}
	
	";i:1;i:1;}s:12:"content_size";i:1877;s:13:"content_lines";i:49;s:6:"atLine";i:708;}i:21;a:7:{s:6:"header";s:73:"function getPageShortcut($SC,$mode,$thisUid,$itera=20,$pageLog=array())	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:6:{s:4:"text";s:20:"

Get page shortcut
";s:5:"param";a:5:{i:0;a:2:{i:0;s:7:"integer";i:1;s:55:"The value of the "shortcut" field from the pages record";}i:1;a:2:{i:0;s:7:"integer";i:1;s:120:"The shortcut mode: 1 and 2 will select either first subpage or random subpage; the default is the page pointed to by $SC";}i:2;a:2:{i:0;s:7:"integer";i:1;s:52:"The current page UID of the page which is a shortcut";}i:3;a:2:{i:0;s:7:"integer";i:1;s:174:"Safety feature which makes sure that the function is calling itself recursively max 20 times (since this function can find shortcuts to other shortcuts to other shortcuts...)";}i:4;a:2:{i:0;s:5:"array";i:1;s:132:"An array filled with previous page uids tested by the function - new page uids are evaluated against this to avoid going in circles.";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:65:"Returns the page record of the page that the shortcut pointed to.";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:25:"@see getPageAndRootline()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:21:"getPageAndRootline() ";}}}s:7:"content";a:2:{i:0;s:507:"		$idArray = t3lib_div::intExplode(',',$SC);
		switch($mode)	{
			case 1:
			case 2:
				$pageArray = $this->sys_page->getMenu($idArray[0]?$idArray[0]:$thisUid,'*','sorting','AND pages.doktype<199 AND pages.doktype!=6');
				$pO=0;
				if ($mode==2 && count($pageArray))	{	// random
					$this->make_seed();
					$randval = intval(rand(0,count($pageArray)-1));
					$pO=$rand
[...]
is->printError('Page shortcuts were looping in uids '.implode(',',$pageLog).'...!');
				exit;
			}
		}
		return $page;
	}

	";i:1;i:1;}s:12:"content_size";i:1022;s:13:"content_lines";i:38;s:6:"atLine";i:770;}i:23;a:7:{s:6:"header";s:43:"function checkRootlineForIncludeSection()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:4:{s:4:"text";s:52:"

Checks the current rootline for defined sections.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:0:"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"		$c=count($this->rootLine);
		$removeTheRestFlag=0;	
		for ($a=0;$a<$c;$a++)	{
			if (!$this->checkPagerecordForIncludeSection($this->rootLine[$a]))	{
				$removeTheRestFlag=1;
			}
			if ($this->rootLine[$a]['doktype']==6)	{
				if ($this->beUserLogin)	{	// If there is a backend user logged in, check if he has read access to the page:
					$query = 'SELECT uid FROM pages
[...]
a subsection was found and not accessible, code 2
				unset($this->rootLine[$a]);
			}
		}
		return $removeTheRestFlag;
	}

	";i:1;i:1;}s:12:"content_size";i:1044;s:13:"content_lines";i:24;s:6:"atLine";i:815;}i:25;a:7:{s:6:"header";s:34:"function checkEnableFields($row)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:195:"

Checks page record for enableFields
Returns true if enableFields does not disable the page record.
Takes notice of the ->showHiddenPage flag and uses SIM_EXEC_TIME for start/endtime evaluation
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:80:"The page record to evaluate (needs fields; hidden, starttime, endtime, fe_group)";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:28:"True, if record is viewable.";}}s:7:"content";a:2:{i:0;s:259:"		if ((!$row['hidden'] || $this->showHiddenPage)
			&& $row['starttime']<=$GLOBALS['SIM_EXEC_TIME'] 
			&& ($row['endtime']==0 || $row['endtime']>$GLOBALS['SIM_EXEC_TIME'])
			&& t3lib_div::inList($this->gr_list,$row['fe_group'])
		) {
			return 1;
		}
	}
	
	";i:1;i:0;}s:12:"content_size";i:259;s:13:"content_lines";i:9;s:6:"atLine";i:848;}i:27;a:7:{s:6:"header";s:49:"function checkPagerecordForIncludeSection($row)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:6:{s:4:"text";s:41:"

Checks page record for include section
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:98:"The page record to evaluate (needs fields;extendToSubpages + hidden, starttime, endtime, fe_group)";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:111:"Returns true if either extendToSubpages is not checked or if the enableFields does not disable the page record.";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:24:"@see checkEnableFields()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:20:"checkEnableFields() ";}}}s:7:"content";a:2:{i:0;s:86:"		return (!$row['extendToSubpages'] || $this->checkEnableFields($row)) ? 1 : 0;
	}
	
	";i:1;i:0;}s:12:"content_size";i:86;s:13:"content_lines";i:3;s:6:"atLine";i:866;}i:29;a:7:{s:6:"header";s:26:"function setIDfromArgV()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:4:{s:4:"text";s:251:"

This checks if there are ARGV-parameters in the QUERY_STRING and if so, those are used for the id
$this->id must be 'false' in order for any processing to happen in here
If an id/alias value is extracted from the QUERY_STRING it is set in $this->id
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:177:"		if (!$this->id)	{
			list($theAlias) = explode('&',t3lib_div::getIndpEnv('QUERY_STRING'));
			$theAlias = trim($theAlias);
			$this->id = $theAlias ? $theAlias : 0;
		}
	}
	
	";i:1;i:0;}s:12:"content_size";i:177;s:13:"content_lines";i:7;s:6:"atLine";i:878;}i:31;a:7:{s:6:"header";s:57:"function getPageAndRootlineWithDomain($domainStartPage)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:4:{s:4:"text";s:155:"

Gets ->page and ->rootline information based on ->id. ->id may change during this operation.
If not inside domain, then default to first page in domain.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:80:"Page uid of the page where the found domain record is (pid of the domain record)";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"		$this->getPageAndRootline();	

		// Checks if the $domain-startpage is in the rootLine. This is necessary so that references to page-id's from other domains are not possible.
		if ($domainStartPage && is_array($this->rootLine)) {
			reset ($this->rootLine);
			$idFound = 0;
			while(list($key,$val)=each($this->rootLine)) {
				if ($val['uid']==$domainStartPage)	{
					$i
[...]
 = $domainStartPage;
				$this->getPageAndRootline();		//re-get the page and rootline if the id was not found.
			}
		}
	}

	";i:1;i:1;}s:12:"content_size";i:664;s:13:"content_lines";i:20;s:6:"atLine";i:894;}i:33;a:7:{s:6:"header";s:41:"function findDomainRecord($recursive=0)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:4:{s:4:"text";s:48:"

Looking up a domain record based on HTTP_HOST
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"boolean";i:1;s:178:"If set, it looks "recursively" meaning that a domain like "123.456.typo3.com" would find a domain record like "typo3.com" if "123.456.typo3.com" or "456.typo3.com" did not exist.";}}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:66:"Returns the page id of the page where the domain record was found.";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:515:"		if ($recursive)	{
			$host = explode('.',t3lib_div::getIndpEnv('HTTP_HOST'));
			while(count($host))	{
				$pageUid = $this->sys_page->getDomainStartPage(implode('.',$host),t3lib_div::getIndpEnv('SCRIPT_NAME'),t3lib_div::getIndpEnv('REQUEST_URI'));	
				if ($pageUid)	return $pageUid; else array_shift($host);
			}
			return $pageUid;
		} else {
			return $this->sys_page->getDomainStartPage(t3lib_div::getIndpEnv('HTTP_HOST'),t3lib_div::getIndpEnv('SCRIPT_NAME'),t3lib_div::getIndpEnv('REQUEST_URI'));	
		}
	}

	";i:1;i:0;}s:12:"content_size";i:515;s:13:"content_lines";i:12;s:6:"atLine";i:922;}i:35;a:7:{s:6:"header";s:48:"function pageNotFoundHandler($code,$header='')	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:33:"

Page not found handler.
Exits.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"mixed";i:1;s:223:"Which type of handling; If a true PHP-boolean and TRUE then a ->printError message is outputted. If integer an error message with that number is shown. Otherwise the $code value is expected to be a "Location:" header value.";}i:1;a:2:{i:0;s:6:"string";i:1;s:61:"If set, this is passed directly to the PHP function, header()";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:22:"(The function exists!)";}}s:7:"content";a:2:{i:0;s:349:"		if ($header)	{header($header);}
		
		if (gettype($code)=='boolean' || !strcmp($code,1))	{
			$this->printError('The page did not exist or was inaccessible.');
			exit;
		} else if (t3lib_div::testInt($code))	{
			$this->printError('Error '.$code);
			exit;
		} else {
			header('Location: '.t3lib_div::locationHeaderUrl($code));
			exit;
		}
	}

	";i:1;i:0;}s:12:"content_size";i:349;s:13:"content_lines";i:14;s:6:"atLine";i:943;}i:37;a:7:{s:6:"header";s:29:"function checkAndSetAlias()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:4:{s:4:"text";s:184:"

Fetches the integer page id for a page alias.
Looks if ->id is not an integer and if so it will search for a page alias and if found the page uid of that page is stored in $this->id
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:151:"		if ($this->id && !t3lib_div::testInt($this->id))	{
			$aid = $this->sys_page->getPageIdFromAlias($this->id);
			if ($aid)	{$this->id=$aid;}
		}
	}

	";i:1;i:0;}s:12:"content_size";i:151;s:13:"content_lines";i:6;s:6:"atLine";i:965;}i:39;a:7:{s:6:"header";s:31:"function idPartsAnalyze($str)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:4:{s:4:"text";s:316:"

Analyzes the second part of a id-string (after the "+"), looking for B6 or M5 encoding and if found it will resolve it and restore the variables in global HTTP_GET_VARS (but NOT $_GET - yet)
If values for ->cHash, ->no_cache, ->jumpurl and ->MP is found, they are also loaded into the internal vars of this class.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:17:"String to analyze";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"		$GET_VARS='';
		switch(substr($str,0,2))	{
			case 'B6':
				$addParams=base64_decode(str_replace('_','=',str_replace('-','/',substr($str,2))));
				parse_str($addParams,$GET_VARS);
			break;
			case 'M5':
				$query='SELECT params FROM cache_md5params WHERE md5hash="'.addslashes(substr($str,2)).'"';
				$res=mysql(TYPO3_db,$query);
				$row=mysql_fetch_assoc($res);
				
[...]
**********************
	 *
	 * Template and caching related functions. 
	 *
	 *******************************************/

	";i:1;i:1;}s:12:"content_size";i:1287;s:13:"content_lines";i:49;s:6:"atLine";i:980;}i:41;a:8:{s:6:"header";s:26:"function makeCacheHash()	{";s:11:"parentClass";s:8:"tslib_fe";s:11:"sectionText";a:1:{i:0;s:39:"Template and caching related functions.";}s:4:"cDat";a:3:{s:4:"text";s:141:"

Calculates a hash string based on additional parameters in the url. This is used to cache pages with more parameters than just id and type
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:544:"		if ($this->cHash && is_array($GLOBALS['HTTP_GET_VARS']))	{
			$pA = $this->cHashParams(t3lib_div::implodeArrayForUrl('',$GLOBALS['HTTP_GET_VARS']));
			$this->cHash_array = $pA;
			$cHash_calc = t3lib_div::shortMD5(serialize($this->cHash_array));
			if ($cHash_calc!=$this->cHash)	{
				$this->set_no_cache();
				$GLOBALS['TT']->setTSlogMessage('The incoming cHash "'.$this->cHash.'" and calculated cHash "'.$cHash_calc.'" did not match, so caching was disabled. The fieldlist used was "'.implode(array_keys($pA),',').'"',2);
			}
		}	
	}

	";i:1;i:0;}s:12:"content_size";i:544;s:13:"content_lines";i:11;s:6:"atLine";i:1035;}i:43;a:7:{s:6:"header";s:39:"function cHashParams($addQueryParams) {";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:6:{s:4:"text";s:119:"

Splits the input query-parameters into an array with certain parameters filtered out.
Used to create the cHash value
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:36:"Query-parameters: "&xxx=yyy&zzz=uuu"";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:191:"Array with key/value pairs of query-parameters WITHOUT a certain list of variable names (like id, type, no_cache etc) and WITH a variable, encryptionKey, specific for this server/installation";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:44:"@see makeCacheHash(), tslib_cObj::typoLink()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:39:"makeCacheHash(), tslib_cObj::typoLink()";}}}s:7:"content";a:2:{i:0;s:432:"		$params = explode('&',substr($addQueryParams,1));	// Splitting parameters up
		$pA=array();
		while(list(,$theP)=each($params))	{
			$pKV = explode('=',$theP);	// SPlitting single param by '=' sign
			if (!t3lib_div::inList('id,type,no_cache,cHash,MP,ftu',$pKV[0]))	{
				$pA[$pKV[0]]=(string)rawurldecode($pKV[1]);
			}
		}
		$pA['encryptionKey']=$this->TYPO3_CONF_VARS['SYS']['encryptionKey'];
		ksort($pA);
		return $pA;
	}
	
	";i:1;i:0;}s:12:"content_size";i:432;s:13:"content_lines";i:13;s:6:"atLine";i:1056;}i:45;a:7:{s:6:"header";s:25:"function initTemplate()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:44:"

Initialize the TypoScript template parser
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:142:"		$this->tmpl = t3lib_div::makeInstance('t3lib_TStemplate');
		$this->tmpl->init();
		$this->tmpl->tt_track= $this->beUserLogin ? 1 : 0;
	}

	";i:1;i:0;}s:12:"content_size";i:142;s:13:"content_lines";i:5;s:6:"atLine";i:1075;}i:47;a:7:{s:6:"header";s:25:"function getFromCache()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:108:"

See if page is in cache and get it if so
Stores the page content in $this->content if something is found.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		$this->tmpl->getCurrentPageData();
		$cc=Array();
		if (is_array($this->tmpl->currentPageData))	{
				// BE CAREFULL to change the content of the cc-array. This array is serialized and an md5-hash based on this is used for caching the page. 
				// If this hash is not the same in here in this section and after page-generation the page will not be properly cached!
		
			$
[...]
H:i', $row['tstamp']).'. Expires '.Date('d/m Y H:i', $row['expires']).' -->';
				}
			}
		$GLOBALS['TT']->pull();
		}	
	}

	";i:1;i:1;}s:12:"content_size";i:2226;s:13:"content_lines";i:45;s:6:"atLine";i:1087;}i:49;a:7:{s:6:"header";s:20:"function getHash()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:6:{s:4:"text";s:202:"

Calculates the cache-hash
This hash is unique to the template, the variables ->id, ->type, ->gr_list (list of groups), ->MP (Mount Points) and cHash array
Used to get and later store the cached data.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:78:"MD5 hash of $this->hash_base which is a serialized version of there variables.";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:19:"@see getFromCache()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:15:"getFromCache() ";}}}s:7:"content";a:2:{i:0;s:258:"		$this->hash_base = serialize(
			array(
				'all'=>$this->all,
				'id'=>intval($this->id),
				'type'=>intval($this->type),
				'gr_list'=>$this->gr_list,
				'MP'=>$this->MP,
				'cHash'=>$this->cHash_array
			)
		);
		return md5($this->hash_base);
	}

	";i:1;i:0;}s:12:"content_size";i:258;s:13:"content_lines";i:13;s:6:"atLine";i:1142;}i:51;a:7:{s:6:"header";s:27:"function getConfigArray()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:60:"

Checks if config-array exists already but if not, gets it
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		if (!is_array($this->config) || is_array($this->config['INTincScript']) || $this->forceTemplateParsing)	{	// If config is not set by the cache (which would be a major mistake somewhere) OR if INTincScripts-include-scripts has been registered, then we must parse the template in order to get it 
				$GLOBALS['TT']->push('Parse template','');
			$this->tmpl->forceTemplatePa
[...]
r initialization and data processing 
	 * (jumpurl/submission of forms)
	 *
	 *******************************************/

	";i:1;i:1;}s:12:"content_size";i:4673;s:13:"content_lines";i:101;s:6:"atLine";i:1161;}i:53;a:8:{s:6:"header";s:33:"function getCompressedTCarray()	{";s:11:"parentClass";s:8:"tslib_fe";s:11:"sectionText";a:2:{i:0;s:42:"Further initialization and data processing";i:1;s:29:"(jumpurl/submission of forms)";}s:4:"cDat";a:5:{s:4:"text";s:268:"

Get the compressed $TCA array for use in the front-end
A compressed $TCA array holds only the ctrl- and feInterface-part for each table. But the column-definitions are omitted in order to save some memory and be more efficient.
Operates on the global variable, $TCA
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:17:"@see includeTCA()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:13:"includeTCA() ";}}}s:7:"content";a:2:{i:0;s:507:"		global $TCA;
		
		$GLOBALS['TT']->push('Get Compressed TC array');
		if (!$this->TCAloaded)	{
			$tempHash = md5('tables.php:'.
				filemtime(TYPO3_extTableDef_script ? PATH_typo3conf.TYPO3_extTableDef_script : PATH_t3lib.'stddb/tables.php').
				(TYPO3_extTableDef_script?filemtime(PATH_typo3conf.TYPO3_extTableDef_script):'').
				($GLOBALS['TYPO3_LOADED_EXT']['_CACHEFIL
[...]
CA=$newTc;
				$this->sys_page->storeHash($tempHash, serialize($newTc), 'SHORT TC');
			}
		}
		$GLOBALS['TT']->pull();
	}

	";i:1;i:1;}s:12:"content_size";i:896;s:13:"content_lines";i:25;s:6:"atLine";i:1271;}i:55;a:7:{s:6:"header";s:35:"function includeTCA($TCAloaded=1)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:5:{s:4:"text";s:516:"

Includes full TCA.
Normally in the frontend only a part of the global $TCA array is loaded, for instance the "ctrL" part. Thus it doesn't take up too much memory.
If you need the FULL TCA available for some reason (like plugins using it) you should call this function which will include the FULL TCA.
Global vars $TCA, $PAGES_TYPES, $LANG_GENERAL_LABELS can/will be affected.
The flag $this->TCAloaded will make sure that such an inclusion happens only once since; If $this->TCAloaded is set, nothing is included.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"boolean";i:1;s:389:"Probably, keep hands of this value. Just don't set it. (This may affect the first-ever time this function is called since if you set it to zero/false any subsequent call will still trigger the inclusion; In other words, this value will be set in $this->TCAloaded after inclusion and therefore if its false, another inclusion will be possible on the next call. See ->getCompressedTCarray())";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:27:"@see getCompressedTCarray()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:23:"getCompressedTCarray() ";}}}s:7:"content";a:2:{i:0;s:600:"		global $TCA, $PAGES_TYPES, $LANG_GENERAL_LABELS;
		
		if (!$this->TCAloaded)	{
			$TCA = Array();
			include (TYPO3_tables_script ? PATH_typo3conf.TYPO3_tables_script : PATH_t3lib.'stddb/tables.php');
				// Extension additions
			if ($GLOBALS['TYPO3_LOADED_EXT']['_CACHEFILE'])	{
				include(PATH_typo3conf.$GLOBALS['TYPO3_LOADED_EXT']['_CACHEFILE'].'_ext_tables.php');
			} else {
				include(PATH_t3lib.'stddb/load_ext_tables.php');
			}	
				// ext-script
			if (TYPO3_extTableDef_script)	{
				include (PATH_typo3conf.TYPO3_extTableDef_script);
			}
			$this->TCAloaded = $TCAloaded;
		}
	}

	";i:1;i:0;}s:12:"content_size";i:600;s:13:"content_lines";i:19;s:6:"atLine";i:1308;}i:57;a:7:{s:6:"header";s:28:"function settingLanguage()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:4:{s:4:"text";s:232:"

Setting the language key that'll be used by the current page.
In this function it should be checked, 1) that this language exists, 2) that a page_overlay_record exists, .. and if not the default language, 0 (zero), should be set.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"		$this->sys_language_uid = intval($this->config['config']['sys_language_uid']);
		$olRec = $this->sys_page->getPageOverlay($this->id,$this->sys_language_uid);
		if (!count($olRec))	{
			$this->sys_language_uid=0;
		} else {
			$this->page = $this->sys_page->getPageOverlay($this->page,$this->sys_language_uid);
		}
		$this->sys_page->sys_language_uid = $this->sys_language_u
[...]
)=each($this->rootLine))	{
				$this->rootLine[$rLk] = $this->sys_page->getPageOverlay($this->rootLine[$rLk]);
			}
		}
	}

	";i:1;i:1;}s:12:"content_size";i:943;s:13:"content_lines";i:24;s:6:"atLine";i:1335;}i:59;a:7:{s:6:"header";s:32:"function checkDataSubmission()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:63:"

Checks if any email-submissions or submission via the fe_tce
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:121:"'email' if a formmail has been send, 'fe_tce' if front-end data submission (like forums, guestbooks) is send. '' if none.";}}s:7:"content";a:2:{i:0;s:507:"		if ($GLOBALS['HTTP_POST_VARS']['formtype_db'] || $GLOBALS['HTTP_POST_VARS']['formtype_mail'])	{
			$refInfo=parse_url(t3lib_div::getIndpEnv('HTTP_REFERER'));
			if (t3lib_div::getIndpEnv('TYPO3_HOST_ONLY')==$refInfo['host'] || $this->TYPO3_CONF_VARS['SYS']['doNotCheckReferer'])	{
				if ($this->locDataCheck($GLOBALS['HTTP_POST_VARS']['locationData']))	{
					$ret = '';
	
[...]
Message('"Check Data Submission": HTTP_HOST and REFERER HOST did not match when processing submitted formdata!',3);
		}
	}

	";i:1;i:1;}s:12:"content_size";i:861;s:13:"content_lines";i:17;s:6:"atLine";i:1365;}i:61;a:7:{s:6:"header";s:19:"function fe_tce()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:5:{s:4:"text";s:22:"

Processes user data
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:16:"@see tslib_feTCE";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=342&cHash=fdf55adb3b";}s:11:"other_index";a:2:{s:4:"@see";a:1:{i:0;s:12:"tslib_feTCE ";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=342&cHash=fdf55adb3b ";}}}s:7:"content";a:2:{i:0;s:165:"		$fe_tce = t3lib_div::makeInstance('tslib_feTCE');
		$fe_tce->start($GLOBALS['HTTP_POST_VARS']['data'],$this->config['FEData.']);
		$fe_tce->includeScripts();
	}

	";i:1;i:0;}s:12:"content_size";i:165;s:13:"content_lines";i:5;s:6:"atLine";i:1390;}i:63;a:7:{s:6:"header";s:38:"function locDataCheck($locationData)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:6:{s:4:"text";s:55:"

Checks if a formmail submission can be sent as email
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:57:"The input from $GLOBALS['HTTP_POST_VARS']['locationData']";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:26:"@see checkDataSubmission()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:22:"checkDataSubmission() ";}}}s:7:"content";a:2:{i:0;s:507:"		$locData = explode(':',$locationData);
		if (!$locData[1] ||  $this->sys_page->checkRecord($locData[1],$locData[2],1))	{
			if (count($this->sys_page->getPage($locData[0])))	{	// $locData[1] -check means that a record is checked only if the locationData has a value for a record else than the page.
				return 1;
			} else $GLOBALS['TT']->setTSlogMessage('LocationData Erro
[...]
T']->setTSlogMessage('LocationData Error: Location data ('.$locationData.') record pointed to was not accessible.',2);
	}
	
	";i:1;i:1;}s:12:"content_size";i:605;s:13:"content_lines";i:8;s:6:"atLine";i:1404;}i:65;a:7:{s:6:"header";s:25:"function sendFormmail()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:6:{s:4:"text";s:53:"

Sends the emails from the formmail content object.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:26:"@see checkDataSubmission()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:22:"checkDataSubmission() ";}}}s:7:"content";a:2:{i:0;s:348:"		$formmail = t3lib_div::makeInstance('t3lib_formmail');

		$EMAIL_VARS = $GLOBALS['HTTP_POST_VARS'];
		unset($EMAIL_VARS['locationData']);
		unset($EMAIL_VARS['formtype_mail']);

		$formmail->start($EMAIL_VARS);
		$formmail->sendtheMail();
		$GLOBALS['TT']->setTSlogMessage('"Formmail" invoked, sending mail to '.$EMAIL_VARS['recipient'],0);
	}

	";i:1;i:0;}s:12:"content_size";i:348;s:13:"content_lines";i:11;s:6:"atLine";i:1420;}i:67;a:7:{s:6:"header";s:25:"function checkJumpUrl()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:219:"

Checks if jumpurl is set.
This function also takes care of jumpurl utilized by the Direct Mail module (ext: direct_mail) which may set an integer value for jumpurl which refers to a link in a certain mail-record, mid
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		global $TCA;
		
		$mid = t3lib_div::GPvar('mid');		// mail id, if direct mail link
		$rid = t3lib_div::GPvar('rid');		// recipient id, if direct mail link
		if ((strcmp($this->jumpurl,'') && ((t3lib_div::getIndpEnv('HTTP_REFERER') || $this->TYPO3_CONF_VARS['SYS']['doNotCheckReferer']) || $mid)) || ($this->jumpurl = $this->sys_page->getExtURL($this->page,$this->config['co
[...]
.intval($url_id).')';
					$temp_res = mysql(TYPO3_db,$temp_query);
				}
			}
		} else {
			unset($this->jumpurl);
		}
	}

	";i:1;i:1;}s:12:"content_size";i:3059;s:13:"content_lines";i:65;s:6:"atLine";i:1438;}i:69;a:7:{s:6:"header";s:20:"function jumpUrl()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:138:"

Sends a header 'Location' to jumpurl, if jumpurl is set.
Will exit if a location header is sent (for instance if JumpUrl was triggered)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		if ($this->jumpurl)	{
			if (t3lib_div::GPvar('juSecure'))	{
				$hArr = array(	
					$this->jumpurl,
					t3lib_div::GPvar('locationData'),
					$this->TYPO3_CONF_VARS['SYS']['encryptionKey']
				);
				$calcJuHash=t3lib_div::shortMD5(serialize($hArr));
				$locationData = t3lib_div::GPvar('locationData');
				$juHash = t3lib_div::GPvar('juHash');
				if ($juHash == $ca
[...]
']?'':'?').$params;	// Add the session parameter ...
				}
				Header('Location: '.$this->jumpurl);
				exit;
			}
		}
	}
	
	";i:1;i:1;}s:12:"content_size";i:1647;s:13:"content_lines";i:36;s:6:"atLine";i:1510;}i:71;a:7:{s:6:"header";s:26:"function setUrlIdToken()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:4:{s:4:"text";s:72:"

Sets the URL_ID_TOKEN in the internal var, $this->getMethodUrlIdToken
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:340:"		if ($this->config['config']['ftu'])	{
			$this->getMethodUrlIdToken = $this->TYPO3_CONF_VARS['FE']['get_url_id_token'];
		} else {
			$this->getMethodUrlIdToken = '';
		}
	}
























	/********************************************
	 *
	 * Page generation; cache handling
	 *
	 *******************************************/

	";i:1;i:0;}s:12:"content_size";i:340;s:13:"content_lines";i:36;s:6:"atLine";i:1553;}i:73;a:8:{s:6:"header";s:27:"function isGeneratePage()	{";s:11:"parentClass";s:8:"tslib_fe";s:11:"sectionText";a:1:{i:0;s:31:"Page generation; cache handling";}s:4:"cDat";a:3:{s:4:"text";s:114:"

Returns true if the page should be generated
That is if jumpurl is not set and the cacheContentFlag is not set.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:61:"		return (!$this->cacheContentFlag && !$this->jumpurl);
	}

	";i:1;i:0;}s:12:"content_size";i:61;s:13:"content_lines";i:3;s:6:"atLine";i:1596;}i:75;a:7:{s:6:"header";s:33:"function tempPageCacheContent()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:169:"

Temp cache content
The temporary cache will expire after a few seconds (typ. 30) or will be cleared by the rendered page, which will also clear and rewrite the cache.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		$this->tempContent=0;
		if (!$this->no_cache)	{
			$seconds=30;
			$stdMsg = '
			<html>
				<head>
					<title>'.htmlspecialchars($this->tmpl->printTitle($this->page['title'])).'</title>
					<meta http-equiv=Refresh Content="3; Url='.htmlspecialchars(t3lib_div::getIndpEnv('REQUEST_URI')).'" />
				</head>
				<body bgcolor="white">
					<font size="1" face="VERDANA,ARI
[...]
LS['EXEC_TIME']+$seconds);
			$this->tempContent=1;		// This flag shows that temporary content is put in the cache
		}
	}
	
	";i:1;i:1;}s:12:"content_size";i:943;s:13:"content_lines";i:25;s:6:"atLine";i:1606;}i:77;a:7:{s:6:"header";s:33:"function realPageCacheContent()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:38:"

Set cache content to $this->content
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		$cache_timeout = $this->page['cache_timeout'] ? $this->page['cache_timeout'] : ($this->cacheTimeOutDefault ? $this->cacheTimeOutDefault : 60*60*24);		// seconds until a cached page is too old
		$timeOutTime = $GLOBALS['EXEC_TIME']+$cache_timeout;
		if ($this->config['config']['cache_clearAtMidnight'])	{
			$midnightTime = mktime (0,0,0,date('m',$timeOutTime),date('d',$ti
[...]
$this->config['hash_base'] = $this->hash_base;
		$this->setPageCacheContent($this->content,$this->config,$timeOutTime);
	}

	";i:1;i:1;}s:12:"content_size";i:741;s:13:"content_lines";i:12;s:6:"atLine";i:1637;}i:79;a:7:{s:6:"header";s:40:"function setPageCacheContent($c,$d,$t)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:5:{s:4:"text";s:21:"

Sets cache content
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:57:"The content to store in the HTML field of the cache table";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:50:"The additional cache_data array, fx. $this->config";}i:2;a:2:{i:0;s:7:"integer";i:1;s:9:"Timestamp";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:28:"The content of mysql_error()";}s:5:"other";a:1:{i:0;s:51:"@see realPageCacheContent(), tempPageCacheContent()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:46:"realPageCacheContent(), tempPageCacheContent()";}}}s:7:"content";a:2:{i:0;s:397:"		$this->clearPageCacheContent();
		$res = mysql (TYPO3_db, 'INSERT INTO cache_pages (hash, page_id, HTML, cache_data, expires, tstamp'.($this->page_cache_reg1?', reg1':'').') 
								VALUES ("'.$this->newHash.'","'.$this->id.'","'.addSlashes($c).'","'.addSlashes(serialize($d)).'","'.$t.'",'.time().($this->page_cache_reg1?','.intval($this->page_cache_reg1):'').')');
		echo mysql_error();
	}

	";i:1;i:0;}s:12:"content_size";i:397;s:13:"content_lines";i:6;s:6:"atLine";i:1659;}i:81;a:7:{s:6:"header";s:34:"function clearPageCacheContent()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:44:"

Clears cache content (for $this->newHash)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:91:"		$res = mysql (TYPO3_db, 'DELETE FROM cache_pages WHERE hash="'.$this->newHash.'"');
	}

	";i:1;i:0;}s:12:"content_size";i:91;s:13:"content_lines";i:3;s:6:"atLine";i:1671;}i:83;a:7:{s:6:"header";s:50:"function clearPageCacheContent_pidList($pidList)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:46:"

Clears cache content for a list of page ids
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:124:"A list of INTEGER numbers which points to page uids for which to clear entries in the cache_pages table (page content cache)";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:91:"		$res = mysql (TYPO3_db, 'DELETE FROM cache_pages WHERE page_id IN ('.$pidList.')');
	}

	";i:1;i:0;}s:12:"content_size";i:91;s:13:"content_lines";i:3;s:6:"atLine";i:1681;}i:85;a:7:{s:6:"header";s:30:"function setSysLastChanged()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:5:{s:4:"text";s:246:"

Sets sys last changed
Setting the SYS_LASTCHANGED value in the pagerecord: This value will thus be set to the highest tstamp of records rendered on the page. This includes all records with no regard to hidden records, userprotection and so on.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:30:"@see tslib_cObj::lastChanged()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:26:"tslib_cObj::lastChanged() ";}}}s:7:"content";a:2:{i:0;s:418:"		if ($this->page['SYS_LASTCHANGED'] < intval($this->register['SYS_LASTCHANGED']))	{
			$query = 'UPDATE pages SET SYS_LASTCHANGED='.intval($this->register['SYS_LASTCHANGED']).' WHERE uid="'.$this->id.'"';
			$res = mysql (TYPO3_db, $query);
		}
	}




















	/********************************************
	 *
	 * Page generation; rendering and inclusion
	 *
	 *******************************************/

	";i:1;i:0;}s:12:"content_size";i:418;s:13:"content_lines";i:31;s:6:"atLine";i:1692;}i:87;a:8:{s:6:"header";s:39:"function generatePage_preProcessing()	{";s:11:"parentClass";s:8:"tslib_fe";s:11:"sectionText";a:1:{i:0;s:40:"Page generation; rendering and inclusion";}s:4:"cDat";a:3:{s:4:"text";s:62:"

Does some processing BEFORE the pagegen script is included.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		ksort($this->all);
			// Same codeline as in getFromCache(). BUT $this->all has been set in the meantime, so we can't just skip this line and let it be set above! Keep this line!
		$this->newHash = $this->getHash();
	
			// Here we put some temporary stuff in the cache in order to let the first hit generate the page. The temporary cache will expire after a few seconds (t
[...]
l($this->config['config']['cache_period']);
	
			// page is generated
		$this->no_cacheBeforePageGen = $this->no_cache;
	}

	";i:1;i:1;}s:12:"content_size";i:1436;s:13:"content_lines";i:29;s:6:"atLine";i:1729;}i:89;a:7:{s:6:"header";s:37:"function generatePage_whichScript()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:165:"

Determines to include custom or pagegen.php script
returns script-filename if a TypoScript (config) script is defined and should be include instead of pagegen.php
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:68:"The relative filepath of "config.pageGenScript" if found and allowed";}}s:7:"content";a:2:{i:0;s:192:"		if (!$this->TYPO3_CONF_VARS['FE']['noPHPscriptInclude'] && $this->config['config']['pageGenScript'])	{
			return $this->tmpl->getFileName($this->config['config']['pageGenScript']);
		}
	}

	";i:1;i:0;}s:12:"content_size";i:192;s:13:"content_lines";i:5;s:6:"atLine";i:1765;}i:91;a:7:{s:6:"header";s:40:"function generatePage_postProcessing()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:216:"

Does some processing AFTER the pagegen script is included.
This includes calling tidy (if configured), XHTML cleaning (if configured), caching the page, indexing the page (if configured) and setting sysLastChanged
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"			// This is to ensure, that the page is NOT cached if the no_cache parameter was set before the page was generated. This is a safety precaution, as it could have been unset by some script.
		if ($this->no_cacheBeforePageGen) $this->set_no_cache();	
	
			// Tidy up the code, if flag...
		if ($this->TYPO3_CONF_VARS['FE']['tidy_option'] == 'all')		{
			$GLOBALS['TT']->push(
[...]
o, page was set to "no_cache" and so cannot be indexed.');
			$GLOBALS['TT']->pull();
		}
		$this->setSysLastChanged();
	}

	";i:1;i:1;}s:12:"content_size";i:2291;s:13:"content_lines";i:52;s:6:"atLine";i:1777;}i:93;a:7:{s:6:"header";s:25:"function INTincScript()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:35:"

Processes the INTinclude-scripts
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		$GLOBALS['TT']->push('Split content');
		$INTiS_splitC = explode('<!--INT_SCRIPT.',$this->content);			// Splits content with the key.
		$this->content='';
		$GLOBALS['TT']->setTSlogMessage('Parts: '.count($INTiS_splitC));
		$GLOBALS['TT']->pull();

			// Depreciated stuff:
		$this->additionalHeaderData = $this->config['INTincScript_ext']['additionalHeaderData'];
		$this-
[...]
Script_ext']['divKey'].'-->', $this->divSection, $this->content);
		$this->setAbsRefPrefix();
		$GLOBALS['TT']->pull();
	}

	";i:1;i:1;}s:12:"content_size";i:2271;s:13:"content_lines";i:51;s:6:"atLine";i:1835;}i:95;a:7:{s:6:"header";s:36:"function INTincScript_loadJSCode()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:4:{s:4:"text";s:45:"

Loads the JavaScript code for INTincScript
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"		if ($this->JSImgCode)	{	// If any images added, then add them to the javascript section
			$this->additionalHeaderData['JSImgCode']='
<script type="text/javascript">
	/*<![CDATA[*/
<!--
if (version == "n3") {
'.trim($this->JSImgCode).'
}
// -->
	/*]]>*/
</script>';
		}
		if ($this->JSCode || count($this->additionalJavaScript))	{	// Add javascript
			$this->additionalHead
[...]
'
<style type="text/css">
	/*<![CDATA[*/
<!--
'.implode($this->additionalCSS,chr(10)).'
// -->
	/*]]>*/
</style>';
		}
	}
	
	";i:1;i:1;}s:12:"content_size";i:770;s:13:"content_lines";i:35;s:6:"atLine";i:1893;}i:97;a:7:{s:6:"header";s:27:"function isINTincScript()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:55:"

Determines if there are any INTincScripts to include
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:51:"Returns true if scripts are found (and not jumpurl)";}}s:7:"content";a:2:{i:0;s:76:"		return	(is_array($this->config['INTincScript']) && !$this->jumpurl);
	}

	";i:1;i:0;}s:12:"content_size";i:76;s:13:"content_lines";i:3;s:6:"atLine";i:1934;}i:99;a:7:{s:6:"header";s:30:"function isSearchIndexPage()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:42:"

Returns true if page should be indexed.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:119:"		return t3lib_extMgm::isLoaded('indexed_search') && $this->config['config']['index_enable'] && !$this->no_cache;
	}

	";i:1;i:0;}s:12:"content_size";i:119;s:13:"content_lines";i:3;s:6:"atLine";i:1943;}i:101;a:7:{s:6:"header";s:29:"function doXHTML_cleaning()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:48:"

Returns true if page XHTML clean flag is set.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:250:"		return $this->config['config']['xhtml_cleaning'];
	}











	
	
	
	
	
		
	/********************************************
	 *
	 * Finished off; outputting, storing session data, statistics...
	 *
	 *******************************************/
	
	";i:1;i:0;}s:12:"content_size";i:250;s:13:"content_lines";i:25;s:6:"atLine";i:1952;}i:103;a:8:{s:6:"header";s:25:"function isOutputting()	{";s:11:"parentClass";s:8:"tslib_fe";s:11:"sectionText";a:1:{i:0;s:61:"Finished off; outputting, storing session data, statistics...";}s:4:"cDat";a:3:{s:4:"text";s:100:"

Determines if content should be outputted.
Outputting content is done only if jumpurl is NOT set.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:42:"Returns true if $this->jumpurl is not set.";}}s:7:"content";a:2:{i:0;s:33:"		return (!$this->jumpurl);
	}

	";i:1;i:0;}s:12:"content_size";i:33;s:13:"content_lines";i:3;s:6:"atLine";i:1984;}i:105;a:7:{s:6:"header";s:26:"function processOutput()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:319:"

Processes the output before it's actually outputted. Sends headers also.
This includes substituting the USERNAME comment, getMethodUrlIdToken, sending additional headers (as defined in the TypoScript "config.additionalheaders" object), tidy'ing content, XHTML cleaning content (if configured)
Works on $this->content
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"			// Substitutes username mark with the username
		if ($this->fe_user->user['uid'])	{		
			$token = trim($this->config['config']['USERNAME_substToken']);
			$this->content = str_replace($token ? $token : '<!--###USERNAME###-->',$this->fe_user->user['username'],$this->content);
		}
			// Substitutes get_URL_ID in case of GET-fallback
		if ($this->getMethodUrlIdToken)	{
			
[...]
'target="_self"',$this->content);
			$this->content = str_replace('target=_top','target="_self"',$this->content);
		}*/
	}

	";i:1;i:1;}s:12:"content_size";i:1623;s:13:"content_lines";i:39;s:6:"atLine";i:1995;}i:107;a:7:{s:6:"header";s:27:"function isEXTincScript()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:5:{s:4:"text";s:53:"

Determines if any EXTincScripts should be included
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:81:"True, if external php scripts should be included (set by PHP_SCRIPT_EXT cObjects)";}s:5:"other";a:1:{i:0;s:27:"@see tslib_cObj::PHP_SCRIPT";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:23:"tslib_cObj::PHP_SCRIPT ";}}}s:7:"content";a:2:{i:0;s:55:"		return is_array($this->config['EXTincScript']);
	}

	";i:1;i:0;}s:12:"content_size";i:55;s:13:"content_lines";i:3;s:6:"atLine";i:2041;}i:109;a:7:{s:6:"header";s:29:"function storeSessionData()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:45:"

Stores session data for the front end user
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:43:"		$this->fe_user->storeSessionData();
	}

	";i:1;i:0;}s:12:"content_size";i:43;s:13:"content_lines";i:3;s:6:"atLine";i:2050;}i:111;a:7:{s:6:"header";s:25:"function setParseTime()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:4:{s:4:"text";s:34:"

Sets the parsetime of the page.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:448:"			// Compensates for the time consumed with Back end user initialization.
		$this->scriptParseTime = $GLOBALS['TT']->convertMicrotime($GLOBALS['TYPO3_MISC']['microtime_end'])
								- $GLOBALS['TT']->convertMicrotime($GLOBALS['TYPO3_MISC']['microtime_start']) 
								- ($GLOBALS['TT']->convertMicrotime($GLOBALS['TYPO3_MISC']['microtime_BE_USER_end'])-$GLOBALS['TT']->convertMicrotime($GLOBALS['TYPO3_MISC']['microtime_BE_USER_start']));
	}
	
	";i:1;i:0;}s:12:"content_size";i:448;s:13:"content_lines";i:6;s:6:"atLine";i:2060;}i:113;a:7:{s:6:"header";s:23:"function statistics()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:23:"

Saves hit statistics
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		if ($this->config['config']['stat'] &&
				(!strcmp('',$this->config['config']['stat_typeNumList']) || t3lib_div::inList(str_replace(' ','',$this->config['config']['stat_typeNumList']), $this->type)) &&
				(!$this->config['config']['stat_excludeBEuserHits'] || !$this->beUserLogin) &&
				(!$this->config['config']['stat_excludeIPList'] || !t3lib_div::inList(str_replace('
[...]
e('Writing to logfile: Error - logFile did not exist or OS is Windows!',3);
					}
				}
			$GLOBALS['TT']->pull();
		}
	}

	";i:1;i:1;}s:12:"content_size";i:4344;s:13:"content_lines";i:71;s:6:"atLine";i:2072;}i:115;a:7:{s:6:"header";s:24:"function previewInfo()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:24:"

Outputs preview info.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:448:"		if ($this->fePreview)	{
				$stdMsg = '
				<br />
				<div align="center">
					<table border="3" bordercolor="black" cellpadding="2" bgcolor="red">
						<tr>
							<td>&nbsp;&nbsp;<font face="Verdana" size="1"><b>PREVIEW!</b></font>&nbsp;&nbsp;</td>
						</tr>
					</table>
				</div>';
				$temp_content = $this->config['config']['message_preview'] ? $this->config['config']['message_preview'] : $stdMsg;
				echo $temp_content;
		}
	}
	
	";i:1;i:0;}s:12:"content_size";i:448;s:13:"content_lines";i:15;s:6:"atLine";i:2149;}i:117;a:7:{s:6:"header";s:30:"function beLoginLinkIPList()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:68:"

Returns a link to the login screen with redirect to the front-end
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:38:"HTML, a tag for a link to the backend.";}}s:7:"content";a:2:{i:0;s:507:"		if ($this->config['config']['beLoginLinkIPList'])	{
			if (t3lib_div::cmpIP(t3lib_div::getIndpEnv('REMOTE_ADDR'), $this->config['config']['beLoginLinkIPList']))	{
				$label = !$this->beUserLogin ? $this->config['config']['beLoginLinkIPList_login'] : $this->config['config']['beLoginLinkIPList_logout'];
				if ($label)	{
					if (!$this->beUserLogin)	{
						$link = '<a h
[...]
*****************************
	 *
	 * Various internal API functions
	 *
	 *******************************************/
	
	
	";i:1;i:1;}s:12:"content_size";i:894;s:13:"content_lines";i:43;s:6:"atLine";i:2170;}i:119;a:8:{s:6:"header";s:77:"function makeSimulFileName($inTitle,$page,$type,$addParams='',$no_cache='')	{";s:11:"parentClass";s:8:"tslib_fe";s:11:"sectionText";a:1:{i:0;s:30:"Various internal API functions";}s:4:"cDat";a:5:{s:4:"text";s:79:"

Make simulation filename (without the ".html" ending, only body of filename)
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"string";i:1;s:21:"The page title to use";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:39:"The page id (integer) or alias (string)";}i:2;a:2:{i:0;s:7:"integer";i:1;s:15:"The type number";}i:3;a:2:{i:0;s:6:"string";i:1;s:151:"Query-parameters to encode (will be done only if caching is enabled and TypoScript configured for it. I don't know it this makes much sense in fact...)";}i:4;a:2:{i:0;s:7:"boolean";i:1;s:34:"The "no_cache" status of the link.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:25:"The body of the filename.";}s:5:"other";a:1:{i:0;s:84:"@see getSimulFileName(), t3lib_tstemplate::linkData(), tslib_frameset::frameParams()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:79:"getSimulFileName(), t3lib_tstemplate::linkData(), tslib_frameset::frameParams()";}}}s:7:"content";a:2:{i:0;s:507:"		$titleChars = intval($this->config['config']['simulateStaticDocuments_addTitle']);
		$out='';
		if ($titleChars)	{
			$out= ereg_replace('[^[:alnum:]_-]','_',trim(substr($inTitle,0,$titleChars)));
			if ($out)	$out.='.';
		}
		$enc='';
		if (strcmp($addParams,'') && !$no_cache)	{
			switch ((string)$this->config['config']['simulateStaticDocuments_pEnc'])	{
				case 'md5'
[...]
($type || $out || !$this->config['config']['simulateStaticDocuments_noTypeIfNoTitle']) ? '.'.$type : '';
		return $url;
	}

	";i:1;i:1;}s:12:"content_size";i:1092;s:13:"content_lines";i:31;s:6:"atLine";i:2225;}i:121;a:7:{s:6:"header";s:61:"function simulateStaticDocuments_pEnc_onlyP_proc($linkVars)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:5:{s:4:"text";s:198:"

Processes a query-string with GET-parameters and returns two strings, one with the parameters that CAN be encoded and one array with those which can't be encoded (encoded by the M5 or B6 methods)
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:0:"";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:107:"Two num keys returned, first is the parameters that MAY be encoded, second is the non-encodable parameters.";}s:5:"other";a:1:{i:0;s:54:"@see makeSimulFileName(), t3lib_tstemplate::linkData()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:49:"makeSimulFileName(), t3lib_tstemplate::linkData()";}}}s:7:"content";a:2:{i:0;s:507:"		$remainLinkVars='';
		if (strcmp($linkVars,''))	{
			$p = explode('&',$linkVars);
			sort($p);	// This sorts the parameters - and may not be needed and further it will generate new MD5 hashes in many cases. Maybe not so smart. Hmm?
			$rem=array();
			foreach($p as $k => $v)	{
				if ((string)$v)	{
					list($pName) = explode('=',$v,2);
					if (!$this->pEncAllowedParamN
[...]
) : '';
			$remainLinkVars = count($rem) ? '&'.implode('&',$rem) : '';
		}
		return array($linkVars, $remainLinkVars);
	}
	
	";i:1;i:1;}s:12:"content_size";i:641;s:13:"content_lines";i:21;s:6:"atLine";i:2264;}i:123;a:7:{s:6:"header";s:29:"function getSimulFileName()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:5:{s:4:"text";s:110:"

Returns the simulated static file name (*.html) for the current page (using the page record in $this->page)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:27:"The filename (without path)";}s:5:"other";a:1:{i:0;s:37:"@see makeSimulFileName(), publish.php";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:32:"makeSimulFileName(), publish.php";}}}s:7:"content";a:2:{i:0;s:162:"		$url='';
		$url.=$this->makeSimulFileName($this->page['title'], $this->page['alias']?$this->page['alias']:$this->id, $this->type).'.html';
		return $url;
	}	

	";i:1;i:0;}s:12:"content_size";i:162;s:13:"content_lines";i:5;s:6:"atLine";i:2292;}i:125;a:7:{s:6:"header";s:40:"function encryptEmail($string,$back=0)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:91:"

Encryption of email addresses for <A>-tags See the spam protection setup in TS 'config.'
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:50:"Input string to en/decode: "mailto:blabla@bla.com"";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:68:"If set, the process is reversed, effectively decoding, not encoding.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:34:"encoded/decoded version of $string";}}s:7:"content";a:2:{i:0;s:224:"		$out='';
		for ($a=0;$a<strlen($string);$a++)	{
			$charValue = ord(substr($string,$a,1));
			$charValue+=intval($GLOBALS['TSFE']->spamProtectEmailAddresses)*($back?-1:1);
			$out.=chr($charValue);
		}
		return $out;
	}

	";i:1;i:0;}s:12:"content_size";i:224;s:13:"content_lines";i:9;s:6:"atLine";i:2305;}i:127;a:7:{s:6:"header";s:37:"function checkFileInclude($incFile)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:5:{s:4:"text";s:39:"

Checks if a PHPfile may be included.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:25:"Relative path to php file";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:159:"Returns true if $GLOBALS['TYPO3_CONF_VARS']['FE']['noPHPscriptInclude'] is not set OR if the file requested for inclusion is found in one of the allowed paths.";}s:5:"other";a:1:{i:0;s:91:"@see tslib_cObj::PHP_SCRIPT(), tslib_feTCE::includeScripts(), tslib_menu::includeMakeMenu()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:86:"tslib_cObj::PHP_SCRIPT(), tslib_feTCE::includeScripts(), tslib_menu::includeMakeMenu()";}}}s:7:"content";a:2:{i:0;s:311:"		return !$GLOBALS['TYPO3_CONF_VARS']['FE']['noPHPscriptInclude'] 
			|| substr($incFile,0,14)=='media/scripts/'
			|| substr($incFile,0,4+strlen(TYPO3_mainDir))==TYPO3_mainDir.'ext/'
			|| substr($incFile,0,7+strlen(TYPO3_mainDir))==TYPO3_mainDir.'sysext/'
			|| substr($incFile,0,14)=='typo3conf/ext/';
	}
	
	";i:1;i:0;}s:12:"content_size";i:311;s:13:"content_lines";i:7;s:6:"atLine";i:2322;}i:129;a:7:{s:6:"header";s:20:"function newCObj()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:5:{s:4:"text";s:133:"

Creates an instance of tslib_cObj in $this->cObj
This instance is used to start the rendering of the TypoScript template structure
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:16:"@see pagegen.php";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:12:"pagegen.php ";}}}s:7:"content";a:2:{i:0;s:102:"		$this->cObj =t3lib_div::makeInstance('tslib_cObj');
		$this->cObj->start($this->page,'pages');
	}

	";i:1;i:0;}s:12:"content_size";i:102;s:13:"content_lines";i:4;s:6:"atLine";i:2337;}i:131;a:7:{s:6:"header";s:28:"function setAbsRefPrefix()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:6:{s:4:"text";s:127:"

Substitute the path's to files in the media/ folder like icons used in static_template of TypoScript
Works on $this->content
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:32:"@see pagegen.php, INTincScript()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:27:"pagegen.php, INTincScript()";}}}s:7:"content";a:2:{i:0;s:234:"		if ($this->absRefPrefix)	{
			$this->content = str_replace('"media/', '"'.$this->absRefPrefix.'media/', $this->content);
			$this->content = str_replace('"fileadmin/', '"'.$this->absRefPrefix.'fileadmin/', $this->content);
		}
	}

	";i:1;i:0;}s:12:"content_size";i:234;s:13:"content_lines";i:6;s:6:"atLine";i:2350;}i:133;a:7:{s:6:"header";s:46:"function printError($label,$header='Error!')	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:5:{s:4:"text";s:55:"

Prints error msg/header.
Echoes out the HTML content
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:7:"Message";}i:1;a:2:{i:0;s:6:"string";i:1;s:6:"Header";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:45:"@see t3lib_timeTrack::debug_typo3PrintError()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:41:"t3lib_timeTrack::debug_typo3PrintError() ";}}}s:7:"content";a:2:{i:0;s:67:"		t3lib_timeTrack::debug_typo3PrintError($header,$label,0);	
	}
	
	";i:1;i:0;}s:12:"content_size";i:67;s:13:"content_lines";i:3;s:6:"atLine";i:2366;}i:135;a:7:{s:6:"header";s:39:"function updateMD5paramsRecord($hash)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:4:{s:4:"text";s:76:"

Updates the tstamp field of a cache_md5params record to the current time.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:114:"The hash string identifying the cache_md5params record for which to update the "tstamp" field to the current time.";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:131:"		$query='UPDATE cache_md5params SET tstamp='.time().' WHERE md5hash="'.addslashes($hash).'"';
		$res=mysql(TYPO3_db,$query);
	}

	";i:1;i:0;}s:12:"content_size";i:131;s:13:"content_lines";i:4;s:6:"atLine";i:2377;}i:137;a:7:{s:6:"header";s:30:"function tidyHTML($content)		{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:320:"

Pass the content through tidy - a little program that cleans up HTML-code
Requires $this->TYPO3_CONF_VARS['FE']['tidy'] to be true and $this->TYPO3_CONF_VARS['FE']['tidy_path'] to contain the filename/path of tidy including clean-up arguments for tidy. See default value in TYPO3_CONF_VARS in t3lib/config_default.php
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:145:"The page content to clean up. Will be written to a temporary file which "tidy" is then asked to clean up. File content is read back and returned.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:11:"Returns the";}}s:7:"content";a:2:{i:0;s:507:"		if ($this->TYPO3_CONF_VARS['FE']['tidy'] && $this->TYPO3_CONF_VARS['FE']['tidy_path'])	{
			$oldContent = $content;
			$fname = tempnam('','Typo3_Tidydoc_');		// Create temporary name
			@unlink ($fname);	// Delete if exists, just to be safe.
			$fp = fopen ($fname,'w');	// Open for writing
			fputs ($fp, $content);	// Put $content
			@fclose ($fp);	// Close
		
			exec (
[...]
***
	 *
	 * Various external API functions - for use in plugins etc.
	 *
	 *******************************************/
	
	
	";i:1;i:1;}s:12:"content_size";i:1090;s:13:"content_lines";i:55;s:6:"atLine";i:2389;}i:139;a:8:{s:6:"header";s:35:"function getStorageSiterootPids()	{";s:11:"parentClass";s:8:"tslib_fe";s:11:"sectionText";a:1:{i:0;s:56:"Various external API functions - for use in plugins etc.";}s:4:"cDat";a:3:{s:4:"text";s:106:"

Traverses the ->rootLine and returns an array with the first occurrance of storage pid and siteroot pid
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:81:"Array with keys '_STORAGE_PID' and '_SITEROOT' set to the first occurances found.";}}s:7:"content";a:2:{i:0;s:276:"		$res=array();
		reset($this->rootLine);
		while(list(,$rC)=each($this->rootLine))	{
			if (!$res['_STORAGE_PID'])	$res['_STORAGE_PID']=intval($rC['storage_pid']);
			if (!$res['_SITEROOT'])	$res['_SITEROOT']=$rC['is_siteroot']?intval($rC['uid']):0;
		}
		return $res;
	}
	
	";i:1;i:0;}s:12:"content_size";i:276;s:13:"content_lines";i:9;s:6:"atLine";i:2450;}i:141;a:7:{s:6:"header";s:29:"function getPagesTSconfig()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:67:"

Returns the pages TSconfig array based on the currect ->rootLine
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		if (!is_array($this->pagesTSconfig))	{
			reset($this->rootLine);
			$TSdataArray = array();
			$TSdataArray[]=$GLOBALS['TYPO3_CONF_VARS']['BE']['defaultPageTSconfig'];	// Setting default configuration:
			while(list($k,$v)=each($this->rootLine))	{
				$TSdataArray[]=$v['TSconfig'];
			}
				// Parsing the user TS (or getting from cache)
			$TSdataArray = t3lib_TSparser:
[...]
->sys_page->storeHash($hash,serialize($this->pagesTSconfig),'PAGES_TSconfig');
			}
		}
		return $this->pagesTSconfig;
	}
	
	";i:1;i:1;}s:12:"content_size";i:937;s:13:"content_lines";i:24;s:6:"atLine";i:2465;}i:143;a:7:{s:6:"header";s:34:"function setJS($key,$content='')	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:5:{s:4:"text";s:57:"

Sets JavaScript code in the additionalJavaScript array
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:110:"$key is the key in the array, for num-key let the value be empty. Note reserved keys 'openPic' and 'mouseOver'";}i:1;a:2:{i:0;s:6:"string";i:1;s:39:"$content is the content if you want any";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:58:"@see tslib_gmenu::writeMenu(), tslib_cObj::imageLinkWrap()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:53:"tslib_gmenu::writeMenu(), tslib_cObj::imageLinkWrap()";}}}s:7:"content";a:2:{i:0;s:30:"		if ($key)	{
			switch($key)	";i:1;i:0;}s:12:"content_size";i:30;s:13:"content_lines";i:1;s:6:"atLine";i:2498;}i:145;a:6:{s:6:"header";s:28:"function over(name,imgObj)	{";s:11:"parentClass";s:8:"tslib_fe";s:7:"content";a:2:{i:0;s:104:"		if (version == "n3" && document[name]) {document[name].src = eval(name+"_h.src");}
		else if (imgObj)	";i:1;i:0;}s:12:"content_size";i:104;s:13:"content_lines";i:1;s:6:"atLine";i:2504;}i:147;a:6:{s:6:"header";s:27:"function out(name,imgObj)	{";s:11:"parentClass";s:8:"tslib_fe";s:7:"content";a:2:{i:0;s:457:"		if (version == "n3" && document[name]) {document[name].src = eval(name+"_n.src");}
		else if (imgObj)	{imgObj.src = eval(name+"_n.src");}
	}';
				break;
				case 'openPic':
					$this->additionalJavaScript[$key]=
'	function openPic(url,winName,winParams)	{
		var theWindow = window.open(url,winName,winParams);	
		if (theWindow)	{theWindow.focus();}
	}';
				break;
				default:
					$this->additionalJavaScript[$key]=$content;
				break;
			}
		}
	}
	
	";i:1;i:0;}s:12:"content_size";i:457;s:13:"content_lines";i:18;s:6:"atLine";i:2509;}i:149;a:7:{s:6:"header";s:32:"function setCSS($key,$content)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:5:{s:4:"text";s:43:"

Sets CSS data in the additionalCSS array
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:64:"$key is the key in the array, for num-key let the value be empty";}i:1;a:2:{i:0;s:6:"string";i:1;s:39:"$content is the content if you want any";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:46:"@see setJS(), tslib_pibase::pi_setClassStyle()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:41:"setJS(), tslib_pibase::pi_setClassStyle()";}}}s:7:"content";a:2:{i:0;s:112:"		if ($key)	{
			switch($key)	{
				default:
					$this->additionalCSS[$key]=$content;
				break;
			}
		}
	}

	";i:1;i:0;}s:12:"content_size";i:112;s:13:"content_lines";i:9;s:6:"atLine";i:2536;}i:151;a:7:{s:6:"header";s:22:"function make_seed() {";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:34:"

Seeds the random number engine.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:128:"	    list($usec, $sec) = explode(' ', microtime());
	    $seedV = (float)$sec + ((float)$usec * 100000);
		srand($seedV);
	}
	
	";i:1;i:0;}s:12:"content_size";i:128;s:13:"content_lines";i:5;s:6:"atLine";i:2551;}i:153;a:7:{s:6:"header";s:30:"function uniqueHash($str='')	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:220:"

Returns a unique md5 hash.
There is no special magic in this, the only point is that you don't have to call md5(uniqid()) which is slow and by this you are sure to get a unique string each time in a little faster way.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:65:"Some string to include in what is hashed. Not significant at all.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:58:"MD5 hash of ->uniqueString, input string and uniqueCounter";}}s:7:"content";a:2:{i:0;s:72:"		return md5($this->uniqueString.'_'.$str.$this->uniqueCounter++);
	}

	";i:1;i:0;}s:12:"content_size";i:72;s:13:"content_lines";i:3;s:6:"atLine";i:2564;}i:155;a:7:{s:6:"header";s:25:"function set_no_cache()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:119:"

Sets the cache-flag to 1. Could be called from user-included php-files in order to ensure that a page is not cached.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:28:"		$this->no_cache = 1;
	}

	";i:1;i:0;}s:12:"content_size";i:28;s:13:"content_lines";i:3;s:6:"atLine";i:2573;}i:157;a:7:{s:6:"header";s:46:"function set_cache_timeout_default($seconds)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:36:"

Sets the cache-timeout in seconds
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:24:"cache-timeout in seconds";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:54:"		$this->cacheTimeOutDefault = intval($seconds);
	}

	";i:1;i:0;}s:12:"content_size";i:54;s:13:"content_lines";i:3;s:6:"atLine";i:2583;}i:159;a:7:{s:6:"header";s:65:"function plainMailEncoded($email,$subject,$message,$headers='')	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:5:{s:4:"text";s:377:"

Substitute function for the PHP mail() function.
It will encode the email with the setting of TS 'config.notification_email_encoding' (base64 or none)
It will also find all links to http:// in the text and substitute with a shorter link using the redirect feature which stores the long link in the database. Depends on configuration in TS 'config.notification_email_urlmode'
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:36:"recipient email address (or list of)";}i:1;a:2:{i:0;s:6:"string";i:1;s:11:"The subject";}i:2;a:2:{i:0;s:6:"string";i:1;s:11:"The message";}i:3;a:2:{i:0;s:6:"string";i:1;s:31:"The headers (string with lines)";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:34:"@see t3lib_div::plainMailEncoded()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:30:"t3lib_div::plainMailEncoded() ";}}}s:7:"content";a:2:{i:0;s:450:"		$urlmode=$this->config['config']['notification_email_urlmode'];	// '76', 'all', ''

		if ($urlmode)	{
			$message=t3lib_div::substUrlsInPlainText($message,$urlmode);
		}
		
		t3lib_div::plainMailEncoded(
			$email,
			$subject,
			$message,
			$headers,
			$this->config['config']['notification_email_encoding'],
			$this->config['config']['notification_email_charset']?$this->config['config']['notification_email_charset']:'ISO-8859-1'
		);
	}
	
	";i:1;i:0;}s:12:"content_size";i:450;s:13:"content_lines";i:16;s:6:"atLine";i:2599;}i:161;a:7:{s:6:"header";s:21:"function sL($input)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:51:"

Split Label function for front-end applications.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:38:"Key string. Accepts the "LLL:" prefix.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:20:"Label value, if any.";}}s:7:"content";a:2:{i:0;s:507:"		if (!$this->lang)	$this->initLLvars();
		
		if (strcmp(substr($input,0,4),'LLL:'))	{
			$t = explode('|',$input);
			return $t[$this->langSplitIndex] ? $t[$this->langSplitIndex] : $t[0];
		} else {
			if (!isset($this->LL_labels_cache[$this->lang][$input])) {	// If cached label
				$restStr = trim(substr($input,4));
				$extPrfx='';
				if (!strcmp(substr($restStr,0,4),'
[...]
s->getLLL($parts[1],$this->LL_files_cache[$parts[0]]);
			}
			return $this->LL_labels_cache[$this->lang][$input];
		}
	}
	
	";i:1;i:1;}s:12:"content_size";i:862;s:13:"content_lines";i:24;s:6:"atLine";i:2622;}i:163;a:7:{s:6:"header";s:31:"function readLLfile($fileRef)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:51:"

Read locallang files - for frontend applications
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:44:"Reference to a relative filename to include.";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:88:"Returns the $LOCAL_LANG array found in the file. If no array found, returns empty array.";}}s:7:"content";a:2:{i:0;s:157:"		$file = t3lib_div::getFileAbsFileName($fileRef);
		if (@is_file($file))	{
			include($file);
		}
		return is_array($LOCAL_LANG)?$LOCAL_LANG:array();
	}
	
	";i:1;i:0;}s:12:"content_size";i:157;s:13:"content_lines";i:7;s:6:"atLine";i:2653;}i:165;a:4:{s:6:"header";s:37:"function getLLL($index,$LOCAL_LANG)	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:66:"

Returns 'locallang' label - may need initializing by initLLvars
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:80:"Local_lang key for which to return label (language is determined by $this->lang)";}i:1;a:2:{i:0;s:5:"array";i:1;s:38:"The locallang array in which to search";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:26:"Label value of $index key.";}}s:6:"atLine";i:2668;}i:167;a:7:{s:6:"header";s:23:"function initLLvars()	{";s:11:"parentClass";s:8:"tslib_fe";s:4:"cDat";a:3:{s:4:"text";s:115:"

Initializing the getLL variables needed.
Sets $this->langSplitIndex based on $this->config['config']['language']
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:431:"		$this->lang = $this->config['config']['language'] ? $this->config['config']['language'] : 'default';
		$ls = explode('|',TYPO3_languages);
		while(list($i,$v)=each($ls))	{
			if ($v==$this->lang)	{$this->langSplitIndex=$i; break;}
		}
	}
}



if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/class.tslib_fe.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/class.tslib_fe.php']);
}
?>";i:1;i:0;}s:12:"content_size";i:431;s:13:"content_lines";i:13;s:6:"atLine";i:2682;}}}s:27:"tslib/class.tslib_fetce.php";a:3:{s:8:"filesize";i:10770;s:6:"header";a:5:{s:4:"text";s:168:"

Form-data processing class.
Used by the FE_DATA object found in TSref. Quite old fashioned and used only by a few extensions, like good old 'tt_guest' and 'tt_board'
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:12:"@depreciated";i:2;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=342&cHash=fdf55adb3b";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:12:"@depreciated";a:1:{i:0;s:1:" ";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=342&cHash=fdf55adb3b ";}}}s:3:"DAT";a:9:{i:1;a:8:{s:6:"header";s:19:"class tslib_feTCE	{";s:5:"class";i:1;s:11:"parentClass";s:11:"tslib_feTCE";s:4:"cDat";a:5:{s:4:"text";s:168:"

Form-data processing class.
Used by the FE_DATA object found in TSref. Quite old fashioned and used only by a few extensions, like good old 'tt_guest' and 'tt_board'
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:12:"@depreciated";i:2;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=342&cHash=fdf55adb3b";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:12:"@depreciated";a:1:{i:0;s:1:" ";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=342&cHash=fdf55adb3b ";}}}s:7:"content";a:2:{i:0;s:107:"
	var $extScripts=array();
	var $extScriptsConf=array();
	var $newData=array();
	var $extraList = 'pid';

	";i:1;i:-1;}s:12:"content_size";i:107;s:13:"content_lines";i:6;s:6:"atLine";i:82;}i:3;a:7:{s:6:"header";s:31:"function start($data,$FEData)	{";s:11:"parentClass";s:11:"tslib_feTCE";s:4:"cDat";a:5:{s:4:"text";s:271:"

Starting the processing of user input.
Traverses the input data and fills in the array, $this->extScripts with references to files which are then included by includeScripts() (called AFTER start() in tslib_fe)
These scripts will then put the content into the database.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:68:"Input data coming from POST vars, $GLOBALS['HTTP_POST_VARS']['data']";}i:1;a:2:{i:0;s:5:"array";i:1;s:72:"TypoScript configuration for the FEDATA object, $this->config['FEData.']";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:41:"@see tslib_fe::fe_tce(), includeScripts()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:36:"tslib_fe::fe_tce(), includeScripts()";}}}s:7:"content";a:2:{i:0;s:507:"		reset($data);
		while(list($table,$id_arr)=each($data))	{
			t3lib_div::loadTCA($table);
			if (is_array($id_arr))	{
				$sep=$FEData[$table.'.']['separator']?$FEData[$table.'.']['separator']:chr(10);
				reset($id_arr);
				while(list($id,$field_arr)=each($id_arr))	{
					$this->newData[$table][$id]=Array();
					if (strstr($id,'NEW'))	{		// NEW
							// Defaults:
				
[...]
->extScripts[$table]=$incFile;
					$this->extScriptsConf[$table]=$FEData[$table.'.']['processScript.'];
				}
			}
		}
	}

	";i:1;i:1;}s:12:"content_size";i:2958;s:13:"content_lines";i:76;s:6:"atLine";i:99;}i:5;a:7:{s:6:"header";s:61:"function checkDoublePostExist($table,$doublePostField,$key)	{";s:11:"parentClass";s:11:"tslib_feTCE";s:4:"cDat";a:4:{s:4:"text";s:385:"

Checking if a "double-post" exists already.
"Double-posting" is if someone refreshes a page with a form for the message board or guestbook and thus submits the element twice. Checking for double-posting prevents the second submission from being stored. This is done by saving the first record with a MD5 hash of the content - if this hash exists already, the record cannot be saved.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:27:"The database table to check";}i:1;a:2:{i:0;s:6:"string";i:1;s:47:"The fieldname from the database table to search";}i:2;a:2:{i:0;s:6:"string";i:1;s:24:"The value to search for.";}}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:81:"The number of found rows. If zero then no "double-post" was found and its all OK.";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:189:"		$query = 'SELECT count(*) FROM '.$table.' WHERE '.$doublePostField.'='.$key;
		$res = mysql(TYPO3_db,$query);
		echo mysql_error();
		$row = mysql_fetch_row($res);
		return $row[0];
	}

	";i:1;i:0;}s:12:"content_size";i:189;s:13:"content_lines";i:7;s:6:"atLine";i:186;}i:7;a:7:{s:6:"header";s:36:"function calcDoublePostKey($array)	{";s:11:"parentClass";s:11:"tslib_feTCE";s:4:"cDat";a:4:{s:4:"text";s:58:"

Creates the double-post hash value from the input array
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:33:"The array with key/values to hash";}}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:31:"And unsigned 32bit integer hash";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:152:"		ksort($array);	// Sorting by key
		$doublePostCheckKey = hexdec(substr(md5(serialize($array)),0,8));	// Making key
		return $doublePostCheckKey;
	}

	";i:1;i:0;}s:12:"content_size";i:152;s:13:"content_lines";i:5;s:6:"atLine";i:201;}i:9;a:7:{s:6:"header";s:27:"function includeScripts()	{";s:11:"parentClass";s:11:"tslib_feTCE";s:4:"cDat";a:5:{s:4:"text";s:88:"

Includes the submit scripts found in ->extScripts (filled in by the start() function)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:41:"@see tslib_fe::fe_tce(), includeScripts()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:36:"tslib_fe::fe_tce(), includeScripts()";}}}s:7:"content";a:2:{i:0;s:424:"		reset($this->extScripts);
		while(list($incFile_table,$incFile)=each($this->extScripts))	{
			if (@is_file($incFile) && $GLOBALS['TSFE']->checkFileInclude($incFile))	{
				include($incFile);	// Always start the incFiles with a check of the object fe_tce.  is_object($this);
				$GLOBALS['TT']->setTSlogMessage('Included '.$incFile,0);
			} else $GLOBALS['TT']->setTSlogMessage('"'.$incFile.'" was not found!',2);
		}
	}

	";i:1;i:0;}s:12:"content_size";i:424;s:13:"content_lines";i:9;s:6:"atLine";i:213;}i:11;a:7:{s:6:"header";s:41:"function getNEWinsert($table, $dataArr)	{";s:11:"parentClass";s:11:"tslib_feTCE";s:4:"cDat";a:3:{s:4:"text";s:234:"

Method available to the submit scripts for creating insert queries.
Automatically adds tstamp, crdate, cruser_id field/value pairs.
Will allow only field names which are either found in $TCA[...][columns] OR in the $this->extraList
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:55:"The table name for which to create the insert statement";}i:1;a:2:{i:0;s:5:"array";i:1;s:63:"Array with key/value pairs being field/values (already escaped)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:22:"Returns the query made";}}s:7:"content";a:2:{i:0;s:507:"		$fp=array();
		$vp=array();
		$extraList=$this->extraList;
		if ($GLOBALS['TCA'][$table]['ctrl']['tstamp'])	{$field=$GLOBALS['TCA'][$table]['ctrl']['tstamp']; $dataArr[$field]=time(); $extraList.=','.$field;}
		if ($GLOBALS['TCA'][$table]['ctrl']['crdate'])	{$field=$GLOBALS['TCA'][$table]['ctrl']['crdate']; $dataArr[$field]=time(); $extraList.=','.$field;}
		if ($GLOBALS
[...]
OBALS['TCA'][$table]['columns'][$f]))	{
				$fp[]=$f;
				$vp[]=$v;
			}
		}
		return $this->getInsert($table,$fp,$vp);
	}

	";i:1;i:1;}s:12:"content_size";i:799;s:13:"content_lines";i:18;s:6:"atLine";i:232;}i:13;a:7:{s:6:"header";s:36:"function getInsert($table,$fp,$vp)	{";s:11:"parentClass";s:11:"tslib_feTCE";s:4:"cDat";a:4:{s:4:"text";s:27:"

Creates an insert query.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:40:"Table name in which to insert the record";}i:1;a:2:{i:0;s:5:"array";i:1;s:32:"Array with field names as values";}i:2;a:2:{i:0;s:5:"array";i:1;s:71:"Array with field values as values - in the same order and number as $fp";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:17:"The INSERT query.";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:116:"		$query = 'INSERT INTO '.$table.' ('.implode($fp,',').') VALUES ("'.implode($vp,'","').'")';
		return $query;
	}

	";i:1;i:0;}s:12:"content_size";i:116;s:13:"content_lines";i:4;s:6:"atLine";i:260;}i:15;a:4:{s:6:"header";s:36:"function clear_cacheCmd($cacheCmd)	{";s:11:"parentClass";s:11:"tslib_feTCE";s:4:"cDat";a:5:{s:4:"text";s:123:"

Clear cache for page id.
If the page id is the current page, then set_no_cache() is called (so page caching is disabled)
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:40:"The page id for which to clear the cache";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:29:"@see tslib_fe::set_no_cache()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:25:"tslib_fe::set_no_cache() ";}}}s:6:"atLine";i:273;}i:17;a:7:{s:6:"header";s:26:"function getConf($table)	{";s:11:"parentClass";s:11:"tslib_feTCE";s:4:"cDat";a:3:{s:4:"text";s:51:"

Return TypoScript configuration for a table name
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:85:"The table name for which to return TypoScript configuration (From TS: FEData.[table])";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:54:"TypoScript properties from FEData.[table] - if exists.";}}s:7:"content";a:2:{i:0;s:241:"		return $this->extScriptsConf[$table];
	}
}



if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/class.tslib_fetce.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/class.tslib_fetce.php']);
}

?>";i:1;i:0;}s:12:"content_size";i:241;s:13:"content_lines";i:10;s:6:"atLine";i:289;}}}s:32:"tslib/class.tslib_feuserauth.php";a:3:{s:8:"filesize";i:13569;s:6:"header";a:5:{s:4:"text";s:53:"

Extension class for Front End User Authentication.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:3:"DAT";a:8:{i:1;a:8:{s:6:"header";s:47:"class tslib_feUserAuth extends t3lib_userAuth {";s:5:"class";i:1;s:11:"parentClass";s:16:"tslib_feUserAuth";s:4:"cDat";a:5:{s:4:"text";s:53:"

Extension class for Front End User Authentication.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:7:"content";a:2:{i:0;s:3082:"	var $session_table = 'fe_sessions'; 		// Table to use for session data.
	var $name = 'fe_typo_user';                 // Session/Cookie name
	var $get_name = 'ftu';		                 // Session/GET-var name

	var $user_table = 'fe_users'; 					// Table in database with userdata
	var $username_column = 'username'; 			// Column for login-name
	var $userident_column = 'password'; 		// Column for password
	var $userid_column = 'uid'; 					// Column for user-id
	var $lastLogin_column = 'lastlogin';

	var $enablecolumns = Array (
		'deleted' => 'deleted',
		'disabled' => 'disable',
		'starttime' => 'starttime',
		'endtime' => 'endtime'
	);
	var $formfield_uname = 'user'; 			// formfield with login-name
	var $formfield_uident = 'pass'; 		// formfield with password
	var $formfield_chalvalue = 'challenge';		// formfield with a unique value which is used to encrypt the password and username
	var $formfield_status = 'logintype'; 	// formfield with status: *'login', 'logout'
	var $security_level = '';				// sets the level of security. *'normal' = clear-text. 'challenged' = hashed password/username from form in $formfield_uident. 'superchallenged' = hashed password hashed again with username.

	var $auth_include = '';						// this is the name of the include-file containing the login form. If not set, login CAN be anonymous. If set login IS needed.
	
	var $auth_timeout_field = 6000;				// if > 0 : session-timeout in seconds. if false/<0 : no timeout. if string: The string is fieldname from the usertable where the timeout can be found.
	
	var $lifetime = 0;                  		// 0 = Session-cookies. If session-cookies, the browser will stop session when the browser is closed. Else it keeps the session for $lifetime seconds.
	var $sendNoCacheHeaders = 0;
	var $getFallBack = 1;					// If this is set, authentication is also accepted by the HTTP_GET_VARS. Notice that the identification is NOT 128bit MD5 hash but reduced. This is done in order to minimize the size for mobile-devices, such as WAP-phones
	var $hash_length = 10;
	var $getMethodEnabled = 1;				// Login may be supplied by url.

	var $usergroup_column = 'usergroup';
	var $usergroup_table = 'fe_groups';
	var $groupData = Array(
		'title' =>Array(),
		'uid' =>Array(),
		'pid' =>Array()
	);
	var $TSdataArray=array();		// Used to accumulate the TSconfig data of the user
	var $userTS = array();
	var $userTSUpdated=0;	
	var $showHiddenRecords=0;

		// Session and user data:
		/*
			There are two types of data that can be stored: UserData and Session-Data. Userdata is for the login-user, and session-data for anyone viewing the pages.
			'Keys' are keys in the internal dataarray of the data. When you get or set a key in one of the data-spaces (user or session) you decide the type of the variable (not object though)
			'Reserved' keys are: 
				- 'recs': Array: Used to 'register' records, eg in a shopping basket. Structure: [recs][tablename][record_uid]=number
				- sys: Reserved for TypoScript standard code.
		*/
	var $sesData = Array();
	var $sesData_change = 0;
	var $userData_change = 0;


	";i:1;i:-1;}s:12:"content_size";i:3082;s:13:"content_lines";i:57;s:6:"atLine";i:74;}i:3;a:7:{s:6:"header";s:27:"function fetchGroupData()	{";s:11:"parentClass";s:16:"tslib_feUserAuth";s:4:"cDat";a:3:{s:4:"text";s:209:"

Will select all fe_groups records that the current fe_user is member of - and which groups are also allowed in the current domain.
It also accumulates the TSconfig for the fe_user/fe_groups in ->TSdataArray
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:133:"Returns the number of usergroups for the frontend users (if the internal user record exists and the usergroup field contains a value)";}}s:7:"content";a:2:{i:0;s:507:"		$this->TSdataArray=array();
		$this->userTS = array();
		$this->userTSUpdated=0;	

			// Setting default configuration:
		$this->TSdataArray[]=$GLOBALS['TYPO3_CONF_VARS']['FE']['defaultUserTSconfig'];
		
		if (is_array($this->user) && $this->user['usergroup'])	{
			$groups = t3lib_div::intExplode(',',$this->user['usergroup']);
			$list = implode($groups,',');
			$lockToD
[...]
d']);
				ksort($this->groupData['pid']);
				return count($this->groupData['uid']);
			} else {
				return 0;
			}
		}
	}

	";i:1;i:1;}s:12:"content_size";i:1421;s:13:"content_lines";i:39;s:6:"atLine";i:138;}i:5;a:7:{s:6:"header";s:26:"function getUserTSconf()	{";s:11:"parentClass";s:16:"tslib_feUserAuth";s:4:"cDat";a:3:{s:4:"text";s:241:"

Returns the parsed TSconfig for the fe_user
First time this function is called it will parse the TSconfig and store it in $this->userTS. Subsequent requests will not re-parse the TSconfig but simply return what is already in $this->userTS
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:30:"TSconfig array for the fe_user";}}s:7:"content";a:2:{i:0;s:589:"		if (!$this->userTSUpdated) {
				// Parsing the user TS (or getting from cache)
			$this->TSdataArray = t3lib_TSparser::checkIncludeLines_array($this->TSdataArray);
			$userTS = implode($this->TSdataArray,chr(10).'[GLOBAL]'.chr(10));
			$parseObj = t3lib_div::makeInstance('t3lib_TSparser');
			$parseObj->parse($userTS);
			$this->userTS = $parseObj->setup;

			$this->userTSUpdated=1;
		}
		return $this->userTS;
	}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/*****************************************
	 *
	 * Session data management functions
	 *
	 ****************************************/

	";i:1;i:0;}s:12:"content_size";i:589;s:13:"content_lines";i:35;s:6:"atLine";i:184;}i:7;a:8:{s:6:"header";s:29:"function fetchSessionData()	{";s:11:"parentClass";s:16:"tslib_feUserAuth";s:11:"sectionText";a:1:{i:0;s:33:"Session data management functions";}s:4:"cDat";a:6:{s:4:"text";s:214:"

Fetches the session data for the user (from the fe_session_data table) based on the ->id of the current user-session.
The session data is restored to $this->sesData
1/100 calls will also do a garbage collection.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:23:"@see storeSessionData()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:19:"storeSessionData() ";}}}s:7:"content";a:2:{i:0;s:580:"		// Gets SesData if any
		if ($this->id)	{
			$query='SELECT * FROM fe_session_data WHERE hash = "'.$this->id.'"';
			$dbres=mysql(TYPO3_db,$query);
			echo mysql_error();
			if ($sesDataRow = mysql_fetch_assoc($dbres))	{
				$this->sesData = unserialize($sesDataRow['content']);
			}
		}
			// delete old data:
		if ((rand()%100) <= 1) {		// a possibility of 1 % for garbage collection.
			$query='DELETE FROM fe_session_data WHERE tstamp < "'.(time()-3600*24).'"';		// all data older than 24 hours are deleted.
			$dbres=mysql(TYPO3_db,$query);
			echo mysql_error();
		}
	}

	";i:1;i:0;}s:12:"content_size";i:580;s:13:"content_lines";i:17;s:6:"atLine";i:229;}i:9;a:7:{s:6:"header";s:29:"function storeSessionData()	{";s:11:"parentClass";s:16:"tslib_feUserAuth";s:4:"cDat";a:5:{s:4:"text";s:324:"

Will write UC and session data.
If the flag $this->userData_change has been set, the function ->writeUC is called (which will save persistent user session data)
If the flag $this->sesData_change has been set, the fe_session_data table is updated with the content of $this->sesData (deleting any old record, inserting new)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:43:"@see fetchSessionData(), getKey(), setKey()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:38:"fetchSessionData(), getKey(), setKey()";}}}s:7:"content";a:2:{i:0;s:501:"		// Saves UC and SesData if changed.
		if ($this->userData_change)	{
			$this->writeUC('');
		}
		if ($this->sesData_change)	{
			if ($this->id)	{
				$query='DELETE FROM fe_session_data WHERE hash = "'.$this->id.'"';
				$dbres=mysql(TYPO3_db,$query);
				echo mysql_error();
				$query='INSERT INTO fe_session_data (hash, content, tstamp) VALUES ("'.$this->id.'", "'.addslashes(serialize($this->sesData)).'", "'.time().'")';
				$dbres=mysql(TYPO3_db,$query);
				echo mysql_error();
			}
		}
	}

	";i:1;i:0;}s:12:"content_size";i:501;s:13:"content_lines";i:16;s:6:"atLine";i:255;}i:11;a:7:{s:6:"header";s:29:"function getKey($type,$key) {";s:11:"parentClass";s:16:"tslib_feUserAuth";s:4:"cDat";a:5:{s:4:"text";s:206:"

Returns session data for the fe_user; Either persistent data following the fe_users uid/profile (requires login) or current-session based (not available when browse is closed, but does not require login)
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:126:"Session data type; Either "user" (persistent, bound to fe_users profile) or "ses" (temporary, bound to current session cookie)";}i:1;a:2:{i:0;s:6:"string";i:1;s:170:"Key from the data array to return; The session data (in either case) is an array ($this->uc / $this->sesData) and this value determines which key to return the value for.";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:63:"Returns whatever value there was in the array for the key, $key";}s:5:"other";a:1:{i:0;s:13:"@see setKey()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:9:"setKey() ";}}}s:7:"content";a:2:{i:0;s:165:"		if ($key)	{
			switch($type)	{
				case 'user':
					return $this->uc[$key];
				break;
				case 'ses':
					return $this->sesData[$key];
				break;
			}
		}
	}

	";i:1;i:0;}s:12:"content_size";i:165;s:13:"content_lines";i:12;s:6:"atLine";i:280;}i:13;a:4:{s:6:"header";s:35:"function setKey($type,$key,$data)	{";s:11:"parentClass";s:16:"tslib_feUserAuth";s:4:"cDat";a:5:{s:4:"text";s:839:"

Saves session data, either persistent or bound to current session cookie. Please see getKey() for more details.
When a value is set the flags $this->userData_change or $this->sesData_change will be set so that the final call to ->storeSessionData() will know if a change has occurred and needs to be saved to the database.
Notice: The key "recs" is already used by the function record_registration() which stores table/uid=value pairs in that key. This is used for the shopping basket among other things.
Notice: Simply calling this function will not save the data to the database! The actual saving is done in storeSessionData() which is called as some of the last things in index_ts.php. So if you exit before this point, nothing gets saved of course! And the solution is to call $GLOBALS['TSFE']->storeSessionData(); before you exit.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:126:"Session data type; Either "user" (persistent, bound to fe_users profile) or "ses" (temporary, bound to current session cookie)";}i:1;a:2:{i:0;s:6:"string";i:1;s:196:"Key from the data array to store incoming data in; The session data (in either case) is an array ($this->uc / $this->sesData) and this value determines in which key the $data value will be stored.";}i:2;a:2:{i:0;s:5:"mixed";i:1;s:31:"The data value to store in $key";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:56:"@see setKey(), storeSessionData(), record_registration()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:51:"setKey(), storeSessionData(), record_registration()";}}}s:6:"atLine";i:305;}i:15;a:7:{s:6:"header";s:37:"function record_registration($recs)	{";s:11:"parentClass";s:16:"tslib_feUserAuth";s:4:"cDat";a:3:{s:4:"text";s:298:"

Registration of records/"shopping basket" in session data
This will take the input array, $recs, and merge into the current "recs" array found in the session data.
If a change in the recs storage happens (which it probably does) the function setKey() is called in order to store the array again.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:147:"The data array to merge into/override the current recs values. The $recs array is constructed as [table]][uid] = scalar-value (eg. string/integer).";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		if ($recs['clear_all'])	{
			$this->setKey('ses','recs','');
		}
		$change=0;
		$recs_array=$this->getKey('ses','recs');
		reset($recs);
		while(list($table,$data)=each($recs))	{
			if (is_array($data))	{
				reset($data);
				while(list($rec_id,$value)=each($data))	{
					if ($value != $recs_array[$table][$rec_id])	{
						$recs_array[$table][$rec_id] = stripslashes($va
[...]
ss.tslib_feuserauth.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/class.tslib_feuserauth.php']);
}
?>
";i:1;i:1;}s:12:"content_size";i:695;s:13:"content_lines";i:28;s:6:"atLine";i:330;}}}s:32:"tslib/class.tslib_gifbuilder.php";a:3:{s:8:"filesize";i:21185;s:6:"header";a:5:{s:4:"text";s:1109:"

GIFBUILDER extension class.
This class allows for advanced rendering of images with various layers of images, text and graphical primitives.
The concept is known from TypoScript as "GIFBUILDER" where you can define a "numerical array" (TypoScript term as well) of "GIFBUILDER OBJECTS" (like "TEXT", "IMAGE", etc.) and they will be rendered onto an image one by one.
The name "GIFBUILDER" comes from the time where GIF was the only file format supported. PNG is just as well to create today (configured with TYPO3_CONF_VARS[GFX])
Not all instances of this class is truely building gif/png files by layers; You may also see the class instantiated for the purpose of using the scaling functions in the parent class, t3lib_stdGraphic.

Here is an example of how to use this class (from tslib_content.php, function getImgResource):

$gifCreator = t3lib_div::makeInstance('tslib_gifbuilder');
$gifCreator->init();
$theImage='';
if ($GLOBALS['TYPO3_CONF_VARS']['GFX']['gdlib'])	{
$gifCreator->start($fileArray,$this->data);
$theImage = $gifCreator->gifBuild();
}
return $gifCreator->getImageDimensions($theImage);
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:2:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=377&cHash=e00ac666f3";}s:11:"other_index";a:2:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=377&cHash=e00ac666f3 ";}}}s:3:"DAT";a:11:{i:1;a:8:{s:6:"header";s:49:"class tslib_gifBuilder extends t3lib_stdGraphic {";s:5:"class";i:1;s:11:"parentClass";s:16:"tslib_gifBuilder";s:4:"cDat";a:5:{s:4:"text";s:1109:"

GIFBUILDER extension class.
This class allows for advanced rendering of images with various layers of images, text and graphical primitives.
The concept is known from TypoScript as "GIFBUILDER" where you can define a "numerical array" (TypoScript term as well) of "GIFBUILDER OBJECTS" (like "TEXT", "IMAGE", etc.) and they will be rendered onto an image one by one.
The name "GIFBUILDER" comes from the time where GIF was the only file format supported. PNG is just as well to create today (configured with TYPO3_CONF_VARS[GFX])
Not all instances of this class is truely building gif/png files by layers; You may also see the class instantiated for the purpose of using the scaling functions in the parent class, t3lib_stdGraphic.

Here is an example of how to use this class (from tslib_content.php, function getImgResource):

$gifCreator = t3lib_div::makeInstance('tslib_gifbuilder');
$gifCreator->init();
$theImage='';
if ($GLOBALS['TYPO3_CONF_VARS']['GFX']['gdlib'])	{
$gifCreator->start($fileArray,$this->data);
$theImage = $gifCreator->gifBuild();
}
return $gifCreator->getImageDimensions($theImage);
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:2:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=377&cHash=e00ac666f3";}s:11:"other_index";a:2:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=377&cHash=e00ac666f3 ";}}}s:7:"content";a:2:{i:0;s:467:"
		// Internal
	var $im = '';		// the main image
	var $w = 0;			// the image-width
	var $h = 0;			// the image-height
	var $map;			// map-data
	var $workArea;
	var $setup = Array ();		// This holds the operational setup for gifbuilder. Basically this is a TypoScript array with properties.
	var $data = Array();		// This is the array from which data->field: [key] is fetched. So this is the current record!
	var $objBB = Array();
	var $myClassName = 'gifbuilder';
	
	";i:1;i:-1;}s:12:"content_size";i:467;s:13:"content_lines";i:12;s:6:"atLine";i:101;}i:3;a:7:{s:6:"header";s:29:"function start($conf,$data)	{";s:11:"parentClass";s:16:"tslib_gifBuilder";s:4:"cDat";a:5:{s:4:"text";s:595:"

Initialization of the GIFBUILDER objects, in particular TEXT and IMAGE. This includes finding the bounding box, setting dimensions and offset values before the actual rendering is started.
Modifies the ->setup, ->objBB internal arrays
Should be called after the ->init() function which initializes the parent class functions/variables in general.
The class tslib_gmenu also uses gifbuilder and here there is an interesting use since the function findLargestDims() from that class calls the init() and start() functions to find the total dimensions before starting the rendering of the images.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:91:"TypoScript properties for the GIFBUILDER session. Stored internally in the variable ->setup";}i:1;a:2:{i:0;s:5:"array";i:1;s:81:"The current data record from tslib_cObj. Stored internally in the variable ->data";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:90:"@see tslib_cObj::getImgResource(), tslib_gmenu::makeGifs(), tslib_gmenu::findLargestDims()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:85:"tslib_cObj::getImgResource(), tslib_gmenu::makeGifs(), tslib_gmenu::findLargestDims()";}}}s:7:"content";a:2:{i:0;s:507:"	
		if (is_array($conf))	{
			$this->setup = $conf;
			$this->data = $data;

				// Getting sorted list of TypoScript keys from setup.
			$sKeyArray=t3lib_TStemplate::sortedKeyList($this->setup);

				// Setting the background color, passing it through stdWrap
			if ($conf['backColor.'] || $conf['backColor'])	{
				$cObj =t3lib_div::makeInstance('tslib_cObj');
				$cObj->s
[...]
]);	// this sets the workArea
			$this->defaultWorkArea = $this->workArea;	// this sets the default to the current;
		}
	}

	";i:1;i:1;}s:12:"content_size";i:5134;s:13:"content_lines";i:139;s:6:"atLine";i:125;}i:5;a:7:{s:6:"header";s:21:"function gifBuild()	{";s:11:"parentClass";s:16:"tslib_gifBuilder";s:4:"cDat";a:5:{s:4:"text";s:286:"

Initiates the image file generation if ->setup is true and if the file did not exist already.
Gets filename from fileName() and if file exists in typo3temp/ dir it will - of course - not be rendered again.
Otherwise rendering means calling ->make(), then ->output(), then ->destroy()
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:78:"The filename for the created GIF/PNG file. The filename will be prefixed "GB_"";}s:5:"other";a:1:{i:0;s:23:"@see make(), fileName()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:18:"make(), fileName()";}}}s:7:"content";a:2:{i:0;s:230:"		if ($this->setup)	{
			$gifFileName = $this->fileName('GB_');
			if (!@file_exists($gifFileName))	{		// File exists
				$this->make();
				$this->output($gifFileName);
				$this->destroy();
			}
			return $gifFileName;
		}
	}

	";i:1;i:0;}s:12:"content_size";i:230;s:13:"content_lines";i:11;s:6:"atLine";i:273;}i:7;a:7:{s:6:"header";s:17:"function make()	{";s:11:"parentClass";s:16:"tslib_gifBuilder";s:4:"cDat";a:6:{s:4:"text";s:272:"

The actual rendering of the image file.
Basically sets the dimensions, the background color, the traverses the array of GIFBUILDER objects and finally setting the transparent color if defined.
Creates a GDlib resource in $this->im and works on that
Called by gifBuild()
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:2:{i:0;s:15:"@see gifBuild()";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=378&cHash=3c2ae4a1ab";}s:11:"other_index";a:2:{s:4:"@see";a:1:{i:0;s:11:"gifBuild() ";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=378&cHash=3c2ae4a1ab ";}}}s:7:"content";a:2:{i:0;s:507:"			// Get trivial data
		$XY = $this->XY;

			// Gif-start
		$this->im = imagecreate($XY[0],$XY[1]);
		$this->w = $XY[0];
		$this->h = $XY[1];

			// backColor is set
		$cols=$this->convertColor($this->setup['backColor']);		
		ImageColorAllocate($this->im, $cols[0],$cols[1],$cols[2]);

			// Traverse the GIFBUILDER objects an render each one:
		if (is_array($this->setup))	
[...]
**********************************
	 *
	 * Various helper functions
	 *
	 ********************************************/
	
	
	";i:1;i:1;}s:12:"content_size";i:4121;s:13:"content_lines";i:134;s:6:"atLine";i:296;}i:9;a:8:{s:6:"header";s:31:"function checkTextObj ($conf)	{";s:11:"parentClass";s:16:"tslib_gifBuilder";s:11:"sectionText";a:1:{i:0;s:24:"Various helper functions";}s:4:"cDat";a:4:{s:4:"text";s:259:"

Initializing/Cleaning of TypoScript properties for TEXT GIFBUILDER objects

'cleans' TEXT-object; Checks fontfile and other vital setup
Finds the title if its a 'variable' (instantiates a cObj and loads it with the ->data record)
Performs caseshift if any.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:39:"GIFBUILDER object TypoScript properties";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:56:"Modified $conf array IF the "text" property is not blank";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"		$conf['fontFile']=$this->checkFile($conf['fontFile']);
		if (!$conf['fontFile']){$conf['fontFile']='t3lib/fonts/arial.ttf';}
		if (!$conf['iterations']){$conf['iterations'] = 1;}
		if (!$conf['fontSize']){$conf['fontSize']=12;}
		if ($conf['spacing'] || $conf['wordSpacing'])	{		// If any kind of spacing applys, we cannot use angles!!
			$conf['angle']=0;
		}
		if (!isset
[...]
ngth']) : 100;
		$conf['text'] = substr($conf['text'],0,$tlen);
		if ((string)$conf['text']!='')	{
			return $conf;
		}
	}

	";i:1;i:1;}s:12:"content_size";i:875;s:13:"content_lines";i:24;s:6:"atLine";i:442;}i:11;a:7:{s:6:"header";s:33:"function setWorkArea($workArea)	{";s:11:"parentClass";s:16:"tslib_gifBuilder";s:4:"cDat";a:4:{s:4:"text";s:56:"

Setting internal working area boundaries (->workArea)
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:40:"Working area dimensions, comma separated";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:250:"		$this->workArea = t3lib_div::intExplode(',',$workArea);
		$this->workArea = $this->applyOffset($this->workArea,$this->OFFSET);
		if (!$this->workArea[2])	{$this->workArea[2]=$this->w;}
		if (!$this->workArea[3])	{$this->workArea[3]=$this->h;}
	}

	";i:1;i:0;}s:12:"content_size";i:250;s:13:"content_lines";i:6;s:6:"atLine";i:474;}i:13;a:7:{s:6:"header";s:30:"function calcOffset($string)	{";s:11:"parentClass";s:16:"tslib_gifBuilder";s:4:"cDat";a:4:{s:4:"text";s:230:"

Calculation of offset using "splitCalc" and insertion of dimensions from other GIFBUILDER objects.

Example:
Input: 2+2, 2*3, 123, [10.w]
Output: 4,6,123,45  (provided that the width of object in position 10 was 45 pixels wide)
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:140:"The string to resolve/calculate the result of. The string is divided by a comma first and each resulting part is calculated into an integer.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:83:"The resolved string with each part (separated by comma) returned separated by comma";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"		$numbers=explode(',',$string);
		while(list($key,$val)=each($numbers))	{
			$val = trim($val);
			if ((string)$val==(string)intval($val)) {
				$value[$key]=intval($val);
			} else {
				$parts= t3lib_div::splitCalc($val,'+-*/%');
				$value[$key]=0;
				reset($parts);
				while(list(,$part)=each($parts))	{
					$theVal = $part[1];
					$sign =  $part[0];
					if ((strin
[...]
val($theVal);}
				}
				$value[$key]=intval($value[$key]);
			}
		}
		$string = implode($value,',');
		return $string;
	}

	";i:1;i:1;}s:12:"content_size";i:1220;s:13:"content_lines";i:37;s:6:"atLine";i:492;}i:15;a:7:{s:6:"header";s:40:"function getResource($file,$fileArray)	{";s:11:"parentClass";s:16:"tslib_gifBuilder";s:4:"cDat";a:6:{s:4:"text";s:111:"

Returns an "imgResource" creating an instance of the tslib_cObj class and calling tslib_cObj::getImgResource
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:109:"Filename value OR the string "GIFBUILDER", see documentation in TSref for the "datatype" called "imgResource"";}i:1;a:2:{i:0;s:5:"array";i:1;s:184:"TypoScript properties passed to the function. Either GIFBUILDER properties or imgResource properties, depending on the value of $file (whether that is "GIFBUILDER" or a file reference)";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:81:"Returns an array with file information if an image was returned. Otherwise false.";}s:6:"access";s:7:"private";s:5:"other";a:3:{i:0;s:33:"@see tslib_cObj::getImgResource()";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=315&cHash=63b593a934";i:2;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=282&cHash=831a95115d";}s:11:"other_index";a:2:{s:4:"@see";a:1:{i:0;s:29:"tslib_cObj::getImgResource() ";}s:5:"@link";a:2:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=315&cHash=63b593a934 ";i:1;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=282&cHash=831a95115d ";}}}s:7:"content";a:2:{i:0;s:174:"		$fileArray['ext']= $this->gifExtension;
		$cObj =t3lib_div::makeInstance('tslib_cObj');
		$cObj->start($this->data);
		return $cObj->getImgResource($file,$fileArray);
	}

	";i:1;i:0;}s:12:"content_size";i:174;s:13:"content_lines";i:6;s:6:"atLine";i:541;}i:17;a:7:{s:6:"header";s:27:"function checkFile($file)	{";s:11:"parentClass";s:16:"tslib_gifBuilder";s:4:"cDat";a:6:{s:4:"text";s:55:"

Returns the reference to a "resource" in TypoScript.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:19:"The resource value.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"Returns the relative filepath";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:36:"@see t3lib_TStemplate::getFileName()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:32:"t3lib_TStemplate::getFileName() ";}}}s:7:"content";a:2:{i:0;s:58:"		return $GLOBALS['TSFE']->tmpl->getFileName($file);
	}

	";i:1;i:0;}s:12:"content_size";i:58;s:13:"content_lines";i:3;s:6:"atLine";i:556;}i:19;a:4:{s:6:"header";s:25:"function fileName($pre)	{";s:11:"parentClass";s:16:"tslib_gifBuilder";s:4:"cDat";a:4:{s:4:"text";s:100:"

Calculates the GIFBUILDER output filename/path based on a serialized, hashed value of this->setup
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:26:"Filename prefix, eg. "GB_"";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:21:"The relative filepath";}s:6:"access";s:7:"private";}s:6:"atLine";i:567;}i:21;a:7:{s:6:"header";s:22:"function extension() {";s:11:"parentClass";s:16:"tslib_gifBuilder";s:4:"cDat";a:4:{s:4:"text";s:50:"

Returns the file extension used in the filename
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:31:"Extension; "jpg" or "gif"/"png"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:374:"		switch(strtolower($this->setup['format']))	{
			case 'jpg':
			case 'jpeg':
				return 'jpg';
			break;
			default:
				return $this->gifExtension;
			break;
		}
	}
}


if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/class.tslib_gifbuilder.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/class.tslib_gifbuilder.php']);
}

?>";i:1;i:0;}s:12:"content_size";i:374;s:13:"content_lines";i:17;s:6:"atLine";i:577;}}}s:26:"tslib/class.tslib_menu.php";a:3:{s:8:"filesize";i:87743;s:6:"header";a:5:{s:4:"text";s:556:"

Base class. The HMENU content object uses this (or more precisely one of the extension classes).
Amoung others the class generates an array of menuitems. Thereafter functions from the subclasses are called.
The class is ALWAYS used through extension classes (like tslib_gmenu or tslib_tmenu which are classics) and

Example of usage (from tslib_cObj):

$menu = t3lib_div::makeInstance('tslib_'.$cls);
$menu->parent_cObj = $this;
$menu->start($GLOBALS['TSFE']->tmpl,$GLOBALS['TSFE']->sys_page,'',$conf,1);
$menu->makeMenu();
$content.=$menu->writeMenu();
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:4:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:17:"@subpackage tslib";i:3;s:24:"@see tslib_cObj::HMENU()";}s:11:"other_index";a:4:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:6:"tslib ";}s:4:"@see";a:1:{i:0;s:20:"tslib_cObj::HMENU() ";}}}s:3:"DAT";a:46:{i:1;a:8:{s:6:"header";s:18:"class tslib_menu {";s:5:"class";i:1;s:11:"parentClass";s:10:"tslib_menu";s:4:"cDat";a:5:{s:4:"text";s:556:"

Base class. The HMENU content object uses this (or more precisely one of the extension classes).
Amoung others the class generates an array of menuitems. Thereafter functions from the subclasses are called.
The class is ALWAYS used through extension classes (like tslib_gmenu or tslib_tmenu which are classics) and

Example of usage (from tslib_cObj):

$menu = t3lib_div::makeInstance('tslib_'.$cls);
$menu->parent_cObj = $this;
$menu->start($GLOBALS['TSFE']->tmpl,$GLOBALS['TSFE']->sys_page,'',$conf,1);
$menu->makeMenu();
$content.=$menu->writeMenu();
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:4:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:17:"@subpackage tslib";i:3;s:24:"@see tslib_cObj::HMENU()";}s:11:"other_index";a:4:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:6:"tslib ";}s:4:"@see";a:1:{i:0;s:20:"tslib_cObj::HMENU() ";}}}s:7:"content";a:2:{i:0;s:1141:"	var $menuNumber = 1;				// tells you which menu-number this is. This is important when getting data from the setup
	var $entryLevel = 0;				// 0 = rootFolder
	var $subLevelClass = '';			// Points to the menu-class, that should be used for the next level
	var $spacerIDList = '199';			// The doktype-number that defines a spacer
	var $imgNamePrefix = 'img';
	var $imgNameNotRandom=0;
	var $debug = 0;
	var $parent_cObj ='';				// Loaded with the parent cObj-object when a new HMENU is made
	var $GMENU_fixKey='gmenu';
	var $MP_array=array();				// accumulation of mount point data
	
		// internal
	var $conf = Array();
	var $mconf = Array();
	var $tmpl;		// template-object
	var $sys_page;	// sys_page-object
	var $id;			// the base-id of the menu. 
	var $nextActive;
	var $menuNumber;
	var $menuArr;	// The array of menuItems which is built
	var $hash;
	var $result = Array();
	var $rL_uidList;		// Is filled with a list of page uid numbers which are in the current root line (used to evaluate whether a menu item is in active state)
	var $INPfixMD5;
	var $I;
	var $WMresult;
	var $WMfreezePrefix;
	var $WMmenuItems;
	var $WMextraScript;

	";i:1;i:-1;}s:12:"content_size";i:1141;s:13:"content_lines";i:30;s:6:"atLine";i:139;}i:3;a:7:{s:6:"header";s:55:"function start($tmpl,$sys_page,$id,$conf,$menuNumber)	{";s:11:"parentClass";s:10:"tslib_menu";s:4:"cDat";a:5:{s:4:"text";s:76:"

The initialization of the object. This just sets some internal variables.
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"object";i:1;s:33:"The $GLOBALS['TSFE']->tmpl object";}i:1;a:2:{i:0;s:6:"object";i:1;s:37:"The $GLOBALS['TSFE']->sys_page object";}i:2;a:2:{i:0;s:7:"integer";i:1;s:103:"A starting point page id. This should probably be blank since the 'entryLevel' value will be used then.";}i:3;a:2:{i:0;s:5:"Array";i:1;s:50:"The TypoScript configuration for the HMENU cObject";}i:4;a:2:{i:0;s:7:"integer";i:1;s:42:"Menu number; 1,2,3. Should probably be '1'";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:23:"Returns true on success";}s:5:"other";a:1:{i:0;s:24:"@see tslib_cObj::HMENU()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:20:"tslib_cObj::HMENU() ";}}}s:7:"content";a:2:{i:0;s:507:"		$this->conf = $conf;
		$this->mconf = $conf[$menuNumber.'.'];
		$this->debug=$GLOBALS['TSFE']->debug;

			// Sets the internal vars. $tmpl MUST be the template-object. $sys_page MUST be the sys_page object
		if ($this->conf[$menuNumber] && is_object($tmpl) && is_object($sys_page))	{
			$this->tmpl = $tmpl;
			$this->sys_page = $sys_page;

				// EntryLevel
			$this->entr
[...]
Val = true;
		} else {
			$GLOBALS['TT']->setTSlogMessage('ERROR in menu',3);
			$retVal = false;
		}
		return $retVal;
	}

	";i:1;i:1;}s:12:"content_size";i:1382;s:13:"content_lines";i:41;s:6:"atLine";i:181;}i:5;a:7:{s:6:"header";s:21:"function makeMenu()	{";s:11:"parentClass";s:10:"tslib_menu";s:4:"cDat";a:3:{s:4:"text";s:346:"

Creates the menu in the internal variables, ready for output.
Basically this will read the page records needed and fill in the internal $this->menuArr
Based on a hash of this array and some other variables the $this->result variable will be loaded either from cache OR by calling the generate() method of the class to create the menu for real.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		if ($this->id)	{
			$temp = array();
			$altSortFieldValue = trim($this->mconf['alternativeSortingField']);
			$altSortField = $altSortFieldValue ? $altSortFieldValue : 'sorting';
			if ($this->menuNumber==1 && $this->conf['special'])	{
				$value = $this->conf['special.']['value'];

				switch($this->conf['special'])	{
					case 'userdefined':
						$temp = $this->inclu
[...]
reHash($this->hash, serialize($this->result),'MENUDATA');
			} else {
				$this->result=unserialize($serData);
			}
		}
	}

	";i:1;i:1;}s:12:"content_size";i:16390;s:13:"content_lines";i:422;s:6:"atLine";i:230;}i:7;a:7:{s:6:"header";s:47:"function includeMakeMenu($conf,$altSortField)	{";s:11:"parentClass";s:10:"tslib_menu";s:4:"cDat";a:4:{s:4:"text";s:357:"

Includes the PHP script defined for the HMENU special type "userdefined".
This script is supposed to populate the array $menuItemsArray with a set of page records comprising the menu.
The "userdefined" type is depreciated since "userfunction" has arrived since and is a better choice for many reasons (like using classes/functions for rendering the menu)
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:182:"TypoScript parameters for "special.". In particular the property "file" is reserved and specifies the file to include. Seems like any other property can be used freely by the script.";}i:1;a:2:{i:0;s:6:"string";i:1;s:63:"The sorting field. Can be used from the script in the $incFile.";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:28:"An array with the menu items";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:226:"		$incFile = $GLOBALS['TSFE']->tmpl->getFileName($conf['file']);
		if ($incFile && $GLOBALS['TSFE']->checkFileInclude($incFile))	{
			include($incFile);
		}
		return is_array($menuItemsArray) ? $menuItemsArray : array();
	}

	";i:1;i:0;}s:12:"content_size";i:226;s:13:"content_lines";i:7;s:6:"atLine";i:663;}i:9;a:7:{s:6:"header";s:40:"function procesItemStates($splitCount)	{";s:11:"parentClass";s:10:"tslib_menu";s:4:"cDat";a:4:{s:4:"text";s:706:"

Generating the per-menu-item configuration arrays based on the settings for item states (NO, RO, ACT, CUR etc) set in ->mconf (config for the current menu object)
Basically it will produce an individual array for each menu item based on the item states. BUT in addition the "optionSplit" syntax for the values is ALSO evaluated here so that all property-values are "option-splitted" and the output will thus be resolved.
Is called from the "generate" functions in the extension classes. The function is processor intensive due to the option split feature in particular. But since the generate function is not always called (since the ->result array may be cached, see makeMenu) it doesn't hurt so badly.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:32:"Number of menu items in the menu";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:197:"An array with two keys: array($NOconf,$ROconf) - where $NOconf contains the resolved configuration for each item when NOT rolled-over and $ROconf contains the ditto for the mouseover state (if any)";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"			// Prepare normal settings
		$NOconf = $this->tmpl->splitConfArray($this->mconf['NO.'],$splitCount);
			// Prepare rollOver settings, overriding normal settings
		$ROconf=array();
		if ($this->mconf['RO'])	{
			$ROconf = $this->tmpl->splitConfArray($this->mconf['RO.'],$splitCount);
		}

			// Prepare IFSUB settings, overriding normal settings
			// IFSUB is true if ther
[...]
USERDEF2conf[$key];		// If RollOver on active then apply this
					}
				}
			}
		}
		
		return array($NOconf,$ROconf);
	}

	";i:1;i:1;}s:12:"content_size";i:7950;s:13:"content_lines";i:174;s:6:"atLine";i:680;}i:11;a:7:{s:6:"header";s:39:"function subMenu($uid,$mount_point=0)	{";s:11:"parentClass";s:10:"tslib_menu";s:4:"cDat";a:4:{s:4:"text";s:68:"

Creates a submenu level to the current level - if configured for.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:87:"Page id of the current page for which a submenu MAY be produced (if conditions are met)";}i:1;a:2:{i:0;s:7:"integer";i:1;s:82:"Mount-point UID (basically the mount_pid field of the page record is passed along)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:27:"HTML content of the submenu";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"			// starts a submenu...
		if ($GLOBALS['TYPO3_CONF_VARS']['FE']['enable_mount_pids'] && $mount_point>0)	{
			$MP=$mount_point.'-'.$uid;
			$uid=$mount_point;
		} else $MP=0;

		if ($this->subLevelClass && ($this->mconf['expAll'] || $uid==$this->nextActive) && !$this->mconf['sectionIndex'])	{
			$submenu = t3lib_div::makeInstance('tslib_'.$this->subLevelClass);
			$submen
[...]
pl,$this->sys_page,$uid,$this->conf,$this->menuNumber+1);
			$submenu->makeMenu();
			return $submenu->writeMenu();
		}
	}

	";i:1;i:1;}s:12:"content_size";i:762;s:13:"content_lines";i:21;s:6:"atLine";i:863;}i:13;a:7:{s:6:"header";s:52:"function link($key,$altTarget='',$typeOverride='') {";s:11:"parentClass";s:10:"tslib_menu";s:4:"cDat";a:4:{s:4:"text";s:136:"

Creates the URL, target and onclick values for the menu item link. Returns them in an array as key/value pairs for <A>-tag attributes
";s:5:"param";a:3:{i:0;a:2:{i:0;s:7:"integer";i:1;s:130:"Pointer to a key in the $this->menuArr array where the value for that key represents the menu item we are linking to (page record)";}i:1;a:2:{i:0;s:6:"string";i:1;s:18:"Alternative target";}i:2;a:2:{i:0;s:7:"integer";i:1;s:16:"Alternative type";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:84:"Returns an array with A-tag attributes as key/value pairs (HREF, TARGET and onClick)";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"			// this function doesn't care about the url, because if we let the url be redirected, it will be logged in the stat!!!
		if ($this->mconf['overrideId'] || $this->menuArr[$key]['overrideId'])	{	// RF 22/10
			$overrideArray = array();
				// if a user script returned the value overrideId in the menu array we use that as page id
			$overrideArray['uid'] = $this->mconf['ov
[...]
ay();
		$list['HREF']=$LD['totalURL'];
		$list['TARGET']=$LD['target'];
		$list['onClick']=$onClick;
		
		return $list;
	}

	";i:1;i:1;}s:12:"content_size";i:1804;s:13:"content_lines";i:40;s:6:"atLine";i:894;}i:15;a:7:{s:6:"header";s:25:"function isActive($uid)	{";s:11:"parentClass";s:10:"tslib_menu";s:4:"cDat";a:4:{s:4:"text";s:77:"

Returns true if the page with UID $uid is active (in the current rootline)
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:21:"Page uid to evaluate.";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:32:"True if page with $uid is active";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:66:"		if (t3lib_div::inList($this->rL_uidList,$uid))	{return 1;}
	}

	";i:1;i:0;}s:12:"content_size";i:66;s:13:"content_lines";i:3;s:6:"atLine";i:942;}i:17;a:7:{s:6:"header";s:26:"function isCurrent($uid)	{";s:11:"parentClass";s:10:"tslib_menu";s:4:"cDat";a:4:{s:4:"text";s:91:"

Returns true if the page with UID $uid is the CURRENT page (equals $GLOBALS['TSFE']->id)
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:21:"Page uid to evaluate.";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:40:"True if page $uid = $GLOBALS['TSFE']->id";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:51:"		if ($GLOBALS['TSFE']->id==$uid)	{return 1;}
	}

	";i:1;i:0;}s:12:"content_size";i:51;s:13:"content_lines";i:3;s:6:"atLine";i:953;}i:19;a:7:{s:6:"header";s:41:"function isSubMenu($uid,$mount_point=0)	{";s:11:"parentClass";s:10:"tslib_menu";s:4:"cDat";a:4:{s:4:"text";s:148:"

Returns true if there is a submenu with items for the page id, $uid
Used by the item states "IFSUB" and "ACTIFSUB" to check if there is a submenu
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:42:"Page uid for which to search for a submenu";}i:1;a:2:{i:0;s:7:"integer";i:1;s:102:""mount_pid" field for the page record which is evaluated (this may affect whether a submenu is found!)";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:52:"Returns true if there was a submenu with items found";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:456:"		if ($GLOBALS['TYPO3_CONF_VARS']['FE']['enable_mount_pids'] && $mount_point>0)	{$uid=$mount_point;}

		$recs = $this->sys_page->getMenu($uid,'doktype,uid');		
		reset($recs);
		$flag=0;	// No menu by default;
		while(list(,$theRec)=each($recs))	{
			if (!t3lib_div::inList('5,6',$theRec['doktype']))	{	// If a menu item seems to be another type than 'Not in menu', then return true (there was items!)
				$flag=1;
				break;
			}
		}
		return $flag;
	}

	";i:1;i:0;}s:12:"content_size";i:456;s:13:"content_lines";i:14;s:6:"atLine";i:966;}i:21;a:7:{s:6:"header";s:34:"function isItemState($kind,$key)	{";s:11:"parentClass";s:10:"tslib_menu";s:4:"cDat";a:6:{s:4:"text";s:100:"

Used by procesItemStates() to evaluate if a menu item (identified by $key) is in a certain state.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:81:"The item state to evaluate (SPC, IFSUB, ACT etc... but no xxxRO states of course)";}i:1;a:2:{i:0;s:7:"integer";i:1;s:40:"Key pointing to menu item from ->menuArr";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:54:"True (integer!=0) if match, otherwise false (=0, zero)";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:23:"@see procesItemStates()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:19:"procesItemStates() ";}}}s:7:"content";a:2:{i:0;s:507:"		$natVal=0;
		if ($this->menuArr[$key]['ITEM_STATE'])	{		// If any value is set for ITEM_STATE the normal evaluation is discarded
			if (!strcmp($this->menuArr[$key]['ITEM_STATE'],$kind))	{$natVal=1;}
		} else {
			switch($kind)	{
				case 'SPC':
					$natVal = $this->menuArr[$key]['isSpacer'];
				break;
				case 'IFSUB':
					$natVal = $this->isSubMenu($this->menuArr[$k
[...]
d']);
				break;
				case 'USR':
					$natVal = $this->menuArr[$key]['fe_group'];
				break;
			}
		}
		return $natVal;
	}

	";i:1;i:1;}s:12:"content_size";i:898;s:13:"content_lines";i:28;s:6:"atLine";i:990;}i:23;a:7:{s:6:"header";s:28:"function accessKey($title)	{";s:11:"parentClass";s:10:"tslib_menu";s:4:"cDat";a:4:{s:4:"text";s:89:"

Creates an access-key for a GMENU menu item based on the menu item titles first letter
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:16:"Menu item title.";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:178:"Returns an array with keys "code" ("accesskey" attribute for the img-tag) and "alt" (text-addition to the "alt" attribute) if an access key was defined. Otherwise array was empty";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:458:"			// The global array ACCESSKEY is used to globally control if letters are already used!!
		$result = Array();
	
		$titleLen = strlen($title);
		for ($a=0;$a<$titleLen;$a++)	{
			$key = strtoupper(trim(substr($title,$a,1)));
			if ($key && !isset($GLOBALS['TSFE']->accessKey[$key]))	{
				$GLOBALS['TSFE']->accessKey[$key]=1;
				$result['code'] = ' accesskey="'.$key.'"';
				$result['alt'] = ' (ALT+'.$key.')';
				break;	
			}
		}
		return $result;
	}

	";i:1;i:0;}s:12:"content_size";i:458;s:13:"content_lines";i:16;s:6:"atLine";i:1026;}i:25;a:7:{s:6:"header";s:42:"function userProcess($mConfKey,$passVar)	{";s:11:"parentClass";s:10:"tslib_menu";s:4:"cDat";a:4:{s:4:"text";s:117:"

Calls a user function for processing of internal data.
Used for the properties "IProcFunc" and "itemArrayProcFunc"
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:189:"Key pointing for the property in the current ->mconf array holding possibly parameters to pass along to the function/method. Currently the keys used are "IProcFunc" and "itemArrayProcFunc".";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:303:"A variable to pass to the user function and which should be returned again from the user function. The idea is that the user function modifies this variable according to what you want to achieve and then returns it. For "itemArrayProcFunc" this variable is $this->menuArr, for "IProcFunc" it is $this->I";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:22:"The processed $passVar";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:241:"		if ($this->mconf[$mConfKey])	{
			$funcConf = $this->mconf[$mConfKey.'.'];
			$funcConf['parentObj']=&$this;
			$passVar = $GLOBALS['TSFE']->cObj->callUserFunction($this->mconf[$mConfKey], $funcConf, $passVar);
		}
		return $passVar;
	}

	";i:1;i:0;}s:12:"content_size";i:241;s:13:"content_lines";i:8;s:6:"atLine";i:1052;}i:27;a:7:{s:6:"header";s:25:"function setATagParts()	{";s:11:"parentClass";s:10:"tslib_menu";s:4:"cDat";a:4:{s:4:"text";s:147:"

Creates the <A> tag parts for the current item (in $this->I, [A1] and [A2]) based on other information in this array (like $this->I['linkHREF'])
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:197:"		$this->I['A1'] = '<a '.t3lib_div::implodeParams($this->I['linkHREF'],1).$this->I['val']['ATagParams'].$this->I['addATagParams'].$this->I['accessKey']['code'].'>';
		$this->I['A2'] = '</a>';
	}

	";i:1;i:0;}s:12:"content_size";i:197;s:13:"content_lines";i:4;s:6:"atLine";i:1067;}i:29;a:7:{s:6:"header";s:42:"function getPageTitle($title,$nav_title)	{";s:11:"parentClass";s:10:"tslib_menu";s:4:"cDat";a:4:{s:4:"text";s:39:"

Returns the title for the navigation
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:22:"The current page title";}i:1;a:2:{i:0;s:6:"string";i:1;s:40:"The current value of the naviation title";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:74:"Returns the navigation title if it is NOT blank, otherwise the page title.";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:84:"		return strcmp(trim($nav_title),'') ? $nav_title : $title;
	}
}



















";i:1;i:0;}s:12:"content_size";i:84;s:13:"content_lines";i:22;s:6:"atLine";i:1080;}i:31;a:8:{s:6:"header";s:38:"class tslib_tmenu extends tslib_menu {";s:5:"class";i:1;s:11:"parentClass";s:11:"tslib_tmenu";s:4:"cDat";a:5:{s:4:"text";s:44:"

Extension class creating text based menus
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:4:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:17:"@subpackage tslib";i:3;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=387&cHash=73a3116ab8";}s:11:"other_index";a:4:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:6:"tslib ";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=387&cHash=73a3116ab8 ";}}}s:7:"content";a:2:{i:0;s:2:"
	";i:1;i:-1;}s:12:"content_size";i:2;s:13:"content_lines";i:1;s:6:"atLine";i:1111;}i:33;a:7:{s:6:"header";s:21:"function generate()	{";s:11:"parentClass";s:11:"tslib_tmenu";s:4:"cDat";a:5:{s:4:"text";s:192:"

Calls procesItemStates() so that the common configuration for the menu items are resolved into individual configuration per item.
Sets the result for the new "normal state" in $this->result
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"Void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:35:"@see tslib_menu::procesItemStates()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:31:"tslib_menu::procesItemStates() ";}}}s:7:"content";a:2:{i:0;s:235:"		$splitCount = count($this->menuArr);
		if ($splitCount)	{
			list($NOconf) = $this->procesItemStates($splitCount);
		}
		if ($this->mconf['debugItemConf'])	{echo '<h3>$NOconf:</h3>';	debug($NOconf);	}
		$this->result = $NOconf;
	}

	";i:1;i:0;}s:12:"content_size";i:235;s:13:"content_lines";i:8;s:6:"atLine";i:1120;}i:35;a:7:{s:6:"header";s:22:"function writeMenu()	{";s:11:"parentClass";s:11:"tslib_tmenu";s:4:"cDat";a:3:{s:4:"text";s:540:"

Traverses the ->result array of menu items configuration (made by ->generate()) and renders each item.
During the execution of this function many internal methods prefixed "extProc_" from this class is called and many of these are for now dummy functions. But they can be used for processing as they are used by the TMENU_LAYERS
An instance of tslib_cObj is also made and for each menu item rendered it is loaded with the record for that page so that any stdWrap properties that applies will have the current menu items record available.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:72:"The HTML for the menu (returns result through $this->extProc_finish(); )";}}s:7:"content";a:2:{i:0;s:507:"		if (is_array($this->result) && count($this->result))	{
			$this->WMcObj =t3lib_div::makeInstance('tslib_cObj');	// Create new tslib_cObj for our use
			$this->WMresult='';
			$this->INPfixMD5 = substr(md5(microtime().'tmenu'),0,4);
			$this->WMmenuItems = count($this->result);
			$this->extProc_init();
			reset($this->result);
			while (list($key,$val)=each($this->result
[...]
// Calling extra processing function
				$this->extProc_afterLinking($key);
			}
			return $this->extProc_finish();
		}
	}

	";i:1;i:1;}s:12:"content_size";i:5247;s:13:"content_lines";i:122;s:6:"atLine";i:1136;}i:37;a:7:{s:6:"header";s:32:"function getBeforeAfter($pref)	{";s:11:"parentClass";s:11:"tslib_tmenu";s:4:"cDat";a:5:{s:4:"text";s:53:"

Generates the before* and after* images for TMENUs
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:170:"Can be "before" or "after" and determines which kind of image to create (basically this is the prefix of the TypoScript properties that are read from the ->I['val'] array";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:40:"The resulting HTML of the image, if any.";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=388&cHash=a7486044cd";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=388&cHash=a7486044cd ";}}}s:7:"content";a:2:{i:0;s:507:"		$res = '';
		if ($imgInfo = $this->WMcObj->getImgResource($this->I['val'][$pref.'Img'],$this->I['val'][$pref.'Img.']))	{
			$imgInfo[3] = t3lib_div::png_to_gif_by_imagemagick($imgInfo[3]);
			if ($this->I['val']['RO'] && $this->I['val'][$pref.'ROImg'] && !$this->I['val']['isSpacer'])	{
				$imgROInfo = $this->WMcObj->getImgResource($this->I['val'][$pref.'ROImg'],$this->I
[...]
l->wrap($res.$this->WMcObj->stdWrap($this->I['val'][$pref],$this->I['val'][$pref.'.']), $this->I['val'][$pref.'Wrap']);
	}

	";i:1;i:1;}s:12:"content_size";i:1514;s:13:"content_lines";i:22;s:6:"atLine";i:1266;}i:39;a:7:{s:6:"header";s:36:"function addJScolorShiftFunction()	{";s:11:"parentClass";s:11:"tslib_tmenu";s:4:"cDat";a:6:{s:4:"text";s:81:"

Adds a JavaScript function to the $GLOBALS['TSFE']->additionalJavaScript array
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:16:"@see writeMenu()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:12:"writeMenu() ";}}}s:7:"content";a:2:{i:0;s:67:"		$GLOBALS['TSFE']->additionalJavaScript['TMENU:changeBGcolor()']='";i:1;i:0;}s:12:"content_size";i:67;s:13:"content_lines";i:0;s:6:"atLine";i:1296;}i:41;a:6:{s:6:"header";s:34:"function changeBGcolor(id,color) {";s:11:"parentClass";s:11:"tslib_tmenu";s:7:"content";a:2:{i:0;s:291:"				if (document.getElementById && document.getElementById(id))	{
					document.getElementById(id).style.background = color;
					return true;
				} else if (document.layers && document.layers[id]) {
			        document.layers[id].bgColor = color;
					return true;
			    }
			}	
		';
	}

	";i:1;i:0;}s:12:"content_size";i:291;s:13:"content_lines";i:11;s:6:"atLine";i:1298;}i:43;a:7:{s:6:"header";s:25:"function extProc_init()	{";s:11:"parentClass";s:11:"tslib_tmenu";s:4:"cDat";a:6:{s:4:"text";s:101:"

Called right before the traversing of $this->result begins.
Can be used for various initialization
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:52:"@see writeMenu(), tslib_tmenu_layers::extProc_init()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:47:"writeMenu(), tslib_tmenu_layers::extProc_init()";}}}s:7:"content";a:2:{i:0;s:5:"	}

	";i:1;i:0;}s:12:"content_size";i:5;s:13:"content_lines";i:2;s:6:"atLine";i:1318;}i:45;a:7:{s:6:"header";s:27:"function extProc_RO($key)	{";s:11:"parentClass";s:11:"tslib_tmenu";s:4:"cDat";a:6:{s:4:"text";s:72:"

Called after all processing for RollOver of an element has been done.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:78:"Pointer to $this->menuArr[$key] where the current menu element record is found";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:50:"@see writeMenu(), tslib_tmenu_layers::extProc_RO()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:45:"writeMenu(), tslib_tmenu_layers::extProc_RO()";}}}s:7:"content";a:2:{i:0;s:5:"	}

	";i:1;i:0;}s:12:"content_size";i:5;s:13:"content_lines";i:2;s:6:"atLine";i:1329;}i:47;a:7:{s:6:"header";s:38:"function extProc_beforeLinking($key)	{";s:11:"parentClass";s:11:"tslib_tmenu";s:4:"cDat";a:6:{s:4:"text";s:65:"

Called right before the creation of the link for the menu item
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:78:"Pointer to $this->menuArr[$key] where the current menu element record is found";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:61:"@see writeMenu(), tslib_tmenu_layers::extProc_beforeLinking()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:56:"writeMenu(), tslib_tmenu_layers::extProc_beforeLinking()";}}}s:7:"content";a:2:{i:0;s:5:"	}

	";i:1;i:0;}s:12:"content_size";i:5;s:13:"content_lines";i:2;s:6:"atLine";i:1340;}i:49;a:7:{s:6:"header";s:37:"function extProc_afterLinking($key)	{";s:11:"parentClass";s:11:"tslib_tmenu";s:4:"cDat";a:6:{s:4:"text";s:296:"

Called right after the creation of links for the menu item. This is also the last function call before the while-loop traversing menu items goes to the next item.
This function MUST set $this->WMresult.=[HTML for menu item] to add the generated menu item to the internal accumulation of items.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:78:"Pointer to $this->menuArr[$key] where the current menu element record is found";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:60:"@see writeMenu(), tslib_tmenu_layers::extProc_afterLinking()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:55:"writeMenu(), tslib_tmenu_layers::extProc_afterLinking()";}}}s:7:"content";a:2:{i:0;s:328:"			// Add part to the accumulated result + fetch submenus
		if (!$this->I['spacer'])	{
			$this->I['theItem'].= $this->subMenu($this->I['uid'],$this->I['mount_pid']);
		}
		$this->WMresult.= $this->I['val']['wrapItemAndSub'] ? $this->tmpl->wrap($this->I['theItem'],$this->I['val']['wrapItemAndSub']) : $this->I['theItem'];
	}

	";i:1;i:0;}s:12:"content_size";i:328;s:13:"content_lines";i:7;s:6:"atLine";i:1352;}i:51;a:7:{s:6:"header";s:44:"function extProc_beforeAllWrap($item,$key)	{";s:11:"parentClass";s:11:"tslib_tmenu";s:4:"cDat";a:6:{s:4:"text";s:56:"

Called before the "allWrap" happens on the menu item.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:72:"The current content of the menu item, $this->I['theItem'], passed along.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:78:"Pointer to $this->menuArr[$key] where the current menu element record is found";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:66:"The modified version of $item, going back into $this->I['theItem']";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:61:"@see writeMenu(), tslib_tmenu_layers::extProc_beforeAllWrap()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:56:"writeMenu(), tslib_tmenu_layers::extProc_beforeAllWrap()";}}}s:7:"content";a:2:{i:0;s:21:"		return $item;
	}

	";i:1;i:0;}s:12:"content_size";i:21;s:13:"content_lines";i:3;s:6:"atLine";i:1369;}i:53;a:7:{s:6:"header";s:27:"function extProc_finish()	{";s:11:"parentClass";s:11:"tslib_tmenu";s:4:"cDat";a:6:{s:4:"text";s:80:"

Called before the writeMenu() function returns (only if a menu was generated)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:58:"The total menu content should be returned by this function";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:54:"@see writeMenu(), tslib_tmenu_layers::extProc_finish()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:49:"writeMenu(), tslib_tmenu_layers::extProc_finish()";}}}s:7:"content";a:2:{i:0;s:116:"		return $this->tmpl->wrap($this->WMresult,$this->mconf['wrap']).$this->WMextraScript;
	}
}
























";i:1;i:0;}s:12:"content_size";i:116;s:13:"content_lines";i:27;s:6:"atLine";i:1380;}i:55;a:8:{s:6:"header";s:38:"class tslib_gmenu extends tslib_menu {";s:5:"class";i:1;s:11:"parentClass";s:11:"tslib_gmenu";s:4:"cDat";a:5:{s:4:"text";s:66:"

Extension class creating graphic based menus (PNG or GIF files)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:4:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:17:"@subpackage tslib";i:3;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=384&cHash=93a7644cba";}s:11:"other_index";a:4:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:6:"tslib ";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=384&cHash=93a7644cba ";}}}s:7:"content";a:2:{i:0;s:2:"
	";i:1;i:-1;}s:12:"content_size";i:2;s:13:"content_lines";i:1;s:6:"atLine";i:1416;}i:57;a:7:{s:6:"header";s:21:"function generate()	{";s:11:"parentClass";s:11:"tslib_gmenu";s:4:"cDat";a:5:{s:4:"text";s:222:"

Calls procesItemStates() so that the common configuration for the menu items are resolved into individual configuration per item.
Calls makeGifs() for all "normal" items and if configured for, also the "rollover" items.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:47:"@see tslib_menu::procesItemStates(), makeGifs()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:42:"tslib_menu::procesItemStates(), makeGifs()";}}}s:7:"content";a:2:{i:0;s:507:"		$splitCount = count($this->menuArr);
		if ($splitCount)	{
			list($NOconf,$ROconf) = $this->procesItemStates($splitCount);

				//store initial count value
			$temp_HMENU_MENUOBJ = $GLOBALS['TSFE']->register['count_HMENU_MENUOBJ'];
			$temp_MENUOBJ = $GLOBALS['TSFE']->register['count_MENUOBJ'];
				// Now we generate the giffiles:
			$this->makeGifs($NOconf,'NO');
				//
[...]
'count_HMENU_MENUOBJ'] = $tempcnt_HMENU_MENUOBJ;
			$GLOBALS['TSFE']->register['count_MENUOBJ'] = $tempcnt_MENUOBJ;
		}
	}

	";i:1;i:1;}s:12:"content_size";i:1163;s:13:"content_lines";i:27;s:6:"atLine";i:1425;}i:59;a:7:{s:6:"header";s:35:"function makeGifs($conf, $resKey)	{";s:11:"parentClass";s:11:"tslib_gmenu";s:4:"cDat";a:6:{s:4:"text";s:155:"

Will traverse input array with configuratoin per-item and create corresponding GIF files for the menu.
The data of the files are stored in $this->result
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:39:"Array with configuration for each item.";}i:1;a:2:{i:0;s:6:"string";i:1;s:80:"Type of images: normal ("NO") or rollover ("RO"). Valid values are "NO" and "RO"";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:15:"@see generate()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:11:"generate() ";}}}s:7:"content";a:2:{i:0;s:507:"		$isGD = $GLOBALS['TYPO3_CONF_VARS']['GFX']['gdlib'];
	
		if (!is_array($conf)) {
			$conf = Array();
		}
		
		if ($isGD)	{
				// generate the gif-files. the $menuArr is filled with some values like output_w, output_h, output_file
			$Hcounter = 0;
			$Wcounter = 0;
			$Hobjs = $this->mconf['applyTotalH'];
			if ($Hobjs)	{$Hobjs = t3lib_div::intExplode(',',$Hobjs);}
			$
[...]
ncreased
			$Wcounter+=$this->result[$resKey][$key]['output_w'];		// counter is increased

			if ($maxFlag){break;}
		}
	}

	";i:1;i:1;}s:12:"content_size";i:5668;s:13:"content_lines";i:155;s:6:"atLine";i:1463;}i:61;a:7:{s:6:"header";s:70:"function findLargestDims($conf,$items,$Hobjs,$Wobjs,$minDim,$maxDim)	{";s:11:"parentClass";s:11:"tslib_gmenu";s:4:"cDat";a:6:{s:4:"text";s:327:"

Function searching for the largest width and height of the menu items to be generated.
Uses some of the same code as makeGifs and even instantiates some gifbuilder objects BUT does not render the images - only reading out which width they would have.
Remember to upgrade the code in here if the makeGifs function is updated.
";s:5:"param";a:6:{i:0;a:2:{i:0;s:5:"array";i:1;s:48:"Same configuration array as passed to makeGifs()";}i:1;a:2:{i:0;s:7:"integer";i:1;s:24:"The number of menu items";}i:2;a:2:{i:0;s:5:"array";i:1;s:32:"Array with "applyTotalH" numbers";}i:3;a:2:{i:0;s:5:"array";i:1;s:32:"Array with "applyTotalW" numbers";}i:4;a:2:{i:0;s:5:"array";i:1;s:20:"Array with "min" x/y";}i:5;a:2:{i:0;s:5:"array";i:1;s:20:"Array with "max" x/y";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:169:"Array with keys "H" and "W" which are in themselves arrays with the heights and widths of menu items inside. This can be used to find the max/min size of the menu items.";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:15:"@see makeGifs()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:11:"makeGifs() ";}}}s:7:"content";a:2:{i:0;s:507:"		$totalWH = array(
			'W' => array(),
			'H' => array()
		);

		$Hcounter = 0;
		$Wcounter = 0;
		$c=0;
		$maxFlag=0;
		reset($conf);
		while (list($key,$val)=each($conf))	{
			// SAME CODE AS makeGifs()! BEGIN
			if ($items==($c+1) && $minDim)	{
				$Lobjs = $this->mconf['removeObjectsOfDummy'];
				if ($Lobjs)	{
					$Lobjs = t3lib_div::intExplode(',',$Lobjs);
					rese
[...]
s increased
			$Wcounter+=$gifCreator->XY[0];		// counter is increased

			if ($maxFlag){break;}
		}
		return $totalWH;
	}

	";i:1;i:1;}s:12:"content_size";i:1755;s:13:"content_lines";i:61;s:6:"atLine";i:1634;}i:63;a:7:{s:6:"header";s:22:"function writeMenu()	{";s:11:"parentClass";s:11:"tslib_gmenu";s:4:"cDat";a:3:{s:4:"text";s:427:"

Traverses the ->result['NO'] array of menu items configuration (made by ->generate()) and renders the HTML of each item (the images themselves was made with makeGifs() before this. See ->generate())
During the execution of this function many internal methods prefixed "extProc_" from this class is called and many of these are for now dummy functions. But they can be used for processing as they are used by the GMENU_LAYERS
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:72:"The HTML for the menu (returns result through $this->extProc_finish(); )";}}s:7:"content";a:2:{i:0;s:507:"		if (is_array($this->menuArr) && is_array($this->result) && count($this->result) && is_array($this->result['NO']))	{
			$this->WMresult='';
			$this->INPfixMD5 = substr(md5(microtime().$this->GMENU_fixKey),0,4);
			$this->WMmenuItems = count($this->result['NO']);
			$this->extProc_init();
			for ($key=0;$key<$this->WMmenuItems;$key++)	{
				if ($this->result['NO'][$key]['
[...]
s->I['val']['output_file'];
	
					$this->extProc_afterLinking($key);
				}
			}
			return $this->extProc_finish();
		}
	}

	";i:1;i:1;}s:12:"content_size";i:4249;s:13:"content_lines";i:89;s:6:"atLine";i:1702;}i:65;a:7:{s:6:"header";s:25:"function extProc_init()	{";s:11:"parentClass";s:11:"tslib_gmenu";s:4:"cDat";a:6:{s:4:"text";s:101:"

Called right before the traversing of $this->result begins.
Can be used for various initialization
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:52:"@see writeMenu(), tslib_gmenu_layers::extProc_init()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:47:"writeMenu(), tslib_gmenu_layers::extProc_init()";}}}s:7:"content";a:2:{i:0;s:5:"	}

	";i:1;i:0;}s:12:"content_size";i:5;s:13:"content_lines";i:2;s:6:"atLine";i:1800;}i:67;a:7:{s:6:"header";s:27:"function extProc_RO($key)	{";s:11:"parentClass";s:11:"tslib_gmenu";s:4:"cDat";a:6:{s:4:"text";s:72:"

Called after all processing for RollOver of an element has been done.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:170:"Pointer to $this->menuArr[$key] where the current menu element record is found OR $this->result['RO'][$key] where the configuration for that elements RO version is found!";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:50:"@see writeMenu(), tslib_gmenu_layers::extProc_RO()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:45:"writeMenu(), tslib_gmenu_layers::extProc_RO()";}}}s:7:"content";a:2:{i:0;s:5:"	}

	";i:1;i:0;}s:12:"content_size";i:5;s:13:"content_lines";i:2;s:6:"atLine";i:1811;}i:69;a:7:{s:6:"header";s:38:"function extProc_beforeLinking($key)	{";s:11:"parentClass";s:11:"tslib_gmenu";s:4:"cDat";a:6:{s:4:"text";s:65:"

Called right before the creation of the link for the menu item
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:78:"Pointer to $this->menuArr[$key] where the current menu element record is found";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:61:"@see writeMenu(), tslib_gmenu_layers::extProc_beforeLinking()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:56:"writeMenu(), tslib_gmenu_layers::extProc_beforeLinking()";}}}s:7:"content";a:2:{i:0;s:5:"	}

	";i:1;i:0;}s:12:"content_size";i:5;s:13:"content_lines";i:2;s:6:"atLine";i:1822;}i:71;a:7:{s:6:"header";s:37:"function extProc_afterLinking($key)	{";s:11:"parentClass";s:11:"tslib_gmenu";s:4:"cDat";a:6:{s:4:"text";s:392:"

Called right after the creation of links for the menu item. This is also the last function call before the for-loop traversing menu items goes to the next item.
This function MUST set $this->WMresult.=[HTML for menu item] to add the generated menu item to the internal accumulation of items.
Further this calls the subMenu function in the parent class to create any submenu there might be.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:78:"Pointer to $this->menuArr[$key] where the current menu element record is found";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:83:"@see writeMenu(), tslib_gmenu_layers::extProc_afterLinking(), tslib_menu::subMenu()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:78:"writeMenu(), tslib_gmenu_layers::extProc_afterLinking(), tslib_menu::subMenu()";}}}s:7:"content";a:2:{i:0;s:155:"		$this->WMresult.=$this->I['theItem'];
		if (!$this->I['spacer'])	{
			$this->WMresult.= $this->subMenu($this->I['uid'],$this->I['mount_pid']);
		}
	}


	";i:1;i:0;}s:12:"content_size";i:155;s:13:"content_lines";i:7;s:6:"atLine";i:1835;}i:73;a:7:{s:6:"header";s:44:"function extProc_beforeAllWrap($item,$key)	{";s:11:"parentClass";s:11:"tslib_gmenu";s:4:"cDat";a:6:{s:4:"text";s:53:"

Called before the "wrap" happens on the menu item.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:72:"The current content of the menu item, $this->I['theItem'], passed along.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:78:"Pointer to $this->menuArr[$key] where the current menu element record is found";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:66:"The modified version of $item, going back into $this->I['theItem']";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:61:"@see writeMenu(), tslib_gmenu_layers::extProc_beforeAllWrap()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:56:"writeMenu(), tslib_gmenu_layers::extProc_beforeAllWrap()";}}}s:7:"content";a:2:{i:0;s:21:"		return $item;
	}

	";i:1;i:0;}s:12:"content_size";i:21;s:13:"content_lines";i:3;s:6:"atLine";i:1852;}i:75;a:7:{s:6:"header";s:27:"function extProc_finish()	{";s:11:"parentClass";s:11:"tslib_gmenu";s:4:"cDat";a:6:{s:4:"text";s:80:"

Called before the writeMenu() function returns (only if a menu was generated)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:58:"The total menu content should be returned by this function";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:54:"@see writeMenu(), tslib_gmenu_layers::extProc_finish()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:49:"writeMenu(), tslib_gmenu_layers::extProc_finish()";}}}s:7:"content";a:2:{i:0;s:114:"		return $this->tmpl->wrap($this->WMresult,$this->mconf['wrap']).$this->WMextraScript;
	}
}






















";i:1;i:0;}s:12:"content_size";i:114;s:13:"content_lines";i:25;s:6:"atLine";i:1863;}i:77;a:8:{s:6:"header";s:40:"class tslib_imgmenu extends tslib_menu {";s:5:"class";i:1;s:11:"parentClass";s:13:"tslib_imgmenu";s:4:"cDat";a:5:{s:4:"text";s:23:"

ImageMap based menus
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:4:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:17:"@subpackage tslib";i:3;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=389&cHash=fcf18c5d9f";}s:11:"other_index";a:4:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:6:"tslib ";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=389&cHash=fcf18c5d9f ";}}}s:7:"content";a:2:{i:0;s:2:"
	";i:1;i:-1;}s:12:"content_size";i:2;s:13:"content_lines";i:1;s:6:"atLine";i:1897;}i:79;a:7:{s:6:"header";s:21:"function generate()	{";s:11:"parentClass";s:13:"tslib_imgmenu";s:4:"cDat";a:5:{s:4:"text";s:190:"

Calls procesItemStates() so that the common configuration for the menu items are resolved into individual configuration per item.
Calls makeImageMap() to generate the image map image-file
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:51:"@see tslib_menu::procesItemStates(), makeImageMap()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:46:"tslib_menu::procesItemStates(), makeImageMap()";}}}s:7:"content";a:2:{i:0;s:240:"		$splitCount = count($this->menuArr);
		if ($splitCount)	{
			list($NOconf) = $this->procesItemStates($splitCount);
		}
		if ($this->mconf['debugItemConf'])	{echo '<h3>$NOconf:</h3>';	debug($NOconf);	}
		$this->makeImageMap($NOconf);
	}

	";i:1;i:0;}s:12:"content_size";i:240;s:13:"content_lines";i:8;s:6:"atLine";i:1906;}i:81;a:7:{s:6:"header";s:30:"function makeImageMap($conf)	{";s:11:"parentClass";s:13:"tslib_imgmenu";s:4:"cDat";a:6:{s:4:"text";s:155:"

Will traverse input array with configuratoin per-item and create corresponding GIF files for the menu.
The data of the files are stored in $this->result
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:39:"Array with configuration for each item.";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:15:"@see generate()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:11:"generate() ";}}}s:7:"content";a:2:{i:0;s:507:"		if (!is_array($conf)) {
			$conf = Array();
		}
		if (is_array($this->mconf['main.']))	{
			$gifCreator = t3lib_div::makeInstance('tslib_gifBuilder');
			$gifCreator->init();
			
			$itemsConf = $conf;
			$conf = $this->mconf['main.'];
			if (is_array($conf))	{
				$gifObjCount = 0;

				$sKeyArray=t3lib_TStemplate::sortedKeyList($conf);
				$gifObjCount=intval(end($sKey
[...]
e);
				$this->result = Array('output_file'=>$gifFileName, 'output_w'=>$w, 'output_h'=>$h, 'imgMap'=>$imgMap);
			}
		}
	}

	";i:1;i:1;}s:12:"content_size";i:5997;s:13:"content_lines";i:154;s:6:"atLine";i:1924;}i:83;a:7:{s:6:"header";s:22:"function writeMenu()	{";s:11:"parentClass";s:13:"tslib_imgmenu";s:4:"cDat";a:3:{s:4:"text";s:111:"

Returns the HTML for the image map menu.
If ->result is true it will create the HTML for the image map menu.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:21:"The HTML for the menu";}}s:7:"content";a:2:{i:0;s:507:"		if ($this->result)	{
			$res = $this->result;
			$menuName = 'menu_'.t3lib_div::shortMD5($res['imgMap']);	// shortMD5 260900  
			$result = '<img src="'.$GLOBALS['TSFE']->absRefPrefix.$res['output_file'].'" width="'.$res['output_w'].'" height="'.$res['output_h'].'" usemap="#'.$menuName.'" border="0" '.$this->mconf['params'];
			if (!strstr($result,'alt="'))	$result.=' al
[...]
magesOnPage[]=$res['output_file'];

			return $this->tmpl->wrap($result,$this->mconf['wrap']);
		}
	}
}





















";i:1;i:1;}s:12:"content_size";i:650;s:13:"content_lines";i:34;s:6:"atLine";i:2085;}i:85;a:8:{s:6:"header";s:39:"class tslib_jsmenu extends tslib_menu {";s:5:"class";i:1;s:11:"parentClass";s:12:"tslib_jsmenu";s:4:"cDat";a:5:{s:4:"text";s:37:"

JavaScript/Selectorbox based menus
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:4:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:14:"@package TYPO3";i:2;s:17:"@subpackage tslib";i:3;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=391&cHash=563435abbc";}s:11:"other_index";a:4:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:6:"tslib ";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=391&cHash=563435abbc ";}}}s:7:"content";a:2:{i:0;s:2:"
	";i:1;i:-1;}s:12:"content_size";i:2;s:13:"content_lines";i:1;s:6:"atLine";i:2128;}i:87;a:7:{s:6:"header";s:21:"function generate()	{";s:11:"parentClass";s:12:"tslib_jsmenu";s:4:"cDat";a:3:{s:4:"text";s:72:"

Dummy. Should do nothing, because we don't use the result-array here!
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:5:"	}

	";i:1;i:0;}s:12:"content_size";i:5;s:13:"content_lines";i:2;s:6:"atLine";i:2135;}i:89;a:4:{s:6:"header";s:22:"function writeMenu()	{";s:11:"parentClass";s:12:"tslib_jsmenu";s:4:"cDat";a:3:{s:4:"text";s:152:"

Creates the HTML (mixture of a <form> and a JavaScript section) for the JavaScript menu (basically an array of selector boxes with onchange handlers)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:26:"The HTML code for the menu";}}s:6:"atLine";i:2143;}i:91;a:7:{s:6:"header";s:64:"function generate_level($levels,$count,$pid,$menuItemArray='')	{";s:11:"parentClass";s:12:"tslib_jsmenu";s:4:"cDat";a:4:{s:4:"text";s:115:"

Generates a number of lines of JavaScript code for a menu level.
Calls itself recursively for additional levels.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:7:"integer";i:1;s:28:"Number of levels to generate";}i:1;a:2:{i:0;s:7:"integer";i:1;s:127:"Current level being generated - and if this number is less than $levels it will call itself recursively with $count incremented";}i:2;a:2:{i:0;s:7:"integer";i:1;s:30:"Page id of the starting point.";}i:3;a:2:{i:0;s:5:"array";i:1;s:27:"$this->menuArr passed along";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:22:"JavaScript code lines.";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"		$levelConf = $this->mconf[$count.'.'];
		
		$temp = is_array($menuItemArray) ? $menuItemArray : $this->sys_page->getMenu($pid);
		reset($temp);

		$var = $this->JSVarName;
		$menuName = $this->JSMenuName;

		$banUidArray=array();
		if (trim($this->conf['excludeUidList']))	{
			$banUidArray = t3lib_div::intExplode(',', $this->conf['excludeUidList']);
		}

		$parent = $cou
[...]
]['tslib/class.tslib_menu.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/class.tslib_menu.php']);
}

?>";i:1;i:1;}s:12:"content_size";i:2627;s:13:"content_lines";i:66;s:6:"atLine";i:2203;}}}s:29:"tslib/class.tslib_pagegen.php";a:3:{s:8:"filesize";i:23733;s:6:"header";a:5:{s:4:"text";s:166:"

Class for starting TypoScript page generation

The class is not instantiated as an objects but called directly with the "::" operator.
eg: TSpagegen::pagegenInit()
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:3:"DAT";a:10:{i:1;a:8:{s:6:"header";s:17:"class TSpagegen {";s:5:"class";i:1;s:11:"parentClass";s:9:"TSpagegen";s:4:"cDat";a:5:{s:4:"text";s:166:"

Class for starting TypoScript page generation

The class is not instantiated as an objects but called directly with the "::" operator.
eg: TSpagegen::pagegenInit()
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:7:"content";a:2:{i:0;s:2:"
	";i:1;i:-1;}s:12:"content_size";i:2;s:13:"content_lines";i:1;s:6:"atLine";i:85;}i:3;a:7:{s:6:"header";s:24:"function pagegenInit()	{";s:11:"parentClass";s:9:"TSpagegen";s:4:"cDat";a:3:{s:4:"text";s:76:"

Setting some vars in TSFE, primarily based on TypoScript config settings.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		if ($GLOBALS['TSFE']->page['content_from_pid']>0)	{
			$temp_copy_TSFE = $GLOBALS['TSFE'];	// make REAL copy of TSFE object - not reference!
			$temp_copy_TSFE->id = $GLOBALS['TSFE']->page['content_from_pid'];	// Set ->id to the content_from_pid value - we are going to evaluate this pid as was it a given id for a page-display!
			$temp_copy_TSFE->getPageAndRootlineWithDo
[...]
($GLOBALS['TSFE']->config['config']['spamProtectEmailAddresses'],-5,5,0);
		if ($GLOBALS['TSFE']->spamProtectEmailAddresses)	";i:1;i:1;}s:12:"content_size";i:1942;s:13:"content_lines";i:35;s:6:"atLine";i:92;}i:5;a:6:{s:6:"header";s:27:"function UnCryptMailto(s) {";s:11:"parentClass";s:9:"TSpagegen";s:7:"content";a:2:{i:0;s:90:"	var n=0;
	var r="";
	for(var i=0;i<s.length;i++) { 
		n=s.charCodeAt(i); 
		if (n>=8364) ";i:1;i:0;}s:12:"content_size";i:90;s:13:"content_lines";i:4;s:6:"atLine";i:131;}i:7;a:6:{s:6:"header";s:34:"function linkTo_UnCryptMailto(s)	{";s:11:"parentClass";s:9:"TSpagegen";s:7:"content";a:2:{i:0;s:507:"	location.href=UnCryptMailto(s);
}
		';
		}

		
		$GLOBALS['TSFE']->absRefPrefix = trim(''.$GLOBALS['TSFE']->config['config']['absRefPrefix']);
		if ((!strcmp($GLOBALS['TSFE']->config['config']['simulateStaticDocuments'],'PATH_INFO') || $GLOBALS['TSFE']->absRefPrefix_force) 
				&& !$GLOBALS['TSFE']->absRefPrefix)	{
			$GLOBALS['TSFE']->absRefPrefix=t3lib_div::dirname(t3li
[...]
deArrayForUrl($val,$GLOBALS['HTTP_GET_VARS'][$val]);
					}
				}
			}
		} else {
			$GLOBALS['TSFE']->linkVars='';
		}
	}

	";i:1;i:1;}s:12:"content_size";i:3346;s:13:"content_lines";i:67;s:6:"atLine";i:142;}i:9;a:7:{s:6:"header";s:24:"function getIncFiles()	{";s:11:"parentClass";s:9:"TSpagegen";s:4:"cDat";a:3:{s:4:"text";s:96:"

Returns an array with files to include. These files are the ones set up in TypoScript config.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:50:"Files to include. Paths are relative to PATH_site.";}}s:7:"content";a:2:{i:0;s:507:"		$incFilesArray = array();
			// Get files from config.includeLibrary
		$includeLibrary = trim(''.$GLOBALS['TSFE']->config['config']['includeLibrary']);
		if ($includeLibrary)	{
			$incFile=$GLOBALS['TSFE']->tmpl->getFileName($includeLibrary);
			if ($incFile)	{
				$incFilesArray[] = $incFile;
			}
		}
		
		if (is_array($GLOBALS['TSFE']->pSetup['includeLibs.']))	{$incLib
[...]
'config']['incT3Lib_htmlmail'])	{
			$incFilesArray[] = 't3lib/class.t3lib_htmlmail.php';
		}
		return $incFilesArray;
	}
	
	";i:1;i:1;}s:12:"content_size";i:1163;s:13:"content_lines";i:27;s:6:"atLine";i:215;}i:11;a:7:{s:6:"header";s:29:"function JSeventFunctions()	{";s:11:"parentClass";s:9:"TSpagegen";s:4:"cDat";a:3:{s:4:"text";s:33:"

Processing JavaScript handlers
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:122:"Array with a) a JavaScript section with event handlers and variables set and b) an array with attributes for the body tag.";}}s:7:"content";a:2:{i:0;s:507:"		$functions=array();
		$setEvents=array();
		$setBody=array();

		if (is_array($GLOBALS['TSFE']->JSeventFuncCalls['onmousemove']) && count($GLOBALS['TSFE']->JSeventFuncCalls['onmousemove']))	{
			$functions[]='	function T3_onmousemoveWrapper(e)	{	'.implode('   ',$GLOBALS['TSFE']->JSeventFuncCalls['onmousemove']).'	}';
			$setEvents[]='	document.onmousemove=T3_onmousemoveW
[...]
">
	/*<![CDATA[*/
'.implode(chr(10),$functions).'
'.implode(chr(10),$setEvents).'
	/*]]>*/
</script>
			':'',$setBody);
	}

	";i:1;i:1;}s:12:"content_size";i:1230;s:13:"content_lines";i:28;s:6:"atLine";i:248;}i:13;a:7:{s:6:"header";s:26:"function renderContent()	{";s:11:"parentClass";s:9:"TSpagegen";s:4:"cDat";a:3:{s:4:"text";s:29:"

Rendering the page content
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		// PAGE CONTENT
		$GLOBALS['TT']->incStackPointer();
		$GLOBALS['TT']->push($GLOBALS['TSFE']->sPre, 'PAGE');
			$pageContent = $GLOBALS['TSFE']->cObj->cObjGet($GLOBALS['TSFE']->pSetup);

			if ($GLOBALS['TSFE']->pSetup['wrap'])	{$pageContent = $GLOBALS['TSFE']->cObj->wrap($pageContent, $GLOBALS['TSFE']->pSetup['wrap']);}
			if ($GLOBALS['TSFE']->pSetup['stdWrap.'])	{$pag
[...]
nt);
		}
		$GLOBALS['TT']->pull($GLOBALS['TT']->LR?$GLOBALS['TSFE']->content:'');
		$GLOBALS['TT']->decStackPointer();
	}
	
	";i:1;i:1;}s:12:"content_size";i:907;s:13:"content_lines";i:20;s:6:"atLine";i:282;}i:15;a:7:{s:6:"header";s:48:"function renderContentWithHeader($pageContent)	{";s:11:"parentClass";s:9:"TSpagegen";s:4:"cDat";a:3:{s:4:"text";s:139:"

Rendering normal HTML-page with header by wrapping the generated content ($pageContent) in body-tags and setting the header accordingly.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:55:"The page content which TypoScript objects has generated";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		$customContent = $GLOBALS['TSFE']->config['config']['headerComment'];
		if (trim($customContent))	{
			$customContent = chr(10).$customContent;
		} else $customContent='';

			// Setting charset:		
		$theCharset = ($GLOBALS['TSFE']->config['config']['metaCharset'] ? $GLOBALS['TSFE']->config['config']['metaCharset'] : 'iso-8859-1');
		
			// Reset the content variables:
	
[...]
rVer >= 4);
	if ((browserName == "Netscape" && browserVer >= 3) || msie4 || browserName=="Konqueror") {version = "n3";} else ";i:1;i:1;}s:12:"content_size";i:8085;s:13:"content_lines";i:220;s:6:"atLine";i:309;}i:17;a:3:{s:6:"header";s:30:"function blurLink(theObject)	{";s:11:"parentClass";s:9:"TSpagegen";s:6:"atLine";i:532;}i:19;a:7:{s:6:"header";s:48:"class FE_loadDBGroup extends t3lib_loadDBGroup	{";s:5:"class";i:1;s:11:"parentClass";s:14:"FE_loadDBGroup";s:7:"content";a:2:{i:0;s:593:"	var $fromTC = 0;		// Means the not only uid and label-field is returned, but everything
}

// **********************************
// includes stuff for graphical work
// **********************************
require_once(PATH_t3lib.'class.t3lib_stdgraphic.php');
require_once(PATH_tslib.'class.tslib_gifbuilder.php');

// *************************
// includes menu-management
// *************************
require_once(PATH_tslib.'class.tslib_menu.php');

// *************************
// Global content object...
// *************************
require_once(PATH_tslib.'class.tslib_content.php');

?>";i:1;i:-1;}s:12:"content_size";i:593;s:13:"content_lines";i:19;s:6:"atLine";i:601;}}}s:28:"tslib/class.tslib_pibase.php";a:3:{s:8:"filesize";i:39924;s:6:"header";a:5:{s:4:"text";s:419:"

Base class for frontend plugins
Most modern frontend plugins are extension classes of this one.
This class contains functions which assists these plugins in creating lists, searching, displaying menus, page-browsing (next/previous/1/2/3) and handling links.
Functions are all prefixed "pi_" which is reserved for this class. Those functions can of course be overridden in the extension classes (that is the point...)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:3:"DAT";a:32:{i:1;a:8:{s:6:"header";s:20:"class tslib_pibase {";s:5:"class";i:1;s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:5:{s:4:"text";s:419:"

Base class for frontend plugins
Most modern frontend plugins are extension classes of this one.
This class contains functions which assists these plugins in creating lists, searching, displaying menus, page-browsing (next/previous/1/2/3) and handling links.
Functions are all prefixed "pi_" which is reserved for this class. Those functions can of course be overridden in the extension classes (that is the point...)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:7:"content";a:2:{i:0;s:2537:"
		// Reserved variables:
	var $cObj;			// The backReference to the mother cObj object set at call time
	var $prefixId;		// Should be same as classname of the plugin, used for CSS classes, variables
	var $scriptRelPath;	// Path to the plugin class script relative to extension directory, eg. 'pi1/class.tx_newfaq_pi1.php'
	var $extKey;		// Extension key.
	var $piVars = Array (	// This is the incomming array by name $this->prefixId merged between POST and GET, POST taking precedence. Eg. if the class name is 'tx_myext' then the content of this array will be whatever comes into &tx_myext[...]=...
		'pointer' => '',			// Used as a pointer for lists
		'mode' => '',				// List mode
		'sword' => '',				// Search word
		'sort' => '',				// [Sorting column]:[ASC=0/DESC=1]
	);
	var $internal = Array(	// Used internally for general storage of values between methods
		'res_count' => 0,			// Total query count
		'results_at_a_time' => 20,	// pi_list_browseresults(): Show number of results at a time
		'maxPages' => 10,			// pi_list_browseresults(): Max number of 'Page 1 - Page 2 - ...' in the list browser
		'currentRow' => Array(),	// Current result row
		'currentTable' => '',		// Current table
	);

	var $LOCAL_LANG = Array();	// Local Language content
	var $LOCAL_LANG_loaded = 0;	// Flag that tells if the locallang file has been fetch (or tried to be fetched) already.
	var $LLkey='default';		// Pointer to the language to use.
	var $LLtestPrefix='';		// You can set this during development to some value that makes it easy for you to spot all labels that ARe delivered by the getLL function.
	var $LLtestPrefixAlt='';	// Save as LLtestPrefix, but additional prefix for the alternative value in getLL() function calls

	var $pi_isOnlyFields = 'mode,pointer';
	var $pi_alwaysPrev = 0;
	var $pi_lowerThan = 5;
	var $pi_moreParams='';
	var $pi_listFields='*';
	
	var $pi_autoCacheFields=array();
	var $pi_autoCacheEn=0;
	
	var $pi_USER_INT_obj = 0;	// If set, then links are 1) not using cHash and 2) allowing pages to be cached.
	
	/**
	 * Should normally be set in the main function with the TypoScript content passed to the method.
	 * 
	 * $conf[LOCAL_LANG][_key_] is reserved for Local Language overrides.
	 * $conf[userFunc] / $conf[includeLibs]  reserved for setting up the USER / USER_INT object. See TSref
	 */ 
	var $conf = Array();	
	
	// internal, don't mess with...
	var $pi_EPtemp_cObj;	
	var $pi_tmpPageId=0;

	
	














	/***************************
	 * 
	 * Init functions
	 *
	 **************************/

	";i:1;i:-1;}s:12:"content_size";i:2537;s:13:"content_lines";i:71;s:6:"atLine";i:123;}i:3;a:8:{s:6:"header";s:25:"function tslib_pibase()	{";s:11:"parentClass";s:12:"tslib_pibase";s:11:"sectionText";a:1:{i:0;s:14:"Init functions";}s:4:"cDat";a:3:{s:4:"text";s:169:"

Class Constructor (true constructor)
Initializes $this->piVars if $this->prefixId is set to any value
Will also set $this->LLkey based on the config.language setting.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:222:"		if ($this->prefixId)	{
			$this->piVars = t3lib_div::GParrayMerged($this->prefixId);
		}
		if ($GLOBALS['TSFE']->config['config']['language'])	{
			$this->LLkey = $GLOBALS['TSFE']->config['config']['language'];
		}
	}

	";i:1;i:0;}s:12:"content_size";i:222;s:13:"content_lines";i:8;s:6:"atLine";i:202;}i:5;a:7:{s:6:"header";s:32:"function pi_setPiVarDefaults()	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:3:{s:4:"text";s:139:"

If internal TypoScript property "_DEFAULT_PI_VARS." is set then it will merge the current $this->piVars array onto these default values.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:307:"		if (is_array($this->conf['_DEFAULT_PI_VARS.']))	{
			$this->piVars = t3lib_div::array_merge_recursive_overrule($this->conf['_DEFAULT_PI_VARS.'],is_array($this->piVars)?$this->piVars:array());
		}
	}


	












	/***************************
	 * 
	 * Link functions
	 *
	 **************************/

	";i:1;i:0;}s:12:"content_size";i:307;s:13:"content_lines";i:25;s:6:"atLine";i:216;}i:7;a:8:{s:6:"header";s:64:"function pi_getPageLink($id,$target='',$urlParameters=array())	{";s:11:"parentClass";s:12:"tslib_pibase";s:11:"sectionText";a:1:{i:0;s:14:"Link functions";}s:4:"cDat";a:5:{s:4:"text";s:259:"

Get URL to some page.
Returns the URL to page $id with $target and an array of additional url-parameters, $urlParameters
Simple example: $this->pi_getPageLink(123) to get the URL for page-id 123.

The function basically calls $this->cObj->getTypoLink_URL()
";s:5:"param";a:3:{i:0;a:2:{i:0;s:7:"integer";i:1;s:7:"Page id";}i:1;a:2:{i:0;s:6:"string";i:1;s:77:"Target value to use. Affects the &type-value of the URL, defaults to current.";}i:2;a:2:{i:0;s:5:"array";i:1;s:50:"Additional URL parameters to set (key/value pairs)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:17:"The resulting URL";}s:5:"other";a:1:{i:0;s:20:"@see pi_linkToPage()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:16:"pi_linkToPage() ";}}}s:7:"content";a:2:{i:0;s:107:"		return $this->cObj->getTypoLink_URL($id,$urlParameters,$target);	// ?$target:$GLOBALS['TSFE']->sPre
	}

	";i:1;i:0;}s:12:"content_size";i:107;s:13:"content_lines";i:3;s:6:"atLine";i:255;}i:9;a:7:{s:6:"header";s:68:"function pi_linkToPage($str,$id,$target='',$urlParameters=array())	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:5:{s:4:"text";s:354:"

Link a string to some page.
Like pi_getPageLink() but takes a string as first parameter which will in turn be wrapped with the URL including target attribute
Simple example: $this->pi_getPageLink('My link', 123) to get something like <a href="index.php?id=123&type=1">My link</a> (or <a href="123.1.html">My link</a> if simulateStaticDocuments is set)
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:38:"The content string to wrap in <a> tags";}i:1;a:2:{i:0;s:7:"integer";i:1;s:7:"Page id";}i:2;a:2:{i:0;s:6:"string";i:1;s:77:"Target value to use. Affects the &type-value of the URL, defaults to current.";}i:3;a:2:{i:0;s:5:"array";i:1;s:50:"Additional URL parameters to set (key/value pairs)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:65:"The input string wrapped in <a> tags with the URL and target set.";}s:5:"other";a:1:{i:0;s:21:"@see pi_getPageLink()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:17:"pi_getPageLink() ";}}}s:7:"content";a:2:{i:0;s:108:"		return $this->cObj->getTypoLink($str,$id,$urlParameters,$target);	// ?$target:$GLOBALS['TSFE']->sPre
	}

	";i:1;i:0;}s:12:"content_size";i:108;s:13:"content_lines";i:3;s:6:"atLine";i:271;}i:11;a:7:{s:6:"header";s:58:"function pi_linkTP($str,$urlParameters=array(),$cache=0)	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:5:{s:4:"text";s:167:"

Link string to the current page.
Returns the $str wrapped in <a>-tags with a link to the CURRENT page, but with $urlParameters set as extra parameters for the page.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:38:"The content string to wrap in <a> tags";}i:1;a:2:{i:0;s:5:"array";i:1;s:194:"Array with URL parameters as key/value pairs. They will be "imploded" and added to the list of parameters defined in the plugins TypoScript property "parent.addParams" plus $this->pi_moreParams.";}i:2;a:2:{i:0;s:7:"boolean";i:1;s:187:"If $cache is set, the page is asked to be cached by a &cHash value (unless the current plugin using this class is a USER_INT). Otherwise the no_cache-parameter will be a part of the link.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:36:"The input string wrapped in <a> tags";}s:5:"other";a:1:{i:0;s:27:"@see pi_linkTP_keepPIvars()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:23:"pi_linkTP_keepPIvars() ";}}}s:7:"content";a:2:{i:0;s:408:"		$conf=array();
		$conf['useCacheHash']=$this->pi_USER_INT_obj?0:$cache;
		$conf['no_cache']=$this->pi_USER_INT_obj?0:!$cache;
		$conf['parameter']=$this->pi_tmpPageId ? $this->pi_tmpPageId : $GLOBALS['TSFE']->id;
		$conf['additionalParams']=$this->conf['parent.']['addParams'].t3lib_div::implodeArrayForUrl('',$urlParameters,'',1).$this->pi_moreParams;
		
		return $this->cObj->typoLink($str, $conf);
	}

	";i:1;i:0;}s:12:"content_size";i:408;s:13:"content_lines";i:9;s:6:"atLine";i:285;}i:13;a:7:{s:6:"header";s:85:"function pi_linkTP_keepPIvars($str,$overrulePIvars=array(),$cache=0,$clearAnyway=0)	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:5:{s:4:"text";s:368:"

Link a string to the current page while keeping currently set values in piVars.
Like pi_linkTP, but $urlParameters is by default set to $this->piVars with $overrulePIvars overlaid.
This means any current entries from this->piVars are passed on (except the key "DATA" which will be unset before!) and entries in $overrulePIvars will OVERRULE the current in the link.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:38:"The content string to wrap in <a> tags";}i:1;a:2:{i:0;s:5:"array";i:1;s:299:"Array of values to override in the current piVars. Contrary to pi_linkTP the keys in this array must correspond to the real piVars array and therefore NOT be prefixed with the $this->prefixId string. Further, if a value is a blank string it means the piVar key will not be a part of the link (unset)";}i:2;a:2:{i:0;s:7:"boolean";i:1;s:187:"If $cache is set, the page is asked to be cached by a &cHash value (unless the current plugin using this class is a USER_INT). Otherwise the no_cache-parameter will be a part of the link.";}i:3;a:2:{i:0;s:7:"boolean";i:1;s:177:"If set, then the current values of piVars will NOT be preserved anyways... Practical if you want an easy way to set piVars without having to worry about the prefix, "tx_xxxxx[]"";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:36:"The input string wrapped in <a> tags";}s:5:"other";a:1:{i:0;s:16:"@see pi_linkTP()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:12:"pi_linkTP() ";}}}s:7:"content";a:2:{i:0;s:415:"		if (is_array($this->piVars) && is_array($overrulePIvars) && !$clearAnyway)	{
			$piVars = $this->piVars;
			unset($piVars['DATA']);
			$overrulePIvars = t3lib_div::array_merge_recursive_overrule($piVars,$overrulePIvars);
			if ($this->pi_autoCacheEn)	{
				$cache = $this->pi_autoCache($overrulePIvars);
			}
		}
		$res = $this->pi_linkTP($str,Array($this->prefixId=>$overrulePIvars),$cache);
		return $res;
	}

	";i:1;i:0;}s:12:"content_size";i:415;s:13:"content_lines";i:12;s:6:"atLine";i:307;}i:15;a:7:{s:6:"header";s:84:"function pi_linkTP_keepPIvars_url($overrulePIvars=array(),$cache=0,$clearAnyway=0)	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:5:{s:4:"text";s:145:"

Get URL to the current page while keeping currently set values in piVars.
Same as pi_linkTP_keepPIvars but returns only the URL from the link.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:24:"See pi_linkTP_keepPIvars";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:24:"See pi_linkTP_keepPIvars";}i:2;a:2:{i:0;s:7:"boolean";i:1;s:24:"See pi_linkTP_keepPIvars";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:38:"The URL ($this->cObj->lastTypoLinkUrl)";}s:5:"other";a:1:{i:0;s:27:"@see pi_linkTP_keepPIvars()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:23:"pi_linkTP_keepPIvars() ";}}}s:7:"content";a:2:{i:0;s:116:"		$this->pi_linkTP_keepPIvars('|',$overrulePIvars,$cache,$clearAnyway);
		return $this->cObj->lastTypoLinkUrl;
	}

	";i:1;i:0;}s:12:"content_size";i:116;s:13:"content_lines";i:4;s:6:"atLine";i:330;}i:17;a:7:{s:6:"header";s:67:"function pi_list_linkSingle($str,$uid,$cache=0,$mergeArr=array())	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:5:{s:4:"text";s:116:"

Wraps the $str in a link to a single display of the record (using piVars[showUid])
Uses pi_linkTP for the linking
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:38:"The content string to wrap in <a> tags";}i:1;a:2:{i:0;s:7:"integer";i:1;s:97:"UID of the record for which to display details (basically this will become the value of [showUid]";}i:2;a:2:{i:0;s:7:"boolean";i:1;s:24:"See pi_linkTP_keepPIvars";}i:3;a:2:{i:0;s:5:"array";i:1;s:98:"Array of values to override in the current piVars. Same as $overrulePIvars in pi_linkTP_keepPIvars";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:36:"The input string wrapped in <a> tags";}s:5:"other";a:1:{i:0;s:40:"@see pi_linkTP(), pi_linkTP_keepPIvars()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:35:"pi_linkTP(), pi_linkTP_keepPIvars()";}}}s:7:"content";a:2:{i:0;s:463:"		if ($this->prefixId)	{
			if ($cache)	{
				$overrulePIvars=$uid?array('showUid'=>$uid):Array();
				$overrulePIvars=array_merge($overrulePIvars,$mergeArr);
				$str = $this->pi_linkTP($str,Array($this->prefixId=>$overrulePIvars),$cache);
			} else {
				$overrulePIvars=array('showUid'=>$uid?$uid:'');
				$overrulePIvars=array_merge($overrulePIvars,$mergeArr);
				$str = $this->pi_linkTP_keepPIvars($str,$overrulePIvars,$cache);
			}
		}
		return $str;
	}

	";i:1;i:0;}s:12:"content_size";i:463;s:13:"content_lines";i:14;s:6:"atLine";i:346;}i:19;a:7:{s:6:"header";s:132:"function pi_openAtagHrefInJSwindow($str,$winName='',$winParams='width=670,height=500,status=0,menubar=0,scrollbars=1,resizable=1')	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:3:{s:4:"text";s:133:"

Will change the href value from <a> in the input string and turn it into an onclick event that will open a new window with the URL
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:191:"The string to process. This should be a string already wrapped/including a <a> tag which will be modified to contain an onclick handler. Only the attributes "href" and "onclick" will be left.";}i:1;a:2:{i:0;s:6:"string";i:1;s:33:"Window name for the pop-up window";}i:2;a:2:{i:0;s:6:"string";i:1;s:55:"Window parameters, see the default list for inspiration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:59:"The processed input string, modified IF a <a> tag was found";}}s:7:"content";a:2:{i:0;s:530:"		if (eregi('(.*)(<a[^>]*>)(.*)',$str,$match))	{
			$aTagContent = t3lib_div::get_tag_attributes($match[2]);
			$match[2]='<a href="#" onclick="'.
				htmlspecialchars('vHWin=window.open(\''.$aTagContent['href'].'\',\''.($winName?$winName:md5($aTagContent['href'])).'\',\''.$winParams.'\');vHWin.focus();return false;').
				'">';
			$str=$match[1].$match[2].$match[3];
		}
		return $str;
	}















	/***************************
	 * 
	 * Functions for listing, browsing, searching etc.
	 *
	 **************************/

	";i:1;i:0;}s:12:"content_size";i:530;s:13:"content_lines";i:30;s:6:"atLine";i:369;}i:21;a:8:{s:6:"header";s:68:"function pi_list_browseresults($showResultCount=1,$tableParams='')	{";s:11:"parentClass";s:12:"tslib_pibase";s:11:"sectionText";a:1:{i:0;s:47:"Functions for listing, browsing, searching etc.";}s:4:"cDat";a:3:{s:4:"text";s:462:"

Returns a results browser. This means a bar of page numbers plus a "previous" and "next" link. For each entry in the bar the piVars "pointer" will be pointing to the "result page" to show.
Using $this->piVars['pointer'] as pointer to the page to display
Using $this->internal['res_count'], $this->internal['results_at_a_time'] and $this->internal['maxPages'] for count number, how many results to show and the max number of pages to include in the browse bar.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"boolean";i:1;s:78:"If set (default) the text "Displaying results..." will be show, otherwise not.";}i:1;a:2:{i:0;s:6:"string";i:1;s:96:"Attributes for the table tag which is wrapped around the table cells containing the browse links";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:57:"Output HTML, wrapped in <div>-tags with a class attribute";}}s:7:"content";a:2:{i:0;s:507:"			
			// Initializing variables:
		$pointer=$this->piVars['pointer'];
		$count=$this->internal['res_count'];
		$results_at_a_time = t3lib_div::intInRange($this->internal['results_at_a_time'],1,1000);
		$maxPages = t3lib_div::intInRange($this->internal['maxPages'],1,100);
		$max = t3lib_div::intInRange(ceil($count/$results_at_a_time),1,$maxPages);
		$pointer=intval($pointe
[...]
:''
			).
		'<'.trim('table '.$tableParams).'>
			<tr>'.implode('',$links).'</tr>
		</table></div>';
		return $sTables;
	}

	";i:1;i:1;}s:12:"content_size";i:2112;s:13:"content_lines";i:45;s:6:"atLine";i:409;}i:23;a:7:{s:6:"header";s:45:"function pi_list_searchBox($tableParams='')	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:3:{s:4:"text";s:175:"

Returns a Search box, sending search words to piVars "sword" and setting the "no_cache" parameter as well in the form.
Submits the search request to the current REQUEST_URI
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:94:"Attributes for the table tag which is wrapped around the table cells containing the search box";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:57:"Output HTML, wrapped in <div>-tags with a class attribute";}}s:7:"content";a:2:{i:0;s:507:"			// Search box design:
		$sTables = '<div'.$this->pi_classParam('searchbox').'><'.trim('table '.$tableParams).'>
		<form action="'.htmlspecialchars(t3lib_div::getIndpEnv('REQUEST_URI')).'" method="post">
		<tr>
			<td><input type="text" name="'.$this->prefixId.'[sword]" value="'.htmlspecialchars($this->piVars['sword']).'"'.$this->pi_classParam('searchbox-sword').' /></td
[...]
utton').' /><input type="hidden" name="no_cache" value="1" /></td>
		</tr></form>
		</table></div>';
		return $sTables;
	}

	";i:1;i:1;}s:12:"content_size";i:647;s:13:"content_lines";i:11;s:6:"atLine";i:462;}i:25;a:7:{s:6:"header";s:63:"function pi_list_modeSelector($items=array(),$tableParams='')	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:3:{s:4:"text";s:94:"

Returns a mode selector; a little menu in a table normally put in the top of the page/list.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:104:"Key/Value pairs for the menu; keys are the piVars[mode] values and the "values" are the labels for them.";}i:1;a:2:{i:0;s:6:"string";i:1;s:88:"Attributes for the table tag which is wrapped around the table cells containing the menu";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:57:"Output HTML, wrapped in <div>-tags with a class attribute";}}s:7:"content";a:2:{i:0;s:486:"		$cells=array();
		reset($items);
		while(list($k,$v)=each($items))	{
			$cells[]='<td'.($this->piVars['mode']==$k?$this->pi_classParam('modeSelector-SCell'):'').'><p>'.
				$this->pi_linkTP_keepPIvars(htmlspecialchars($v),array('mode'=>$k),$this->pi_isOnlyFields($this->pi_isOnlyFields)).
				'</p></td>';
		}
		
		$sTables = '<div'.$this->pi_classParam('modeSelector').'><'.trim('table '.$tableParams).'>
			<tr>'.implode('',$cells).'</tr>
		</table></div>';
		return $sTables;
	}

	";i:1;i:0;}s:12:"content_size";i:486;s:13:"content_lines";i:14;s:6:"atLine";i:481;}i:27;a:7:{s:6:"header";s:49:"function pi_list_makelist($res,$tableParams='')	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:5:{s:4:"text";s:460:"

Returns the list of items based on the input MySQL result pointer
For each result row the internal var, $this->internal['currentRow'], is set with the row returned.
$this->pi_list_header() makes the header row for the list
$this->pi_list_row() is used for rendering each row
Notice that these two functions are typically ALWAYS defined in the extension class of the plugin since they are directly concerned with the specific layout for that plugins purpose.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"pointer";i:1;s:56:"Result pointer to a MySQL result which can be traversed.";}i:1;a:2:{i:0;s:6:"string";i:1;s:87:"Attributes for the table tag which is wrapped around the table rows containing the list";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:57:"Output HTML, wrapped in <div>-tags with a class attribute";}s:5:"other";a:1:{i:0;s:36:"@see pi_list_row(), pi_list_header()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:31:"pi_list_row(), pi_list_header()";}}}s:7:"content";a:2:{i:0;s:415:"			// Make list table header:
		$tRows=array();
		$this->internal['currentRow']='';
		$tRows[]=$this->pi_list_header();

			// Make list table rows
		$c=0;
		while($this->internal['currentRow'] = mysql_fetch_assoc($res))	{
			$tRows[]=$this->pi_list_row($c);
			$c++;
		}

		$out = '<div'.$this->pi_classParam('listrow').'><'.trim('table '.$tableParams).'>'.implode('',$tRows).'</table></div>';
		return $out;
	}

	";i:1;i:0;}s:12:"content_size";i:415;s:13:"content_lines";i:16;s:6:"atLine";i:508;}i:29;a:7:{s:6:"header";s:26:"function pi_list_row($c)	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:3:{s:4:"text";s:256:"

Returns a list row. Get data from $this->internal['currentRow'];
(Dummy)
Notice: This function should ALWAYS be defined in the extension class of the plugin since it is directly concerned with the specific layout of the listing for your plugins purpose.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:87:"Row counting. Starts at 0 (zero). Used for alternating class values in the output rows.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:88:"HTML output, a table row with a class attribute set (alternative based on odd/even rows)";}}s:7:"content";a:2:{i:0;s:118:"		// Dummy
		return '<tr'.($c%2 ? $this->pi_classParam('listrow-odd') : '').'><td><p>[dummy row]</p></td></tr>';
	}

	";i:1;i:0;}s:12:"content_size";i:118;s:13:"content_lines";i:4;s:6:"atLine";i:533;}i:31;a:7:{s:6:"header";s:27:"function pi_list_header()	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:3:{s:4:"text";s:218:"

Returns a list header row.
(Dummy)
Notice: This function should ALWAYS be defined in the extension class of the plugin since it is directly concerned with the specific layout of the listing for your plugins purpose.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:51:"HTML output, a table row with a class attribute set";}}s:7:"content";a:2:{i:0;s:208:"		return '<tr'.$this->pi_classParam('listrow-header').'><td><p>[dummy header row]</p></td></tr>';
	}















	/***************************
	 * 
	 * Stylesheet, CSS
	 *
	 **************************/


	";i:1;i:0;}s:12:"content_size";i:208;s:13:"content_lines";i:24;s:6:"atLine";i:545;}i:33;a:8:{s:6:"header";s:34:"function pi_getClassName($class)	{";s:11:"parentClass";s:12:"tslib_pibase";s:11:"sectionText";a:1:{i:0;s:15:"Stylesheet, CSS";}s:4:"cDat";a:3:{s:4:"text";s:104:"

Returns a class-name prefixed with $this->prefixId and with all underscores substituted to dashes (-)
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:82:"The class name (or the END of it since it will be prefixed by $this->prefixId.'-')";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:49:"The combined class name (with the correct prefix)";}}s:7:"content";a:2:{i:0;s:84:"		return str_replace('_','-',$this->prefixId).($this->prefixId?'-':'').$class;
	}

	";i:1;i:0;}s:12:"content_size";i:84;s:13:"content_lines";i:3;s:6:"atLine";i:576;}i:35;a:7:{s:6:"header";s:32:"function pi_classParam($class)	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:5:{s:4:"text";s:92:"

Returns the class-attribute with the correctly prefixed classname
Using pi_getClassName()
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:23:"The class name (suffix)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:65:"A "class" attribute with value and a single space char before it.";}s:5:"other";a:1:{i:0;s:22:"@see pi_getClassName()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:18:"pi_getClassName() ";}}}s:7:"content";a:2:{i:0;s:61:"		return ' class="'.$this->pi_getClassName($class).'"';
	}

	";i:1;i:0;}s:12:"content_size";i:61;s:13:"content_lines";i:3;s:6:"atLine";i:588;}i:37;a:7:{s:6:"header";s:54:"function pi_setClassStyle($class,$data,$selector='')	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:5:{s:4:"text";s:76:"

Sets CSS style-data for the $class-suffix (prefixed by pi_getClassName())
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:41:"$class: Class suffix, see pi_getClassName";}i:1;a:2:{i:0;s:6:"string";i:1;s:15:"$data: CSS data";}i:2;a:2:{i:0;s:6:"string";i:1;s:124:"If $selector is set to any CSS selector, eg 'P' or 'H1' or 'TABLE' then the style $data will regard those HTML-elements only";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:154:"@depreciated		I think this function should not be used (and probably isn't used anywhere). It was a part of a concept which was left behind quite quickly.";i:1;s:8:"@private";}s:11:"other_index";a:2:{s:12:"@depreciated";a:1:{i:0;s:141:" I think this function should not be used (and probably isn't used anywhere). It was a part of a concept which was left behind quite quickly.";}s:8:"@private";a:1:{i:0;s:1:" ";}}}s:7:"content";a:2:{i:0;s:173:"		$GLOBALS['TSFE']->setCSS($this->pi_getClassName($class).($selector?' '.$selector:''),'.'.$this->pi_getClassName($class).($selector?' '.$selector:'').' {'.$data.'}');
	}

	";i:1;i:0;}s:12:"content_size";i:173;s:13:"content_lines";i:3;s:6:"atLine";i:602;}i:39;a:7:{s:6:"header";s:35:"function pi_wrapInBaseClass($str)	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:3:{s:4:"text";s:276:"

Wraps the input string in a <div> tag with the class attribute set to the prefixId.
All content returned from your plugins should be returned through this function so all content from your plugin is encapsulated in a <div>-tag nicely identifying the content of your plugin.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:72:"HTML content to wrap in the div-tags with the "main class" of the plugin";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:59:"HTML content wrapped, ready to return to the parent object.";}}s:7:"content";a:2:{i:0;s:217:"		return '<div class="'.str_replace('_','-',$this->prefixId).'">'.$str.'</div>';
	}

















	/***************************
	 * 
	 * Frontend editing: Edit panel, edit icons
	 *
	 **************************/

	";i:1;i:0;}s:12:"content_size";i:217;s:13:"content_lines";i:25;s:6:"atLine";i:613;}i:41;a:8:{s:6:"header";s:73:"function pi_getEditPanel($row='',$tablename='',$label='',$conf=Array())	{";s:11:"parentClass";s:12:"tslib_pibase";s:11:"sectionText";a:1:{i:0;s:40:"Frontend editing: Edit panel, edit icons";}s:4:"cDat";a:5:{s:4:"text";s:67:"

Returns the Backend User edit panel for the $row from $tablename
";s:5:"param";a:4:{i:0;a:2:{i:0;s:5:"array";i:1;s:13:"Record array.";}i:1;a:2:{i:0;s:6:"string";i:1;s:10:"Table name";}i:2;a:2:{i:0;s:6:"string";i:1;s:31:"A label to show with the panel.";}i:3;a:2:{i:0;s:5:"array";i:1;s:140:"TypoScript parameters to pass along to the EDITPANEL content Object that gets rendered. The property "allow" WILL get overridden/set though.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:142:"Returns false/blank if no BE User login and of course if the panel is not shown for other reasons. Otherwise the HTML for the panel (a table).";}s:5:"other";a:1:{i:0;s:28:"@see tslib_cObj::EDITPANEL()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:24:"tslib_cObj::EDITPANEL() ";}}}s:7:"content";a:2:{i:0;s:507:"		$panel='';
		if (!$row || !$tablename)	{
			$row = $this->internal['currentRow'];
			$tablename = $this->internal['currentTable'];
		}
		
		if ($GLOBALS['TSFE']->beUserLogin)	{
				// Create local cObj if not set:
			if (!is_object($this->pi_EPtemp_cObj))	{
				$this->pi_EPtemp_cObj = t3lib_div::makeInstance('tslib_cObj');
				$this->pi_EPtemp_cObj->setParent($this->cObj
[...]
el.'</td><td valign="top" align="right">'.$panel.'</td></tr></table>';
			} else return $panel;
		} else return $label;
	}

	";i:1;i:1;}s:12:"content_size";i:1029;s:13:"content_lines";i:28;s:6:"atLine";i:649;}i:43;a:7:{s:6:"header";s:75:"function pi_getEditIcon($content,$fields,$title='',$row='',$tablename='')	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:5:{s:4:"text";s:81:"

Adds edit-icons to the input content.
tslib_cObj::editIcons used for rendering
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"string";i:1;s:150:"HTML content to add icons to. The icons will be put right after the last content part in the string (that means before the ending series of HTML tags)";}i:1;a:2:{i:0;s:6:"string";i:1;s:52:"The list of fields to edit when the icon is clicked.";}i:2;a:2:{i:0;s:6:"string";i:1;s:24:"Title for the edit icon.";}i:3;a:2:{i:0;s:5:"array";i:1;s:16:"Table record row";}i:4;a:2:{i:0;s:6:"string";i:1;s:10:"Table name";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:21:"The processed content";}s:5:"other";a:1:{i:0;s:28:"@see tslib_cObj::editIcons()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:24:"tslib_cObj::editIcons() ";}}}s:7:"content";a:2:{i:0;s:562:"		if ($GLOBALS['TSFE']->beUserLogin){
			if (!$row || !$tablename)	{
				$row = $this->internal['currentRow'];
				$tablename = $this->internal['currentTable'];
			}
			$conf=array(
				'beforeLastTag'=>1,
				'iconTitle' => $title
			);
			$content=$this->cObj->editIcons($content,$tablename.':'.$fields,$conf,$tablename.':'.$row['uid'],$row,'&viewUrl='.rawurlencode(t3lib_div::getIndpEnv('REQUEST_URI')));
		}	
		return $content;
	}

















	/***************************
	 * 
	 * Localization, locallang functions
	 *
	 **************************/


	";i:1;i:0;}s:12:"content_size";i:562;s:13:"content_lines";i:37;s:6:"atLine";i:690;}i:45;a:8:{s:6:"header";s:33:"function pi_getLL($key,$alt='')	{";s:11:"parentClass";s:12:"tslib_pibase";s:11:"sectionText";a:1:{i:0;s:33:"Localization, locallang functions";}s:4:"cDat";a:3:{s:4:"text";s:195:"

Returns the localized label of the LOCAL_LANG key, $key
Notice that for debugging purposes prefixes for the output values can be set with the internal vars ->LLtestPrefixAlt and ->LLtestPrefix
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:64:"The key from the LOCAL_LANG array for which to return the value.";}i:1;a:2:{i:0;s:6:"string";i:1;s:114:"Alternative string to return IF no value is found set for the key, neither for the local language nor the default.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:26:"The value from LOCAL_LANG.";}}s:7:"content";a:2:{i:0;s:297:"		if (isset($this->LOCAL_LANG[$this->LLkey][$key]))	{
			$word = $this->LOCAL_LANG[$this->LLkey][$key];
		} elseif (isset($this->LOCAL_LANG['default'][$key]))	{
			$word = $this->LOCAL_LANG['default'][$key];
		} else $word = $this->LLtestPrefixAlt.$alt;

		return $this->LLtestPrefix.$word;
	}
	
	";i:1;i:0;}s:12:"content_size";i:297;s:13:"content_lines";i:9;s:6:"atLine";i:736;}i:47;a:7:{s:6:"header";s:22:"function pi_loadLL()	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:3:{s:4:"text";s:276:"

Loads local-language values by looking for a "locallang.php" file in the plugin class directory ($this->scriptRelPath) and if found includes it.
Also locallang values set in the TypoScript property "_LOCAL_LANG" are merged onto the values found in the "locallang.php" file.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		if (!$this->LOCAL_LANG_loaded && $this->scriptRelPath)	{
			$basePath = t3lib_extMgm::siteRelPath($this->extKey).dirname($this->scriptRelPath).'/locallang.php';
			if (@is_file($basePath))	{
				include('./'.$basePath);
				$this->LOCAL_LANG = $LOCAL_LANG;
				if (is_array($this->conf['_LOCAL_LANG.']))	{
					reset($this->conf['_LOCAL_LANG.']);
					while(list($k,$lA)=ea
[...]
= 1;
	}
	






















	/***************************
	 * 
	 * Database, queries
	 *
	 **************************/

	";i:1;i:1;}s:12:"content_size";i:790;s:13:"content_lines";i:47;s:6:"atLine";i:752;}i:49;a:8:{s:6:"header";s:99:"function pi_list_query($table,$count=0,$addWhere='',$mm_cat='',$groupBy='',$orderBy='',$query='')	{";s:11:"parentClass";s:12:"tslib_pibase";s:11:"sectionText";a:1:{i:0;s:17:"Database, queries";}s:4:"cDat";a:3:{s:4:"text";s:475:"

Makes a standard query for listing of records based on standard input vars from the 'browser' ($this->internal['results_at_a_time'] and $this->piVars['pointer']) and 'searchbox' ($this->piVars['sword'] and $this->internal['searchFieldList'])
Set $count to 1 if you wish to get a count(*) query for selecting the number of results.
Notice that the query will use $this->conf['pidList'] and $this->conf['recursive'] to generate a PID list within which to search for records.
";s:5:"param";a:7:{i:0;a:2:{i:0;s:6:"string";i:1;s:37:"The table name to make the query for.";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:71:"If set, you will get a "count(*)" query back instead of field selecting";}i:2;a:2:{i:0;s:6:"string";i:1;s:62:"Additional WHERE clauses (should be starting with " AND ....")";}i:3;a:2:{i:0;s:5:"mixed";i:1;s:272:"If an array, then it must contain the keys "table", "mmtable" and (optionally) "catUidList" defining a table to make a MM-relation to in the query (based on fields uid_local and uid_foreign). If not array, the query will be a plain query looking up data in only one table.";}i:4;a:2:{i:0;s:6:"string";i:1;s:62:"If set, this is added as a " GROUP BY ...." part of the query.";}i:5;a:2:{i:0;s:6:"string";i:1;s:249:"If set, this is added as a " ORDER BY ...." part of the query. The default is that an ORDER BY clause is made based on $this->internal['orderBy'] and $this->internal['descFlag'] where the orderBy field must be found in $this->internal['orderByList']";}i:6;a:2:{i:0;s:6:"string";i:1;s:289:"If set, this is taken as the first part of the query instead of what is created internally. Basically this should be a query starting with "FROM [table] WHERE ... AND ...". The $addWhere clauses and all the other stuff is still added. Only the tables and PID selecting clauses are bypassed";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:16:"The query build.";}}s:7:"content";a:2:{i:0;s:507:"			// Begin Query:
		if (!$query)	{
				// Fetches the list of PIDs to select from. 
				// TypoScript property .pidList is a comma list of pids. If blank, current page id is used.
				// TypoScript property .recursive is a int+ which determines how many levels down from the pids in the pid-list subpages should be included in the select.
			$pidList = $this->pi_getPidList(
[...]
uery = 'SELECT '.$this->pi_prependFieldsWithTable($table,$this->pi_listFields).' '.chr(10).$query;
		}
		return $query;
	}

	";i:1;i:1;}s:12:"content_size";i:2477;s:13:"content_lines";i:51;s:6:"atLine";i:814;}i:51;a:7:{s:6:"header";s:49:"function pi_getRecord($table,$uid,$checkPage=0)	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:3:{s:4:"text";s:94:"

Returns the row $uid from $table
(Simply calling $GLOBALS['TSFE']->sys_page->checkRecord())
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"The table name";}i:1;a:2:{i:0;s:7:"integer";i:1;s:36:"The uid of the record from the table";}i:2;a:2:{i:0;s:7:"boolean";i:1;s:91:"If $checkPage is set, it's required that the page on which the record resides is accessible";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:46:"If record is found, an array. Otherwise false.";}}s:7:"content";a:2:{i:0;s:81:"		return $GLOBALS['TSFE']->sys_page->checkRecord($table,$uid,$checkPage);	
	}
	
	";i:1;i:0;}s:12:"content_size";i:81;s:13:"content_lines";i:3;s:6:"atLine";i:875;}i:53;a:7:{s:6:"header";s:48:"function pi_getPidList($pid_list,$recursive=0)	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:3:{s:4:"text";s:73:"

Returns a commalist of page ids for a query (eg. 'WHERE pid IN (...)')
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:69:"$pid_list is a comma list of page ids (if empty current page is used)";}i:1;a:2:{i:0;s:7:"integer";i:1;s:91:"$recursive is an integer >=0 telling how deep to dig for pids under each entry in $pid_list";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:36:"List of PID values (comma separated)";}}s:7:"content";a:2:{i:0;s:444:"		if (!strcmp($pid_list,''))	$pid_list = $GLOBALS['TSFE']->id;
		$recursive = t3lib_div::intInRange($recursive,0);
		
		$pid_list_arr = array_unique(t3lib_div::trimExplode(',',$pid_list,1));
		$pid_list='';
		reset($pid_list_arr);
		while(list(,$val)=each($pid_list_arr))	{	
			$val = t3lib_div::intInRange($val,0);
			if ($val)	$pid_list.=$val.','.$this->cObj->getTreeList($val,$recursive);
		}
		return ereg_replace(',$','',$pid_list);
	}
	
	";i:1;i:0;}s:12:"content_size";i:444;s:13:"content_lines";i:13;s:6:"atLine";i:886;}i:55;a:7:{s:6:"header";s:55:"function pi_prependFieldsWithTable($table,$fieldList)	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:3:{s:4:"text";s:88:"

Having a comma list of fields ($fieldList) this is prepended with the $table.'.' name
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:21:"Table name to prepend";}i:1;a:2:{i:0;s:6:"string";i:1;s:78:"List of fields where each element will be prepended with the table name given.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:25:"List of fields processed.";}}s:7:"content";a:2:{i:0;s:184:"		$list=t3lib_div::trimExplode(',',$fieldList,1);
		$return=array();
		while(list(,$listItem)=each($list))	{
			$return[]=$table.'.'.$listItem;
		}
		return implode(',',$return);
	}

	";i:1;i:0;}s:12:"content_size";i:184;s:13:"content_lines";i:8;s:6:"atLine";i:907;}i:57;a:7:{s:6:"header";s:64:"function pi_getCategoryTableContents($table,$pid,$addWhere='')	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:3:{s:4:"text";s:90:"

Will select all records from the "category table", $table, and return them in an array.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:46:"The name of the category table to select from.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:51:"The page from where to select the category records.";}i:2;a:2:{i:0;s:6:"string";i:1;s:91:"Additional where clauses (basically the end of the query - could include a ORDER BY clause)";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:39:"The array with the category records in.";}}s:7:"content";a:2:{i:0;s:358:"		$query = 'SELECT * FROM '.$table.' WHERE pid='.intval($pid).$this->cObj->enableFields($table).' '.$addWhere;

		$outArr = array();
		$res = mysql(TYPO3_db,$query);
		while($row=mysql_fetch_assoc($res))	{
			$outArr[$row['uid']]=$row;
		}
		return $outArr;
	}







	




	/***************************
	 * 
	 * Various
	 *
	 **************************/
	
	";i:1;i:0;}s:12:"content_size";i:358;s:13:"content_lines";i:27;s:6:"atLine";i:924;}i:59;a:8:{s:6:"header";s:48:"function pi_isOnlyFields($fList,$lowerThan=-1)	{";s:11:"parentClass";s:12:"tslib_pibase";s:11:"sectionText";a:1:{i:0;s:7:"Various";}s:4:"cDat";a:3:{s:4:"text";s:265:"

Returns true if the piVars array has ONLY those fields entered that is set in the $fList (commalist) AND if none of those fields value is greater than $lowerThan field if they are integers.
Notice that this function will only work as long as values are integers.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:48:"List of fields (keys from piVars) to evaluate on";}i:1;a:2:{i:0;s:7:"integer";i:1;s:21:"Limit for the values.";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:39:"Returns true (1) if conditions are met.";}}s:7:"content";a:2:{i:0;s:328:"		$lowerThan = $lowerThan==-1 ? $this->pi_lowerThan : $lowerThan;

		$fList = t3lib_div::trimExplode(',',$fList,1);
		$tempPiVars = $this->piVars;
		while(list(,$k)=each($fList))	{
			if (!t3lib_div::testInt($tempPiVars[$k]) || $tempPiVars[$k]<$lowerThan)		unset($tempPiVars[$k]);
		}
		if (!count($tempPiVars))	return 1;
	}
	
	";i:1;i:0;}s:12:"content_size";i:328;s:13:"content_lines";i:10;s:6:"atLine";i:960;}i:61;a:4:{s:6:"header";s:33:"function pi_autoCache($inArray)	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:5:{s:4:"text";s:247:"

Returns true if the array $inArray contains only values allowed to be cached based on the configuration in $this->pi_autoCacheFields
Used by ->pi_linkTP_keepPIvars
This is an advanced form of evaluation of whether a URL should be cached or not.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:39:"An array with piVars values to evaluate";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:39:"Returns true (1) if conditions are met.";}s:5:"other";a:1:{i:0;s:27:"@see pi_linkTP_keepPIvars()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:23:"pi_linkTP_keepPIvars() ";}}}s:6:"atLine";i:980;}i:63;a:7:{s:6:"header";s:30:"function pi_RTEcssText($str)	{";s:11:"parentClass";s:12:"tslib_pibase";s:4:"cDat";a:5:{s:4:"text";s:345:"

Will process the input string with the parseFunc function from tslib_cObj based on configuration set in "lib.parseFunc_RTE" in the current TypoScript template.
This is useful for rendering of content in RTE fields where the transformation mode is set to "ts_css" or so.
Notice that this requires the use of "css_styled_content" to work right.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:32:"The input text string to process";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:20:"The processed string";}s:5:"other";a:1:{i:0;s:28:"@see tslib_cObj::parseFunc()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:24:"tslib_cObj::parseFunc() ";}}}s:7:"content";a:2:{i:0;s:225:"		$parseFunc = $GLOBALS['TSFE']->tmpl->setup['lib.']['parseFunc_RTE.'];
		if (is_array($parseFunc))	$str = $this->cObj->parseFunc($str, $parseFunc);
		return $str;
	}
}

// NO extension of class - does not make sense here.
?>";i:1;i:0;}s:12:"content_size";i:225;s:13:"content_lines";i:7;s:6:"atLine";i:1011;}}}s:28:"tslib/class.tslib_search.php";a:3:{s:8:"filesize";i:16742;s:6:"header";a:5:{s:4:"text";s:56:"

Search class used for the content object SEARCHRESULT
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:2:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:31:"@see	tslib_cObj::SEARCHRESULT()";}s:11:"other_index";a:2:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:4:"@see";a:1:{i:0;s:27:"tslib_cObj::SEARCHRESULT() ";}}}s:3:"DAT";a:13:{i:1;a:8:{s:6:"header";s:20:"class tslib_search {";s:5:"class";i:1;s:11:"parentClass";s:12:"tslib_search";s:4:"cDat";a:5:{s:4:"text";s:56:"

Search class used for the content object SEARCHRESULT
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:2:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:31:"@see	tslib_cObj::SEARCHRESULT()";}s:11:"other_index";a:2:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:4:"@see";a:1:{i:0;s:27:"tslib_cObj::SEARCHRESULT() ";}}}s:7:"content";a:2:{i:0;s:1799:"	var $tables = Array ();

	var $standalone = '';	// true / false - if the searchresult MAY NOT be a part-string (doesn't work yet. Does not find words with parentheses or periods before/after....beginning/end of a line is also a problem!)
	var $mixedcase = 'yes';		// true / false - matches both upper and lower case (doesn't work if you disable. Matches all cases currently)

	var $order_by = '';		// ORDER BY part of the query. (field-reference, eg. 'pages.uid'
	var $group_by = 'PRIMARY_KEY';		// Alternatively 'PRIMARY_KEY'; sorting by primary key

	var $default_operator = 'AND';	// Standard SQL-operator between words
	var $operator_translate_table_caseinsensitive = '1';
	var $operator_translate_table = Array (		// case-sensitiv. Defineres the words, which will be operators between words
		Array ('+' , 'AND'),
		Array ('-' , 'AND NOT'),
			// english
		Array ('AND' , 'AND'),
		Array ('OR' , 'OR'),
		Array ('NOT' , 'AND NOT'),
			// danish
		Array ('OG' , 'AND'),
		Array ('ELLER' , 'OR'),
		Array ('UDEN' , 'AND NOT')
	);

	// Internal
	var $sword_array;		// Contains the search-words and operators
	var $query_begin = '';		// Beginning of query
	var $query_end = '';			// Ending of query

	var $query;			// Contains the final query after processing.

	var $other_where_clauses;	// Addition to the whereclause. This could be used to limit search to a certain page or alike in the system.
	var $fTable;		// This is set with the foreign table that 'pages' are connected to.

	var $res_offset = 0;	// How many rows to offset from the beginning
	var $res_shows = 20;	// How many results to show (0 = no limit)
	var $res_count;			// Intern: How many results, there was last time (with the exact same searchstring.
	
	var $pageIdList='';		// List of pageIds.
	
	var $listOfSearchFields ='';

	";i:1;i:-1;}s:12:"content_size";i:1799;s:13:"content_lines";i:41;s:6:"atLine";i:85;}i:3;a:7:{s:6:"header";s:67:"function register_tables_and_columns($requestedCols,$allowedCols)	{";s:11:"parentClass";s:12:"tslib_search";s:4:"cDat";a:3:{s:4:"text";s:297:"

Creates the $this->tables-array.
The 'pages'-table is ALWAYS included as the search is page-based. Apart from this there may be one and only one table, joined with the pages-table. This table is the first table mentioned in the requested-list. If any more tables are set here, they are ignored.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:120:"is a list (-) of columns that we want to search. This could be input from the search-form (see TypoScript documentation)";}i:1;a:2:{i:0;s:6:"string";i:1;s:157:"$allowedCols: is the list of columns, that MAY be searched. All allowed cols are set as result-fields. All requested cols MUST be in the allowed-fields list.";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		$rCols=$this->explodeCols($requestedCols);
		$aCols=$this->explodeCols($allowedCols);
		
		foreach ($rCols as $k => $v)	{
			$rCols[$k]=trim($v);
			if (in_array($rCols[$k], $aCols))	{
				$parts = explode('.',$rCols[$k]);
				$this->tables[$parts[0]]['searchfields'][] = $parts[1];
//				$this->tables[$parts[0]]['resultfields']['uid']='uid';	// Cannot set this, because t
[...]
='pages')	{
				if (!$this->fTable)	{
					$this->fTable=$t;
				} else {
					unset($this->tables[$t]);
				}
			}
		}
	}

	";i:1;i:1;}s:12:"content_size";i:1034;s:13:"content_lines";i:34;s:6:"atLine";i:135;}i:5;a:7:{s:6:"header";s:27:"function explodeCols($in)	{";s:11:"parentClass";s:12:"tslib_search";s:4:"cDat";a:5:{s:4:"text";s:107:"

Function that can convert the syntax for entering which tables/fields the search should be conducted in.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:134:"This is the code-line defining the tables/fields to search. Syntax: '[table1].[field1]-[field2]-[field3] : [table2].[field1]-[field2]'";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:64:"An array where the values is "[table].[field]" strings to search";}s:5:"other";a:1:{i:0;s:34:"@see	register_tables_and_columns()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:30:"register_tables_and_columns() ";}}}s:7:"content";a:2:{i:0;s:364:"		$theArray = explode(':',$in);
		$out = Array();
		while(list(,$val)=each($theArray))	{
			$val=trim($val);
			$parts = explode('.',$val);
			if ($parts[0] && $parts[1])	{
				$subparts = explode('-',$parts[1]);
				while(list(,$piece)=each($subparts))	{
					$piece=trim($piece);
					if ($piece)		$out[]=$parts[0].'.'.$piece;
				}
			}
		}
		return $out;
	}

	";i:1;i:0;}s:12:"content_size";i:364;s:13:"content_lines";i:16;s:6:"atLine";i:177;}i:7;a:7:{s:6:"header";s:54:"function register_and_explode_search_string ($sword)	{";s:11:"parentClass";s:12:"tslib_search";s:4:"cDat";a:3:{s:4:"text";s:236:"

Takes a search-string (WITHOUT SLASHES or else it'll be a little sppooky , NOW REMEMBER to unslash!!)
Sets up $this->sword_array op with operators.
This function uses $this->operator_translate_table as well as $this->default_operator
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:29:"The input search-word string.";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		$sword = trim($sword);
		if ($sword)	{
			$components = $this->split($sword);
			$s_sword = '';	 // the searchword is stored here during the loop
			if (is_array($components))	{
				$i=0;
				$lastoper = '';
				reset($components);
				while (list($key,$val) = each ($components))	{
					$operator=$this->get_operator($val);
					if ($operator)	{
						$lastoper = $operato
[...]
i]['oper'] = ($lastoper) ? $lastoper : $this->default_operator;
						$lastoper = '';
						$i++;
					}
				}
			}
		}
	}

	";i:1;i:1;}s:12:"content_size";i:663;s:13:"content_lines";i:23;s:6:"atLine";i:202;}i:9;a:7:{s:6:"header";s:45:"function split($origSword, $specchars='+-')	{";s:11:"parentClass";s:12:"tslib_search";s:4:"cDat";a:3:{s:4:"text";s:368:"

Used to split a search-word line up into elements to search for. This function will detect boolean words like AND and OR, + and -, and even find sentences encapsulated in ""
This function also has the charm of still containing some of the original comments - in danish!
This function could be re-written to be more clean and effective - yet it's not that important.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:33:"The raw sword string from outside";}i:1;a:2:{i:0;s:6:"string";i:1;s:57:"Special chars which are used as operators (+- is default)";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:85:"Returns an ARRAY if there were search words, othervise the return value may be unset.";}}s:7:"content";a:2:{i:0;s:507:"		$sword = $origSword;
		$specs = '['.$this->quotemeta($specchars).']';

			// As long as $sword is true (that means $sword MUST be reduced little by little until its empty inside the loop!)
		while ($sword)	{
			if (ereg('^"',$sword))	{		// There was a double-quote and we will then look for the ending quote.
				$sword = ereg_replace('^"','',$sword);		// Fjerner først gås
[...]
[] = trim($reg[0]);
				$sword = trim(ereg_replace('^'.$this->quotemeta($reg[0]),'',$sword));
			}
		}
		return $value;
	}

	";i:1;i:1;}s:12:"content_size";i:1102;s:13:"content_lines";i:24;s:6:"atLine";i:235;}i:11;a:7:{s:6:"header";s:26:"function quotemeta($str)	{";s:11:"parentClass";s:12:"tslib_search";s:4:"cDat";a:3:{s:4:"text";s:123:"

Local version of quotemeta. This is the same as the PHP function but the vertical line, |, is also escaped with a slash.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:34:"String to pass through quotemeta()";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"Return value";}}s:7:"content";a:2:{i:0;s:53:"		return str_replace('|','\|',quotemeta($str));
	}

	";i:1;i:0;}s:12:"content_size";i:53;s:13:"content_lines";i:3;s:6:"atLine";i:266;}i:13;a:7:{s:6:"header";s:42:"function build_search_query ($endClause) {";s:11:"parentClass";s:12:"tslib_search";s:4:"cDat";a:6:{s:4:"text";s:180:"

This creates the search-query.
In TypoScript this is used for searching only records not hidden, start/endtimed and fe_grouped! (enable-fields, see tt_content)
Sets $this->query
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:63:"$endClause is some extra conditions that the search must match.";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:45:"Returns true no matter what - sweet isn't it!";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:31:"@see	tslib_cObj::SEARCHRESULT()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:27:"tslib_cObj::SEARCHRESULT() ";}}}s:7:"content";a:2:{i:0;s:507:"		if (is_array($this->tables))	{
			$tables = $this->tables;
			$primary_table = '';
			$query = 'SELECT';
				// Primary key table is found.
			reset($tables);
			while (list($key,$val) = each($tables))	{
				if ($tables[$key]['primary_key'])	{$primary_table = $key;}
			}
			if ($primary_table) {
				reset($tables);
				while (list($key,$val) = each($tables))	{
					$resu
[...]
y_part)	{
			$query_part='(0!=0)';
		}
		$this->query = $this->query_begin.$query_part.$this->query_end;
		return true;
	}

	";i:1;i:1;}s:12:"content_size";i:1925;s:13:"content_lines";i:76;s:6:"atLine";i:280;}i:15;a:7:{s:6:"header";s:48:"function build_search_query_for_searchwords ()	{";s:11:"parentClass";s:12:"tslib_search";s:4:"cDat";a:4:{s:4:"text";s:96:"

Creates the part of the SQL-sentence, that searches for the search-words ($this->sword_array)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:72:"Part of where class limiting result to the those having the search word.";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"		$tables = $this->tables;
		$sword_array = $this->sword_array;
		$query_part = '';
		$sp='';
		if ($this->standalone)	{$sp=' ';}		// Der indsættes et space foran og efter ordet, hvis det SKAL stå alene. Dette er dog ikke korrekt implementeret, fordi det ikke finder ord i starten, slutningen og i parenteser osv. Egentlig skal der være check på noget om der er alfanumeriske
[...]
m($query_part);
			if (!$query_part || trim($query_part)=='()')	{
				$query_part = '';
			}
			return $query_part;
		}
	}

	";i:1;i:1;}s:12:"content_size";i:1473;s:13:"content_lines";i:41;s:6:"atLine";i:363;}i:17;a:7:{s:6:"header";s:35:"function get_operator ($operator)	{";s:11:"parentClass";s:12:"tslib_search";s:4:"cDat";a:4:{s:4:"text";s:145:"

This returns an SQL search-operator (eg. AND, OR, NOT) translated from the current localized set of operators (eg. in danish OG, ELLER, IKKE).
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:61:"The possible operator to find in the internal operator array.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:60:"If found, the SQL operator for the localized input operator.";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:441:"		$operator = trim($operator);
		$op_array = $this->operator_translate_table;
		reset ($op_array);
		if ($this->operator_translate_table_caseinsensitive)	{
			$operator = strtoupper($operator);
		}
		while (list($key,$val) = each($op_array))	{
			$item = $op_array[$key][0];
			if ($this->operator_translate_table_caseinsensitive)	{
				$item = strtoupper($item);
			}
			if ($operator==$item)	{
				return $op_array[$key][1];
			}
		}
	}

	";i:1;i:0;}s:12:"content_size";i:441;s:13:"content_lines";i:17;s:6:"atLine";i:412;}i:19;a:7:{s:6:"header";s:25:"function count_query () {";s:11:"parentClass";s:12:"tslib_search";s:4:"cDat";a:3:{s:4:"text";s:61:"

Counts the results and sets the result in $this->res_count
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:31:"True, if $this->query was found";}}s:7:"content";a:2:{i:0;s:158:"		if ($this->query)	{
			$res = mysql(TYPO3_db, $this->query);
			echo mysql_error();
		    $this->res_count = mysql_num_rows($res);
			return true;
		}
	}

	";i:1;i:0;}s:12:"content_size";i:158;s:13:"content_lines";i:8;s:6:"atLine";i:435;}i:21;a:7:{s:6:"header";s:26:"function execute_query() {";s:11:"parentClass";s:12:"tslib_search";s:4:"cDat";a:3:{s:4:"text";s:60:"

Executes the search, sets result pointer in $this->result
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:49:"True, if $this->query was set and query performed";}}s:7:"content";a:2:{i:0;s:202:"		$query = $this->query;
		if ($query)	{
			if ($this->order_by)	$query.= ' ORDER BY '.$this->order_by;
	        $this->result = mysql(TYPO3_db, $query);
			echo mysql_error();
			return true;
		}
	}

	";i:1;i:0;}s:12:"content_size";i:202;s:13:"content_lines";i:9;s:6:"atLine";i:449;}i:23;a:4:{s:6:"header";s:28:"function get_searchwords()	{";s:11:"parentClass";s:12:"tslib_search";s:4:"cDat";a:3:{s:4:"text";s:131:"

Returns URL-parameters with the current search words.
Used when linking to result pages so that search words can be highlighted.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:35:"URL-parameters with the searchwords";}}s:6:"atLine";i:465;}i:25;a:7:{s:6:"header";s:33:"function get_searchwordsArray()	{";s:11:"parentClass";s:12:"tslib_search";s:4:"cDat";a:3:{s:4:"text";s:44:"

Returns an array with the search words in
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:89:"IF the internal sword_array contained search words it will return these, otherwise "void"";}}s:7:"content";a:2:{i:0;s:386:"		if (is_array($this->sword_array))	{
			reset($this->sword_array);
			while (list($key,$val)=each($this->sword_array))	{
				$swords[]=$val['sword'];
			}
		}
		return $swords;
	}
}	   




if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/class.tslib_search.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/class.tslib_search.php']);
}

?>";i:1;i:0;}s:12:"content_size";i:386;s:13:"content_lines";i:17;s:6:"atLine";i:481;}}}s:17:"tslib/showpic.php";a:3:{s:8:"filesize";i:7346;s:6:"header";a:5:{s:4:"text";s:87:"

Script Class, generating the page output.
Instantiated in the bottom of this script.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:3:"DAT";a:4:{i:1;a:8:{s:6:"header";s:24:"class SC_tslib_showpic {";s:5:"class";i:1;s:11:"parentClass";s:16:"SC_tslib_showpic";s:4:"cDat";a:5:{s:4:"text";s:87:"

Script Class, generating the page output.
Instantiated in the bottom of this script.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:7:"content";a:2:{i:0;s:267:"	var $content;		// Page content accumulated here.
	
		// Parameters loaded into these internal variables:
	var $file;
	var $width;
	var $height;
	var $sample;
	var $alternativeTempPath;
	var $effects;
	var $frame;
	var $bodyTag;
	var $title;
	var $wrap;
	var $md5;

	";i:1;i:-1;}s:12:"content_size";i:267;s:13:"content_lines";i:15;s:6:"atLine";i:89;}i:3;a:7:{s:6:"header";s:17:"function init()	{";s:11:"parentClass";s:16:"SC_tslib_showpic";s:4:"cDat";a:3:{s:4:"text";s:61:"

Init function, setting the input vars in the global space.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"			// Loading internal vars with the GET/POST parameters from outside:		
		$this->file = t3lib_div::GPvar('file');
		$this->width = t3lib_div::GPvar('width');
		$this->height = t3lib_div::GPvar('height');
		$this->sample = t3lib_div::GPvar('sample');
		$this->alternativeTempPath = t3lib_div::GPvar('alternativeTempPath');
		$this->effects = t3lib_div::GPvar('effects');
		$t
[...]
e('Parameter Error: No valid filepath');
		}
		if (!@is_file($test_file))	{
			die('The given file was not found');
		}
	}

	";i:1;i:1;}s:12:"content_size";i:1709;s:13:"content_lines";i:41;s:6:"atLine";i:110;}i:5;a:4:{s:6:"header";s:17:"function main()	{";s:11:"parentClass";s:16:"SC_tslib_showpic";s:4:"cDat";a:3:{s:4:"text";s:153:"

Main function which creates the image if needed and outputs the HTML code for the page displaying the image.
Accumulates the content in $this->content
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:6:"atLine";i:158;}i:7;a:7:{s:6:"header";s:25:"function printContent()	{";s:11:"parentClass";s:16:"SC_tslib_showpic";s:4:"cDat";a:3:{s:4:"text";s:42:"

Outputs the content from $this->content
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:359:"		echo $this->content;
	}
}

// Include extension?
if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/showpic.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['tslib/showpic.php']);
}












// Make instance:
$SOBE = t3lib_div::makeInstance('SC_tslib_showpic');
$SOBE->init();
$SOBE->main();
$SOBE->printContent();
?>";i:1;i:0;}s:12:"content_size";i:359;s:13:"content_lines";i:25;s:6:"atLine";i:206;}}}s:44:"tslib/media/scripts/example_callfunction.php";a:3:{s:8:"filesize";i:5592;s:6:"header";a:5:{s:4:"text";s:212:"

USER cObject EXAMPLE FILE

This is an example of how to use your own functions and classes directly from Typo3.
Used in the "testsite" package

Revised for TYPO3 3.6 June/2003 by Kasper Skårhøj
XHTML compliant
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:3:"DAT";a:6:{i:1;a:7:{s:6:"header";s:45:"function user_reverseString($content,$conf)	{";s:11:"parentClass";s:0:"";s:4:"cDat";a:3:{s:4:"text";s:459:"

Call custom function from TypoScript for data processing

Example can be found in the testsite package at the page-path "/Intro/TypoScript examples/Custom Dynamic Co.../Passing a string.../"
This TypoScript configuration will also demonstrate it:
 
includeLibs.something = media/scripts/example_callfunction.php
page = PAGE
page.typeNum=0
page.10 = TEXT
page.10 {
    value = Hello World
    preUserFunc = user_reverseString
    preUserFunc.uppercase = 1
}
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:196:"When custom functions are used for data processing the $content variable will hold the value to be processed. When functions are meant to just return some generated content this variable is empty.";}i:1;a:2:{i:0;s:5:"array";i:1;s:49:"TypoScript properties passed on to this function.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:103:"The input string reversed. If the TypoScript property "uppercase" was set it will also be in uppercase.";}}s:7:"content";a:2:{i:0;s:114:"	$content = strrev($content);
	if ($conf['uppercase'])	{
		$content=strtoupper($content);
	}
	return $content;
}

";i:1;i:0;}s:12:"content_size";i:114;s:13:"content_lines";i:7;s:6:"atLine";i:63;}i:3;a:7:{s:6:"header";s:41:"function user_printTime($content,$conf)	{";s:11:"parentClass";s:0:"";s:4:"cDat";a:3:{s:4:"text";s:395:"

Simply outputting the current time in red letters.

Example can be found in the testsite package at the page-path "/Intro/TypoScript examples/Custom Dynamic Co.../Mixing cached and.../"
This TypoScript configuration will also demonstrate it:
 
includeLibs.something = media/scripts/example_callfunction.php
page = PAGE
page.typeNum=0
page.10 = USER_INT
page.10 {
  userFunc = user_printTime
}
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:36:"Empty string (no content to process)";}i:1;a:2:{i:0;s:5:"array";i:1;s:24:"TypoScript configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:45:"HTML output, showing the current server time.";}}s:7:"content";a:2:{i:0;s:79:"	return '<font color="red">Dynamic time: '.date('H:i:s').'</font><br />';
}



";i:1;i:0;}s:12:"content_size";i:79;s:13:"content_lines";i:5;s:6:"atLine";i:89;}i:5;a:8:{s:6:"header";s:20:"class user_various	{";s:5:"class";i:1;s:11:"parentClass";s:12:"user_various";s:4:"cDat";a:3:{s:4:"text";s:61:"

Example of calling a method in a PHP class from TypoScript
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:78:"	var $cObj;		// Reference to the parent (calling) cObj set from TypoScript
	
	";i:1;i:-1;}s:12:"content_size";i:78;s:13:"content_lines";i:2;s:6:"atLine";i:99;}i:7;a:7:{s:6:"header";s:40:"function reverseString($content,$conf)	{";s:11:"parentClass";s:12:"user_various";s:4:"cDat";a:5:{s:4:"text";s:144:"

Doing the same as user_reverseString() but with a class. Also demonstrates how this gives us the ability to use methods in the parent object.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:32:"String to process (from stdWrap)";}i:1;a:2:{i:0;s:5:"array";i:1;s:47:"TypoScript properties passed on to this method.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:123:"The input string reversed. If the TypoScript property "uppercase" was set it will also be in uppercase. May also be linked.";}s:5:"other";a:1:{i:0;s:25:"@see user_reverseString()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:21:"user_reverseString() ";}}}s:7:"content";a:2:{i:0;s:239:"		$content = strrev($content);
		if ($conf['uppercase'])	{
			$content=$this->cObj->caseshift($content,'upper');
		}
		if ($conf['typolink'])	{
			$content=$this->cObj->getTypoLink($content,$conf['typolink']);
		}
		return $content;
	}
	
	";i:1;i:0;}s:12:"content_size";i:239;s:13:"content_lines";i:10;s:6:"atLine";i:110;}i:9;a:4:{s:6:"header";s:51:"function listContentRecordsOnPage($content,$conf)	{";s:11:"parentClass";s:12:"user_various";s:4:"cDat";a:3:{s:4:"text";s:404:"

Testing USER cObject:

Example can be found in the testsite package at the page-path "/Intro/TypoScript examples/Custom Dynamic Co.../Calling a method.../"
This TypoScript configuration will also demonstrate it:
 
includeLibs.something = media/scripts/example_callfunction.php
page = PAGE
page.typeNum=0
page.30 = USER
page.30 {
  userFunc = user_various->listContentRecordsOnPage
  reverseOrder = 1
}
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:36:"Empty string (no content to process)";}i:1;a:2:{i:0;s:5:"array";i:1;s:24:"TypoScript configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:71:"HTML output, showing content elements (in reverse order if configured.)";}}s:6:"atLine";i:140;}i:11;a:7:{s:6:"header";s:29:"function selectThem($query)	{";s:11:"parentClass";s:12:"user_various";s:4:"cDat";a:4:{s:4:"text";s:78:"

Selecting the records by input $query and returning the header field values
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:43:"MySQL query selecting the content elements.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:72:"The header field values of the content elements imploded by a <br /> tag";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:169:"		$res = mysql(TYPO3_db,$query);
		$output=array();
		while($row=mysql_fetch_assoc($res))	{
			$output[]=$row['header'];
		}
		return implode($output,'<br />');
	}
}

?>";i:1;i:0;}s:12:"content_size";i:169;s:13:"content_lines";i:9;s:6:"atLine";i:154;}}}s:49:"tslib/media/scripts/example_itemArrayProcFunc.php";a:3:{s:8:"filesize";i:4673;s:6:"header";a:5:{s:4:"text";s:158:"

This is an example of how to manipulate menu item arrays.
Used in the "testsite" package

Revised for TYPO3 3.6 June/2003 by Kasper Skårhøj
XHTML compliant
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:3:"DAT";a:2:{i:1;a:4:{s:6:"header";s:53:"function user_itemArrayProcFuncTest($menuArr,$conf)	{";s:11:"parentClass";s:0:"";s:4:"cDat";a:3:{s:4:"text";s:778:"

This function basically adds the parent page to the sublevel but only if the sublevel is empty!
It is also used to demostrate the menu state items

Example can be found in the testsite package at the page-path "/Intro/TypoScript examples/Menu object examples/Fake menu items/" and "/Intro/TypoScript examples/Menu object examples/Menu state test/"
This TypoScript configuration will also demonstrate it ("fake menu items"):
 
includeLibs.fakemenuitems = media/scripts/example_itemArrayProcFunc.php
page = PAGE
page.typeNum = 0
page.10 = HMENU
page.10.1 = TMENU
page.10.1.expAll = 1
page.10.1.NO {
  allWrap = | <BR>
  linkWrap = <b>|</b>
}
page.10.2 = TMENU
page.10.2.itemArrayProcFunc = user_itemArrayProcFuncTest
page.10.2.NO {
  allWrap = | <BR>
  linkWrap = <b> - |</b>
}
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:88:"The $menuArr array which simply is a num-array of page records which goes into the menu.";}i:1;a:2:{i:0;s:5:"array";i:1;s:162:"TypoScript configuration for the function. Notice that the property "parentObj" is a reference to the parent (calling) object (the tslib_Xmenu class instantiated)";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:27:"The modified $menuArr array";}}s:6:"atLine";i:72;}i:3;a:7:{s:6:"header";s:39:"function user_IProcFuncTest($I,$conf)	{";s:11:"parentClass";s:0:"";s:4:"cDat";a:5:{s:4:"text";s:144:"

Used in the menu item state example of the "testsite" package at page-path "/Intro/TypoScript examples/Menu object examples/Menu state test/"
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:52:"The menu item array, $this->I (in the parent object)";}i:1;a:2:{i:0;s:5:"array";i:1;s:162:"TypoScript configuration for the function. Notice that the property "parentObj" is a reference to the parent (calling) object (the tslib_Xmenu class instantiated)";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:83:"The processed $I array returned (and stored in $this->I of the parent object again)";}s:5:"other";a:1:{i:0;s:82:"@see tslib_menu::userProcess(), tslib_tmenu::writeMenu(), tslib_gmenu::writeMenu()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:77:"tslib_menu::userProcess(), tslib_tmenu::writeMenu(), tslib_gmenu::writeMenu()";}}}s:7:"content";a:2:{i:0;s:507:"	$itemRow = $conf['parentObj']->menuArr[$I['key']];

		// Setting the document status content to the value of the page title on mouse over	
	$I['linkHREF']['onMouseover'].='extraRollover(\''.rawurlencode($itemRow['title']).'\');';
	$conf['parentObj']->I = $I;
	$conf['parentObj']->setATagParts();
	$I = $conf['parentObj']->I;
	$I['parts']['ATag_begin']=$I['A1'];

	if ($conf[
[...]
'title']).'</h2>';
		t3lib_div::debug($itemRow);
		t3lib_div::debug($I);
		echo '<hr />';
	}
		// Returns:
	return $I;
}


?>";i:1;i:1;}s:12:"content_size";i:615;s:13:"content_lines";i:21;s:6:"atLine";i:102;}}}s:44:"tslib/media/scripts/example_keepRollover.php";a:3:{s:8:"filesize";i:3542;s:6:"header";a:5:{s:4:"text";s:227:"

Demonstrates how to manipulate menu generation so that a click on a menu item will trigger two (or more) frames to load an URL
Used in the "testsite" package

Revised for TYPO3 3.6 June/2003 by Kasper Skårhøj
XHTML compliant
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:3:"DAT";a:1:{i:1;a:7:{s:6:"header";s:47:"function user_keepRolloverAtOnClick($I,$conf)	{";s:11:"parentClass";s:0:"";s:4:"cDat";a:5:{s:4:"text";s:135:"

Example can be found in the testsite package at the page-path "/Intro/TypoScript examples/Menu object examples/Loading multiple.../"
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:52:"The menu item array, $this->I (in the parent object)";}i:1;a:2:{i:0;s:5:"array";i:1;s:162:"TypoScript configuration for the function. Notice that the property "parentObj" is a reference to the parent (calling) object (the tslib_Xmenu class instantiated)";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:83:"The processed $I array returned (and stored in $this->I of the parent object again)";}s:5:"other";a:1:{i:0;s:82:"@see tslib_menu::userProcess(), tslib_tmenu::writeMenu(), tslib_gmenu::writeMenu()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:77:"tslib_menu::userProcess(), tslib_tmenu::writeMenu(), tslib_gmenu::writeMenu()";}}}s:7:"content";a:2:{i:0;s:507:"	$itemRow = $conf['parentObj']->menuArr[$I['key']];

		// Setting the document status content to the value of the page title on mouse over	
	if (!$I['linkHREF']['TARGET'])	{
		$I['linkHREF']['HREF']='#';
		$I['linkHREF']['onClick'].='ARO_setLocation'.($conf['setLocation']).'('.$itemRow['uid'].',\''.$I['theName'].'\'); return false;';
	} else {
		$I['linkHREF']['onClick'].=
[...]
le']).'</h2>';
		t3lib_div::debug($itemRow);
		t3lib_div::debug($I);
		echo '<hr />';
	}
	
		// Returns $I:
	return $I;
}

?>";i:1;i:1;}s:12:"content_size";i:1494;s:13:"content_lines";i:42;s:6:"atLine";i:49;}}}s:43:"tslib/media/scripts/example_typolinkpop.php";a:3:{s:8:"filesize";i:2430;s:6:"header";a:5:{s:4:"text";s:94:"

Typo Link PopUp EXAMPLE!

Revised for TYPO3 3.6 June/2003 by Kasper Skårhøj
XHTML compliant
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:3:"DAT";a:1:{i:1;a:7:{s:6:"header";s:45:"function user_typoLinkPopUp($content,$conf)	{";s:11:"parentClass";s:0:"";s:4:"cDat";a:5:{s:4:"text";s:547:"

Demonstrates how to make typolink tags (<link ...>) open in a pop-up window

Example can be found in the testsite package at the page-path "/Intro/TypoScript examples/Small Tricks/Making Pop-up links/"
This TypoScript configuration will also demonstrate it:
 
tt_content.text.20.parseFunc.tags.link.typolink.userFunc = user_typoLinkPopUp
includeLibs.popup = media/scripts/example_typolinkpop.php
config.setJS_openPic = 1

page = PAGE
page.typeNum = 0
page.10 < styles.content.get

(Plus the "content (default)" static template included as well)
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:116:"In this case: An array with data you can use for processing; keys "url" and "aTagParams" contains something at least";}i:1;a:2:{i:0;s:5:"array";i:1;s:63:"TypoScript array with custom properties for this function call.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:22:"Return the new <a> tag";}s:5:"other";a:1:{i:0;s:27:"@see tslib_cObj::typoLink()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:23:"tslib_cObj::typoLink() ";}}}s:7:"content";a:2:{i:0;s:204:"	$TAG = 	'<a href="#" onClick="openPic(\''.htmlspecialchars($content['url']).'\',\'popupwin\',\'width=400,height=500,status=0,menubar=0\'); return false;"'.$content['aTagParams'].'>';
	return $TAG;
}


?>";i:1;i:0;}s:12:"content_size";i:204;s:13:"content_lines";i:5;s:6:"atLine";i:68;}}}s:35:"tslib/media/scripts/fe_adminLib.inc";a:3:{s:8:"filesize";i:67081;s:6:"header";a:5:{s:4:"text";s:1191:"

This library provides a HTML-template file based framework for Front End creating/editing/deleting records authenticated by email or fe_user login.
It is used in the extensions "direct_mail_subscription" and "feuser_admin" (and the depreciated(!) static template "plugin.feadmin.dmailsubscription" and "plugin.feadmin.fe_users" which are the old versions of these two extensions)
Further the extensions "t3consultancies" and "t3references" also uses this library but contrary to the "direct_mail_subscription" and "feuser_admin" extensions which relies on external HTML templates which must be adapted these two extensions delivers the HTML template code from inside.
Generally the fe_adminLib appears to be hard to use. Personally I feel turned off by all the template-file work involved and since it is very feature rich (and for that sake pretty stable!) there are lots of things that can go wrong - you feel. Therefore I like the concept used by "t3consultancies"/"t3references" since those extensions uses the library by supplying the HTML-template code automatically.
Suggestions for improvement and streamlining is welcome so this powerful class could be used more and effectively.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:2:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=396&cHash=d267c36546";}s:11:"other_index";a:2:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=396&cHash=d267c36546 ";}}}s:3:"DAT";a:34:{i:1;a:8:{s:6:"header";s:20:"class user_feAdmin	{";s:5:"class";i:1;s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:5:{s:4:"text";s:1191:"

This library provides a HTML-template file based framework for Front End creating/editing/deleting records authenticated by email or fe_user login.
It is used in the extensions "direct_mail_subscription" and "feuser_admin" (and the depreciated(!) static template "plugin.feadmin.dmailsubscription" and "plugin.feadmin.fe_users" which are the old versions of these two extensions)
Further the extensions "t3consultancies" and "t3references" also uses this library but contrary to the "direct_mail_subscription" and "feuser_admin" extensions which relies on external HTML templates which must be adapted these two extensions delivers the HTML template code from inside.
Generally the fe_adminLib appears to be hard to use. Personally I feel turned off by all the template-file work involved and since it is very feature rich (and for that sake pretty stable!) there are lots of things that can go wrong - you feel. Therefore I like the concept used by "t3consultancies"/"t3references" since those extensions uses the library by supplying the HTML-template code automatically.
Suggestions for improvement and streamlining is welcome so this powerful class could be used more and effectively.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:2:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=396&cHash=d267c36546";}s:11:"other_index";a:2:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=396&cHash=d267c36546 ";}}}s:7:"content";a:2:{i:0;s:870:"	var $dataArr = array();
	var $failureMsg = array();
	var $theTable = '';
	var $thePid = 0;
	var $markerArray = array();
	var $templateCode='';
	var $cObj;

	var $cmd;
	var $preview;
	var $backURL;
	var $recUid;
	var $failure=0;		// is set if data did not have the required fields set.
	var $error='';
	var $saved=0;		// is set if data is saved
	var $requiredArr;
	var $currentArr = array();
	var $previewLabel='';
	var $nc = '';		// '&no_cache=1' if you want that parameter sent.
	var $additionalUpdateFields='';
	var $emailMarkPrefix = 'EMAIL_TEMPLATE_';
	var $codeLength;
	var $cmdKey;
	var $fileFunc='';	// Set to a basic_filefunc object 
	var $filesStoredInUploadFolders=array();		// This array will hold the names of files transferred to the uploads/* folder if any. If the records are NOT saved, these files should be deleted!! Currently this is not working!

	
	";i:1;i:-1;}s:12:"content_size";i:870;s:13:"content_lines";i:27;s:6:"atLine";i:127;}i:3;a:7:{s:6:"header";s:31:"function init($content,$conf)	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:5:{s:4:"text";s:262:"

Main function. Called from TypoScript.
This 
- initializes internal variables, 
- fills in the markerArray with default substitution string
- saves/emails if such commands are sent
- calls functions for display of the screen for editing/creation/deletion etc.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:21:"Empty string, ignore.";}i:1;a:2:{i:0;s:5:"array";i:1;s:75:"TypoScript properties following the USER_INT object which uses this library";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"HTML content";}s:5:"other";a:1:{i:0;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=396&cHash=d267c36546";}s:11:"other_index";a:1:{s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=396&cHash=d267c36546 ";}}}s:7:"content";a:2:{i:0;s:507:"		$this->conf = $conf;

			// template file is fetched.
		$this->templateCode = $this->conf['templateContent'] ? $this->conf['templateContent'] : $this->cObj->fileResource($this->conf['templateFile']);

			// Getting the cmd var
		$this->cmd = (string)t3lib_div::GPvar('cmd');
			// Getting the preview var
		$this->preview = (string)t3lib_div::GPvar('preview');
			// backUR
[...]




	/*****************************************
	 * 
	 * Data processing
	 * 
	 *****************************************/

	";i:1;i:1;}s:12:"content_size";i:7612;s:13:"content_lines";i:214;s:6:"atLine";i:168;}i:5;a:8:{s:6:"header";s:24:"function parseValues()	{";s:11:"parentClass";s:12:"user_feAdmin";s:11:"sectionText";a:1:{i:0;s:15:"Data processing";}s:4:"cDat";a:5:{s:4:"text";s:415:"

Performs processing on the values found in the input data array, $this->dataArr.
The processing is done according to configuration found in TypoScript
Examples of this could be to force a value to an integer, remove all non-alphanumeric characters, trimming a value, upper/lowercase it, or process it due to special types like files submitted etc.
Called from init() if the $this->dataArr is found to be an array
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:11:"@see init()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:7:"init() ";}}}s:7:"content";a:2:{i:0;s:507:"		if (is_array($this->conf['parseValues.']))	{
			reset($this->conf['parseValues.']);
			while(list($theField,$theValue)=each($this->conf['parseValues.']))	{
				$listOfCommands = t3lib_div::trimExplode(',',$theValue,1);
				while(list(,$cmd)=each($listOfCommands))	{
					$cmdParts = split('\[|\]',$cmd);	// Point is to enable parameters after each command enclosed in brack
[...]
		}
							$this->dataArr[$theField]=hexdec(substr(md5(serialize($hashArray)),0,8));
						break;
					}
				}
			}
		}
	}

	";i:1;i:1;}s:12:"content_size";i:3093;s:13:"content_lines";i:84;s:6:"atLine";i:392;}i:7;a:7:{s:6:"header";s:44:"function processFiles($cmdParts,$theField)	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:6:{s:4:"text";s:154:"

Processing of files.
NOTICE: for now files can be handled only on creation of records. But a more advanced feature is that PREVIEW of files is handled.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:146:"Array with cmd-parts (from parseValues()). This will for example contain information about allowed file extensions and max size of uploaded files.";}i:1;a:2:{i:0;s:6:"string";i:1;s:29:"The fieldname with the files.";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:18:"@see parseValues()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:14:"parseValues() ";}}}s:7:"content";a:2:{i:0;s:507:"//debug($GLOBALS['HTTP_POST_FILES']);
			// First, make an array with the filename and file reference, whether the file is just uploaded or a preview 
		$filesArr=array();
		if (is_string($this->dataArr[$theField]))	{		// files from preview.
			$tmpArr = explode(',',$this->dataArr[$theField]);
			reset($tmpArr);
			while(list(,$val)=each($tmpArr))	{
				$valParts = explode
[...]
eDestFile;
				}
			}
				// Implode the list of filenames
			$this->dataArr[$theField]=implode(',',$fileNameList);
		}
	}

	";i:1;i:1;}s:12:"content_size";i:4236;s:13:"content_lines";i:92;s:6:"atLine";i:487;}i:9;a:7:{s:6:"header";s:27:"function overrideValues()	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:5:{s:4:"text";s:106:"

Overriding values in $this->dataArr if configured for that in TypoScript ([edit/create].overrideValues)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:11:"@see init()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:7:"init() ";}}}s:7:"content";a:2:{i:0;s:316:"		// Addition of overriding values
		if (is_array($this->conf[$this->cmdKey.'.']['overrideValues.']))	{
			reset($this->conf[$this->cmdKey.'.']['overrideValues.']);
			while(list($theField,$theValue)=each($this->conf[$this->cmdKey.'.']['overrideValues.']))	{
				$this->dataArr[$theField] = $theValue;
			}
		}
	}

	";i:1;i:0;}s:12:"content_size";i:316;s:13:"content_lines";i:9;s:6:"atLine";i:586;}i:11;a:7:{s:6:"header";s:26:"function defaultValues()	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:5:{s:4:"text";s:123:"

Called if there is no input array in $this->dataArr. Then this function sets the default values configured in TypoScript
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:11:"@see init()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:7:"init() ";}}}s:7:"content";a:2:{i:0;s:311:"			// Addition of default values
		if (is_array($this->conf[$this->cmdKey.'.']['defaultValues.']))	{
			reset($this->conf[$this->cmdKey.'.']['defaultValues.']);
			while(list($theField,$theValue)=each($this->conf[$this->cmdKey.'.']['defaultValues.']))	{
				$this->dataArr[$theField] = $theValue;
			}
		}
	}

	";i:1;i:0;}s:12:"content_size";i:311;s:13:"content_lines";i:9;s:6:"atLine";i:602;}i:13;a:7:{s:6:"header";s:23:"function evalValues()	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:5:{s:4:"text";s:568:"

This will evaluate the input values from $this->dataArr to see if they conforms with the requirements configured in TypoScript per field. 
For example this could be checking if a field contains a valid email address, a unique value, a value within a certain range etc.
It will populate arrays like $this->failure and $this->failureMsg with error messages (which can later be displayed in the template). Mostly it does NOT alter $this->dataArr (such parsing of values was done by parseValues())
Works based on configuration in TypoScript key [create/edit].evalValues
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:26:"@see init(), parseValues()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:21:"init(), parseValues()";}}}s:7:"content";a:2:{i:0;s:507:"		// Check required, set failure if not ok.
		reset($this->requiredArr);
		$tempArr=array();
		while(list(,$theField)=each($this->requiredArr))	{
			if (!trim($this->dataArr[$theField]))	{
				$tempArr[]=$theField;
			}
		}

		// Evaluate: This evaluates for more advanced things than 'required' does. But it returns the same error code, so you must let the required-message 
[...]
eField],'<br />') : '';
			}
		}
		$this->failure=implode($tempArr,',');	 //$failure will show which fields were not OK
	}

	";i:1;i:1;}s:12:"content_size";i:5278;s:13:"content_lines";i:113;s:6:"atLine";i:621;}i:15;a:7:{s:6:"header";s:42:"function userProcess($mConfKey,$passVar)	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:5:{s:4:"text";s:143:"

Preforms user processing of input array - triggered right after the function call to evalValues() IF TypoScript property "evalFunc" was set.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:231:"Key pointing to the property in TypoScript holding the configuration for this processing (here: "evalFunc.*"). Well: at least its safe to say that "parentObj" in this array passed to the function is a reference back to this object.";}i:1;a:2:{i:0;s:5:"array";i:1;s:40:"The $this->dataArr passed for processing";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:39:"The processed $passVar ($this->dataArr)";}s:5:"other";a:1:{i:0;s:25:"@see init(), evalValues()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:20:"init(), evalValues()";}}}s:7:"content";a:2:{i:0;s:238:"		if ($this->conf[$mConfKey])	{
			$funcConf = $this->conf[$mConfKey.'.'];
			$funcConf['parentObj']=&$this;
			$passVar = $GLOBALS['TSFE']->cObj->callUserFunction($this->conf[$mConfKey], $funcConf, $passVar);
		}
		return $passVar;
	}

	";i:1;i:0;}s:12:"content_size";i:238;s:13:"content_lines";i:8;s:6:"atLine";i:743;}i:17;a:7:{s:6:"header";s:54:"function userProcess_alt($confVal,$confArr,$passVar)	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:5:{s:4:"text";s:29:"

User processing of contnet
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:57:"Value of the TypoScript object triggering the processing.";}i:1;a:2:{i:0;s:5:"array";i:1;s:158:"Properties of the TypoScript object triggering the processing. The key "parentObj" in this array is passed to the function as a reference back to this object.";}i:2;a:2:{i:0;s:5:"mixed";i:1;s:25:"Input variable to process";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:34:"Processed input variable, $passVar";}s:5:"other";a:1:{i:0;s:56:"@see userProcess(), save(), modifyDataArrForFormUpdate()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:51:"userProcess(), save(), modifyDataArrForFormUpdate()";}}}s:7:"content";a:2:{i:0;s:349:"		if ($confVal)	{
			$funcConf = $confArr;
			$funcConf['parentObj']=&$this;
			$passVar = $GLOBALS['TSFE']->cObj->callUserFunction($confVal, $funcConf, $passVar);
		}
		return $passVar;
	}






















	/*****************************************
	 * 
	 * Database manipulation functions
	 * 
	 *****************************************/

	";i:1;i:0;}s:12:"content_size";i:349;s:13:"content_lines";i:35;s:6:"atLine";i:761;}i:19;a:8:{s:6:"header";s:17:"function save()	{";s:11:"parentClass";s:12:"user_feAdmin";s:11:"sectionText";a:1:{i:0;s:31:"Database manipulation functions";}s:4:"cDat";a:5:{s:4:"text";s:60:"

Performs the saving of records, either edited or created.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:11:"@see init()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:7:"init() ";}}}s:7:"content";a:2:{i:0;s:507:"		switch($this->cmd)	{
			case 'edit':
				$theUid = $this->dataArr['uid'];
				$origArr = $GLOBALS['TSFE']->sys_page->getRawRecord($this->theTable,$theUid);		// Fetches the original record to check permissions
				if ($this->conf['edit'] && ($GLOBALS['TSFE']->loginUser || $this->aCAuth($origArr)))	{	// Must be logged in in order to edit  (OR be validated by email)
					$n
[...]
this->conf['create.']['userFunc_afterSave.'],array('rec'=>$this->currentArr));
					$this->saved=1;
				}
			break;
		}
	}

	";i:1;i:1;}s:12:"content_size";i:2993;s:13:"content_lines";i:58;s:6:"atLine";i:803;}i:21;a:7:{s:6:"header";s:25:"function deleteRecord()	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:5:{s:4:"text";s:314:"

Deletes the record from table/uid, $this->theTable/$this->recUid, IF the fe-user has permission to do so.
If the deleted flag should just be set, then it is done so. Otherwise the record truely is deleted along with any attached files.
Called from init() if "cmd" was set to "delete" (and some other conditions)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:4:"void";}s:5:"other";a:1:{i:0;s:11:"@see init()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:7:"init() ";}}}s:7:"content";a:2:{i:0;s:507:"		if ($this->conf['delete'])	{	// If deleting is enabled
			$origArr = $GLOBALS['TSFE']->sys_page->getRawRecord($this->theTable,  $this->recUid);
			if ($GLOBALS['TSFE']->loginUser || $this->aCAuth($origArr))	{	// Must be logged in OR be authenticated by the aC code in order to delete
					// If the recUid selects a record.... (no check here)
				if (is_array($origArr))	{	
[...]
$origArr;
						$this->saved=1;
					} else {
						$this->error='###TEMPLATE_NO_PERMISSIONS###';
					}
				}
			}
		}
	}

	";i:1;i:1;}s:12:"content_size";i:1091;s:13:"content_lines";i:22;s:6:"atLine";i:870;}i:23;a:7:{s:6:"header";s:38:"function deleteFilesFromRecord($uid)	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:6:{s:4:"text";s:99:"

Deletes the files attached to a record and updates the record.
Table/uid is $this->theTable/$uid
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:55:"Uid number of the record to delete from $this->theTable";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:19:"@see deleteRecord()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:15:"deleteRecord() ";}}}s:7:"content";a:2:{i:0;s:507:"		$table = $this->theTable;
		$rec = $GLOBALS['TSFE']->sys_page->getRawRecord($table,$uid);
		
		$GLOBALS['TSFE']->includeTCA();
		t3lib_div::loadTCA($table);
		reset($GLOBALS['TCA'][$table]['columns']);
		$iFields=array();
		while(list($field,$conf)=each($GLOBALS['TCA'][$table]['columns']))	{
			if ($conf['config']['type']=='group' && $conf['config']['internal_type']=='fi
[...]
***********************************
	 * 
	 * Command "display" functions
	 * 
	 *****************************************/

	";i:1;i:1;}s:12:"content_size";i:886;s:13:"content_lines";i:50;s:6:"atLine";i:902;}i:25;a:8:{s:6:"header";s:32:"function displayDeleteScreen()	{";s:11:"parentClass";s:12:"user_feAdmin";s:11:"sectionText";a:1:{i:0;s:27:"Command "display" functions";}s:4:"cDat";a:5:{s:4:"text";s:48:"

Creates the preview display of delete actions
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"HTML content";}s:5:"other";a:1:{i:0;s:11:"@see init()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:7:"init() ";}}}s:7:"content";a:2:{i:0;s:507:"		if ($this->conf['delete'])	{	// If deleting is enabled
			$origArr = $GLOBALS['TSFE']->sys_page->getRawRecord($this->theTable,  $this->recUid);
			if ($GLOBALS['TSFE']->loginUser || $this->aCAuth($origArr))	{	// Must be logged in OR be authenticated by the aC code in order to delete
					// If the recUid selects a record.... (no check here)
				if (is_array($origArr))	{	
[...]
e('###TEMPLATE_AUTH###');
			}
		} else {
			$content.='Delete-option is not set in TypoScript';
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:1293;s:13:"content_lines";i:21;s:6:"atLine";i:959;}i:27;a:7:{s:6:"header";s:32:"function displayCreateScreen()	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:5:{s:4:"text";s:42:"

Creates the "create" screen for records
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"HTML content";}s:5:"other";a:1:{i:0;s:11:"@see init()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:7:"init() ";}}}s:7:"content";a:2:{i:0;s:507:"		if ($this->conf['create'])	{
			$templateCode = $this->cObj->getSubpart($this->templateCode, ((!$GLOBALS['TSFE']->loginUser||$this->conf['create.']['noSpecialLoginForm'])?'###TEMPLATE_CREATE'.$this->previewLabel.'###':'###TEMPLATE_CREATE_LOGIN'.$this->previewLabel.'###'));
			$failure = t3lib_div::GPvar('noWarnings')?'':$this->failure;
			if (!$failure)	$templateCode = $
[...]
s->theTable.'_form', 'FE['.$this->theTable.']', $this->fieldList.$this->additionalUpdateFields);
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:1108;s:13:"content_lines";i:16;s:6:"atLine";i:987;}i:29;a:7:{s:6:"header";s:30:"function displayEditScreen()	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:5:{s:4:"text";s:38:"

Creates the edit-screen for records
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"HTML content";}s:5:"other";a:1:{i:0;s:11:"@see init()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:7:"init() ";}}}s:7:"content";a:2:{i:0;s:507:"		if ($this->conf['edit'])	{	// If editing is enabled
			$origArr = $GLOBALS['TSFE']->sys_page->getRawRecord($this->theTable,  $this->dataArr['uid']?$this->dataArr['uid']:$this->recUid);

			if ($GLOBALS['TSFE']->loginUser || $this->aCAuth($origArr))	{	// Must be logged in OR be authenticated by the aC code in order to edit
					// If the recUid selects a record.... (no ch
[...]
ate('###TEMPLATE_AUTH###');
			}
		} else {
			$content.='Edit-option is not set in TypoScript';
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:2547;s:13:"content_lines";i:42;s:6:"atLine";i:1010;}i:31;a:7:{s:6:"header";s:36:"function displayEditForm($origArr)	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:6:{s:4:"text";s:225:"

Subfunction for displayEditScreen(); Takes a record and creates an edit form based on the template code for it.
This function is called if the user is editing a record and permitted to do so. Checked in displayEditScreen()
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:33:"The array with the record to edit";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"HTML content";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:24:"@see displayEditScreen()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:20:"displayEditScreen() ";}}}s:7:"content";a:2:{i:0;s:507:"		$currentArr = is_array($this->dataArr) ? $this->dataArr+$origArr : $origArr;

		if ($this->conf['debug'])	debug('displayEditForm(): '.'###TEMPLATE_EDIT'.$this->previewLabel.'###',1);
		$templateCode = $this->cObj->getSubpart($this->templateCode, '###TEMPLATE_EDIT'.$this->previewLabel.'###');
		$failure = t3lib_div::GPvar('noWarnings')?'':$this->failure;
		if (!$failure)	
[...]
his->theTable.'_form',  'FE['.$this->theTable.']', $this->fieldList.$this->additionalUpdateFields);

		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:1260;s:13:"content_lines";i:21;s:6:"atLine";i:1062;}i:33;a:7:{s:6:"header";s:27:"function procesSetFixed()	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:3:{s:4:"text";s:379:"

Processes socalled "setfixed" commands. These are commands setting a certain field in a certain record to a certain value. Like a link you can click in an email which will unhide a record to enable something. Or likewise a link which can delete a record by a single click.
The idea is that only some allowed actions like this is allowed depending on the configured TypoScript.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:48:"HTML content displaying the status of the action";}}s:7:"content";a:2:{i:0;s:507:"		if ($this->conf['setfixed'])	{
			$theUid = intval($this->recUid);
			$origArr = $GLOBALS['TSFE']->sys_page->getRawRecord($this->theTable,  $theUid);
			$fD = t3lib_div::GPvar('fD');
			$sFK = t3lib_div::GPvar('sFK');

			$fieldArr=array();
			if (is_array($fD) || $sFK=='DELETE')	{
				if (is_array($fD))	{
					reset($fD);
					while(list($field,$value)=each($fD))	{
				
[...]
*******************************
	 * 
	 * Template processing functions
	 * 
	 *****************************************/



	";i:1;i:1;}s:12:"content_size";i:1916;s:13:"content_lines";i:78;s:6:"atLine";i:1090;}i:35;a:8:{s:6:"header";s:49:"function removeRequired($templateCode,$failure)	{";s:11:"parentClass";s:12:"user_feAdmin";s:11:"sectionText";a:1:{i:0;s:29:"Template processing functions";}s:4:"cDat";a:3:{s:4:"text";s:387:"

Remove required parts from template code string
	 Works like this: 
		 - You insert subparts like this ###SUB_REQUIRED_FIELD_'.$theField.'### in the template that tells what is required for the field, if it's not correct filled in.
		 - These subparts are all removed, except if the field is listed in $failure string!

		Only fields that are found in $this->requiredArr is processed.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:22:"The template HTML code";}i:1;a:2:{i:0;s:6:"string";i:1;s:75:"Comma list of fields which has errors (and therefore should not be removed)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:32:"The processed template HTML code";}}s:7:"content";a:2:{i:0;s:282:"		reset($this->requiredArr);
		while(list(,$theField)=each($this->requiredArr))	{
			if (!t3lib_div::inList($failure,$theField))	{
				$templateCode = $this->cObj->substituteSubpart($templateCode, '###SUB_REQUIRED_FIELD_'.$theField.'###', '');
			}
		}
		return $templateCode;
	}

	";i:1;i:0;}s:12:"content_size";i:282;s:13:"content_lines";i:9;s:6:"atLine";i:1181;}i:37;a:7:{s:6:"header";s:39:"function getPlainTemplate($key,$r='')	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:5:{s:4:"text";s:55:"

Returns template subpart HTML code for the key given
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:37:"Subpart marker to return subpart for.";}i:1;a:2:{i:0;s:5:"array";i:1;s:119:"Optional data record array. If set, then all fields herein will also be substituted if found as markers in the template";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:77:"The subpart with all markers found in current $this->markerArray substituted.";}s:5:"other";a:1:{i:0;s:24:"@see fillInMarkerArray()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:20:"fillInMarkerArray() ";}}}s:7:"content";a:2:{i:0;s:369:"		if ($this->conf['debug'])	debug('getPlainTemplate(): '.$key,1);
		$templateCode = $this->cObj->getSubpart($this->templateCode, $key);
		$this->setCObjects($templateCode,is_array($r)?$r:array());
		return  $this->cObj->substituteMarkerArray(
				$templateCode, 
				is_array($r) ? $this->cObj->fillInMarkerArray($this->markerArray, $r) : $this->markerArray
			);
	}

	";i:1;i:0;}s:12:"content_size";i:369;s:13:"content_lines";i:9;s:6:"atLine";i:1199;}i:39;a:7:{s:6:"header";s:48:"function modifyDataArrForFormUpdate($inputArr)	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:5:{s:4:"text";s:131:"

Modifies input array for passing on to tslib_cObj::getUpdateJS() which produces some JavaScript for form evaluation or the like.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:14:"The data array";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:25:"The processed input array";}s:5:"other";a:1:{i:0;s:72:"@see displayCreateScreen(), displayEditForm(), tslib_cObj::getUpdateJS()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:67:"displayCreateScreen(), displayEditForm(), tslib_cObj::getUpdateJS()";}}}s:7:"content";a:2:{i:0;s:507:"		if (is_array($this->conf[$this->cmdKey.'.']['evalValues.']))	{
			reset($this->conf[$this->cmdKey.'.']['evalValues.']);
			while(list($theField,$theValue)=each($this->conf[$this->cmdKey.'.']['evalValues.']))	{
				$listOfCommands = t3lib_div::trimExplode(',',$theValue,1);
				while(list(,$cmd)=each($listOfCommands))	{
					$cmdParts = split('\[|\]',$cmd);	// Point is to 
[...]
			$this->conf['userFunc_updateArray'],
			$this->conf['userFunc_updateArray.'],
			$inputArr
		);

		return $inputArr;
	}

	";i:1;i:1;}s:12:"content_size";i:2035;s:13:"content_lines";i:59;s:6:"atLine";i:1216;}i:41;a:7:{s:6:"header";s:91:"function setCObjects($templateCode,$currentArr=array(),$markerArray='',$specialPrefix='')	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:3:{s:4:"text";s:242:"

Will render TypoScript cObjects (configured in $this->conf['cObjects.']) and add their content to keys in a markerArray, either the array passed to the function or the internal one ($this->markerArray) if the input $markerArray is not set.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:128:"The current template code string. Is used to check if the marker string is found and if not, the content object is not rendered!";}i:1;a:2:{i:0;s:5:"array";i:1;s:71:"An alternative data record array (if empty then $this->dataArr is used)";}i:2;a:2:{i:0;s:5:"mixed";i:1;s:177:"An alternative markerArray to fill in (instead of $this->markerArray). If you want to set the cobjects in the internal $this->markerArray, then just set this to non-array value.";}i:3;a:2:{i:0;s:6:"string";i:1;s:46:"Optional prefix to set for the marker strings.";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:38:"The processed $markerArray (if given).";}}s:7:"content";a:2:{i:0;s:507:"		if (is_array($this->conf['cObjects.']))	{
			reset($this->conf['cObjects.']);
	
			while(list($theKey,$theConf)=each($this->conf['cObjects.']))	{
				if (!strstr($theKey,'.'))	{
					if (strstr($templateCode,'###'.$specialPrefix.'CE_'.$theKey.'###'))	{
						$cObjCode = $this->cObj->cObjGetSingle($this->conf['cObjects.'][$theKey], $this->conf['cObjects.'][$theKey.'.'], '
[...]











	/*****************************************
	 * 
	 * Emailing
	 * 
	 *****************************************/

	";i:1;i:1;}s:12:"content_size";i:1391;s:13:"content_lines";i:55;s:6:"atLine";i:1285;}i:43;a:8:{s:6:"header";s:25:"function sendInfoMail()	{";s:11:"parentClass";s:12:"user_feAdmin";s:11:"sectionText";a:1:{i:0;s:8:"Emailing";}s:4:"cDat";a:5:{s:4:"text";s:18:"

Sends info mail
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:20:"HTML content message";}s:5:"other";a:1:{i:0;s:37:"@see init(),compileMail(), sendMail()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:32:"init(),compileMail(), sendMail()";}}}s:7:"content";a:2:{i:0;s:507:"		if ($this->conf['infomail'] && $this->conf['email.']['field'])	{
			$fetch = t3lib_div::GPvar('fetch');
			if (isset($fetch))	{
					// Getting infomail config.
				$key= trim(t3lib_div::GPvar('key'));
				if (is_array($this->conf['infomail.'][$key.'.']))		{
					$config = $this->conf['infomail.'][$key.'.'];
				} else {
					$config = $this->conf['infomail.']['default.'
[...]
	} else $content='Error: infomail option is not available or emailField is not setup in TypoScript';
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:1580;s:13:"content_lines";i:38;s:6:"atLine";i:1347;}i:45;a:7:{s:6:"header";s:74:"function compileMail($key, $DBrows, $recipient, $setFixedConfig=array())	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:3:{s:4:"text";s:175:"

Compiles and sends a mail based on input values + template parts. Looks for a normal and an "-admin" template and may send both kinds of emails. See documentation in TSref.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:116:"A key which together with $this->emailMarkPrefix will identify the part from the template code to use for the email.";}i:1;a:2:{i:0;s:5:"array";i:1;s:65:"An array of records which fields are substituted in the templates";}i:2;a:2:{i:0;s:5:"mixed";i:1;s:195:"Mail recipient. If string then its supposed to be an email address. If integer then its a uid of a fe_users record which is looked up and the email address from here is used for sending the mail.";}i:3;a:2:{i:0;s:5:"array";i:1;s:76:"Additional fields to set in the markerArray used in the substitution process";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		$GLOBALS['TT']->push('compileMail');
		$mailContent='';
		$key = $this->emailMarkPrefix.$key;

		$userContent['all'] = trim($this->cObj->getSubpart($this->templateCode, '###'.$key.'###'));
		$adminContent['all'] = trim($this->cObj->getSubpart($this->templateCode, '###'.$key.'-ADMIN###'));
		$userContent['rec'] = $this->cObj->getSubpart($userContent['all'], '###SUB_RECORD
[...]
l($recipient, $this->conf['email.']['admin'], $userContent['final'], $adminContent['final']);
		$GLOBALS['TT']->pull();
	}

	";i:1;i:1;}s:12:"content_size";i:1880;s:13:"content_lines";i:34;s:6:"atLine";i:1395;}i:47;a:7:{s:6:"header";s:70:"function sendMail($recipient, $admin, $content='', $adminContent='')	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:6:{s:4:"text";s:76:"

Actually sends the requested mails (through $this->cObj->sendNotifyEmail)
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:33:"Recipient email address (or list)";}i:1;a:2:{i:0;s:6:"string";i:1;s:101:"Possible "admin" email address. Will enable sending of admin emails if also $adminContent is provided";}i:2;a:2:{i:0;s:6:"string";i:1;s:37:"Content for the regular email to user";}i:3;a:2:{i:0;s:6:"string";i:1;s:44:"Content for the admin email to administrator";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:34:"@see compileMail(), sendInfoMail()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:29:"compileMail(), sendInfoMail()";}}}s:7:"content";a:2:{i:0;s:507:"			// Admin mail:
		if ($admin && $adminContent)	{
			if (!$this->isHTMLContent($adminContent))	{
				$admMail = $this->cObj->sendNotifyEmail($adminContent, 
									$admin, 
									'', 
									$this->conf['email.']['from'], 
									$this->conf['email.']['fromName'],
									$recipient
							);
			} else {
				$this->sendHTMLMail($adminContent, 
									$admin, 

[...]
 send, the regular is...
								$this->conf['email.']['from'], 
								$this->conf['email.']['fromName']
						);
		}
	}

	";i:1;i:1;}s:12:"content_size";i:1147;s:13:"content_lines";i:38;s:6:"atLine";i:1441;}i:49;a:7:{s:6:"header";s:28:"function isHTMLContent($c)	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:3:{s:4:"text";s:82:"

Detects if content is HTML (looking for <html> tag as first and last in string)
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:22:"Content string to test";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:67:"Returns true if the content begins and ends with <html></html>-tags";}}s:7:"content";a:2:{i:0;s:145:"		$c = trim($c);
		$first = strtolower(substr($c,0,6));
		$last = strtolower(substr($c,-7));
		if ($first.$last=='<html></html>')	return 1;
	}

	";i:1;i:0;}s:12:"content_size";i:145;s:13:"content_lines";i:6;s:6:"atLine";i:1486;}i:51;a:7:{s:6:"header";s:84:"function sendHTMLMail($content,$recipient,$dummy,$fromEmail,$fromName,$replyTo='')	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:6:{s:4:"text";s:186:"

Sending HTML email, using same parameters as tslib_cObj::sendNotifyEmail()
NOTICE: "t3lib_htmlmail" library must be included for this to work, otherwise an error message is outputted.
";s:5:"param";a:6:{i:0;a:2:{i:0;s:6:"string";i:1;s:48:"The message content. If blank, no email is sent.";}i:1;a:2:{i:0;s:6:"string";i:1;s:39:"Comma list of recipient email addresses";}i:2;a:2:{i:0;s:6:"string";i:1;s:6:"IGNORE";}i:3;a:2:{i:0;s:6:"string";i:1;s:20:""From" email address";}i:4;a:2:{i:0;s:6:"string";i:1;s:20:"Optional "From" name";}i:5;a:2:{i:0;s:6:"string";i:1;s:41:"Optional "Reply-To" header email address.";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:46:"@see sendMail(), tslib_cObj::sendNotifyEmail()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:41:"sendMail(), tslib_cObj::sendNotifyEmail()";}}}s:7:"content";a:2:{i:0;s:507:"		if (trim($recipient) && trim($content))	{
			$cls=t3lib_div::makeInstanceClassName('t3lib_htmlmail');
			if (class_exists($cls))	{	// If htmlmail lib is included, then generate a nice HTML-email
				$parts = spliti('<title>|</title>',$content,3);
				$subject = trim($parts[1]) ? trim($parts[1]) : 'Typo3 FE Admin message';
	
				$Typo3_htmlmail = t3lib_div::makeInstance('
[...]
*************************************
	 * 
	 * Various helper functions
	 * 
	 *****************************************/


	";i:1;i:1;}s:12:"content_size";i:1880;s:13:"content_lines";i:74;s:6:"atLine";i:1507;}i:53;a:8:{s:6:"header";s:21:"function aCAuth($r)	{";s:11:"parentClass";s:12:"user_feAdmin";s:11:"sectionText";a:1:{i:0;s:24:"Various helper functions";}s:4:"cDat";a:5:{s:4:"text";s:308:"

Returns true if authentication is OK based on the "aC" code which is a GET parameter set from outside with a hash string which must match some internal hash string.
This allows to authenticate editing without having a fe_users login
Uses $this->authCode which is set in init() by "t3lib_div::GPvar('aC');"
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:51:"The data array for which to evaluate authentication";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:24:"True if authenticated OK";}s:5:"other";a:1:{i:0;s:23:"@see authCode(), init()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:18:"authCode(), init()";}}}s:7:"content";a:2:{i:0;s:98:"		if ($this->authCode && !strcmp($this->authCode,$this->authCode($r)))	{
			return true;
		}
	}

	";i:1;i:0;}s:12:"content_size";i:98;s:13:"content_lines";i:5;s:6:"atLine";i:1591;}i:55;a:7:{s:6:"header";s:33:"function authCode($r,$extra='')	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:5:{s:4:"text";s:122:"

Creating authentication hash string based on input record and the fields listed in TypoScript property "authcodeFields"
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:15:"The data record";}i:1;a:2:{i:0;s:6:"string";i:1;s:40:"Additional string to include in the hash";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:73:"Hash string of $this->codeLength (if TypoScript "authcodeFields" was set)";}s:5:"other";a:1:{i:0;s:13:"@see aCAuth()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:9:"aCAuth() ";}}}s:7:"content";a:2:{i:0;s:526:"		$l=$this->codeLength;
		if ($this->conf['authcodeFields'])	{
			$fieldArr = t3lib_div::trimExplode(',', $this->conf['authcodeFields'], 1);
			$value='';
			while(list(,$field)=each($fieldArr))	{
				$value.=$r[$field].'|';
			}
			$value.=$extra.'|'.$this->conf['authcodeFields.']['addKey'];
			if ($this->conf['authcodeFields.']['addDate'])	{
				$value.='|'.date($this->conf['authcodeFields.']['addDate']);
			}
			$value.=$GLOBALS['TYPO3_CONF_VARS']['SYS']['encryptionKey'];
			return substr(md5($value), 0,$l);
		}
	}

	";i:1;i:0;}s:12:"content_size";i:526;s:13:"content_lines";i:16;s:6:"atLine";i:1605;}i:57;a:7:{s:6:"header";s:48:"function setfixed($markerArray, $setfixed, $r)	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:5:{s:4:"text";s:65:"

Adding keys to the marker array with "setfixed" GET parameters
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:36:"Marker-array to modify/add a key to.";}i:1;a:2:{i:0;s:5:"array";i:1;s:117:"TypoScript properties configuring "setfixed" for the plugin. Basically this is $this->conf['setfixed.'] passed along.";}i:2;a:2:{i:0;s:5:"array";i:1;s:15:"The data record";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:22:"Processed $markerArray";}s:5:"other";a:1:{i:0;s:18:"@see compileMail()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:14:"compileMail() ";}}}s:7:"content";a:2:{i:0;s:507:"		if (is_array($setfixed))	{
			reset($setfixed);
			while(list($theKey,$data)=each($setfixed))	{
				if (!strcmp($theKey,'DELETE'))	{
					$recCopy = $r;
					$string='&cmd=setfixed&sFK='.rawurlencode($theKey).'&rU='.$r['uid'];
					$string.='&aC='.$this->setfixedHash($recCopy,$data['_FIELDLIST']); 
					$markerArray['###SYS_SETFIXED_DELETE###'] = $string;
				} elseif (s
[...]
LDLIST']);
						$markerArray['###SYS_SETFIXED_'.$theKey.'###'] = $string;
					}
				}
			}
		}
		return $markerArray;
	}

	";i:1;i:1;}s:12:"content_size";i:936;s:13:"content_lines";i:27;s:6:"atLine";i:1631;}i:59;a:7:{s:6:"header";s:44:"function setfixedHash($recCopy,$fields='')	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:5:{s:4:"text";s:64:"

Creating hash string for setFixed. Much similar to authCode()
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:15:"The data record";}i:1;a:2:{i:0;s:6:"string";i:1;s:21:"List of fields to use";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:73:"Hash string of $this->codeLength (if TypoScript "authcodeFields" was set)";}s:5:"other";a:1:{i:0;s:26:"@see setfixed(),authCode()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:22:"setfixed(),authCode() ";}}}s:7:"content";a:2:{i:0;s:431:"		if ($fields)	{
			$fieldArr = t3lib_div::trimExplode(',',$fields,1);
			reset($fieldArr);
			while(list($k,$v)=each($fieldArr))	{
				$recCopy_temp[$k]=$recCopy[$v];
			}
		} else {
			$recCopy_temp=$recCopy;
		}
		$encStr = implode('|',$recCopy_temp).'|'.$this->conf['authcodeFields.']['addKey'].'|'.$GLOBALS['TYPO3_CONF_VARS']['SYS']['encryptionKey'];
		$hash = substr(md5($encStr),0,$this->codeLength);
		return $hash;
	}
	

	";i:1;i:0;}s:12:"content_size";i:431;s:13:"content_lines";i:15;s:6:"atLine";i:1667;}i:61;a:7:{s:6:"header";s:22:"function isPreview()	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:3:{s:4:"text";s:41:"

Returns true if preview display is on.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:77:"		return ($this->conf[$this->cmdKey.'.']['preview'] && $this->preview);
	}

	";i:1;i:0;}s:12:"content_size";i:77;s:13:"content_lines";i:3;s:6:"atLine";i:1688;}i:63;a:7:{s:6:"header";s:30:"function createFileFuncObj()	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:3:{s:4:"text";s:99:"

Creates an instance of class "t3lib_basicFileFunctions" in $this->fileFunc (if not already done)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:109:"		if (!$this->fileFunc)	{
			$this->fileFunc = t3lib_div::makeInstance('t3lib_basicFileFunctions');
		}
	}

	";i:1;i:0;}s:12:"content_size";i:109;s:13:"content_lines";i:5;s:6:"atLine";i:1697;}i:65;a:4:{s:6:"header";s:28:"function clearCacheIfSet()	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:3:{s:4:"text";s:112:"

If TypoScript property clearCacheOfPages is set then all page ids in this value will have their cache cleared
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:6:"atLine";i:1708;}i:67;a:7:{s:6:"header";s:49:"function getFailure($theField, $theCmd, $label)	{";s:11:"parentClass";s:12:"user_feAdmin";s:4:"cDat";a:3:{s:4:"text";s:213:"

Returns an error message for the field/command combination inputted. The error message is looked up in the TypoScript properties (evalErrors.[fieldname].[command]) and if empty then the $label value is returned
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:10:"Field name";}i:1;a:2:{i:0;s:6:"string";i:1;s:25:"Command identifier string";}i:2;a:2:{i:0;s:6:"string";i:1;s:59:"Alternative label, shown if no other error string was found";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:24:"The error message string";}}s:7:"content";a:2:{i:0;s:333:"		return isset($this->conf['evalErrors.'][$theField.'.'][$theCmd]) ? $this->conf['evalErrors.'][$theField.'.'][$theCmd] : $label;
	}
}


if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['media/scripts/fe_adminLib.inc'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['media/scripts/fe_adminLib.inc']);
}
?>";i:1;i:0;}s:12:"content_size";i:333;s:13:"content_lines";i:8;s:6:"atLine";i:1723;}}}s:37:"tslib/media/scripts/gmenu_foldout.php";a:3:{s:8:"filesize";i:10109;s:6:"header";a:5:{s:4:"text";s:70:"

Class extension tslib_gmenu for the creation of DHTML foldout menus
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:2:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=386&cHash=f69ab462e2";}s:11:"other_index";a:2:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=386&cHash=f69ab462e2 ";}}}s:3:"DAT";a:5:{i:1;a:8:{s:6:"header";s:47:"class tslib_gmenu_foldout extends tslib_gmenu {";s:5:"class";i:1;s:11:"parentClass";s:19:"tslib_gmenu_foldout";s:4:"cDat";a:5:{s:4:"text";s:70:"

Class extension tslib_gmenu for the creation of DHTML foldout menus
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:2:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=386&cHash=f69ab462e2";}s:11:"other_index";a:2:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=386&cHash=f69ab462e2 ";}}}s:7:"content";a:2:{i:0;s:170:"	var $GMENU_fixKey='foldout';
	
	var $WMarrowNO;
	var $WMarrowACT;
	var $WMimagesFlag;
	var $WMimageHTML;
	var $WMsubmenu;
	var $WMtableWrap;
	var $WM_activeOnLoad='';

	";i:1;i:-1;}s:12:"content_size";i:170;s:13:"content_lines";i:10;s:6:"atLine";i:75;}i:3;a:7:{s:6:"header";s:25:"function extProc_init()	{";s:11:"parentClass";s:19:"tslib_gmenu_foldout";s:4:"cDat";a:3:{s:4:"text";s:57:"

Initializing, setting internal variables (prefixed WM)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:552:"		$this->WMarrowNO='';
		$this->WMarrowACT='';
		$this->WMimagesFlag=0;
		$this->WMimageHTML ='';
		if (($this->mconf['arrowNO']||$this->mconf['arrowNO.']) && ($this->mconf['arrowACT']||$this->mconf['arrowACT.']))	{
			$this->WMarrowNO = $GLOBALS['TSFE']->cObj->getImgResource($this->mconf['arrowNO'],$this->mconf['arrowNO.']);
			$this->WMarrowACT = $GLOBALS['TSFE']->cObj->getImgResource($this->mconf['arrowACT'],$this->mconf['arrowACT.']);
			if (is_array($this->WMarrowACT) && is_array($this->WMarrowNO))	{
				$this->WMimagesFlag=1;
			}
		}
	}

	";i:1;i:0;}s:12:"content_size";i:552;s:13:"content_lines";i:13;s:6:"atLine";i:91;}i:5;a:7:{s:6:"header";s:38:"function extProc_beforeLinking($key)	{";s:11:"parentClass";s:19:"tslib_gmenu_foldout";s:4:"cDat";a:3:{s:4:"text";s:116:"

Processing before the links are created.
Basically this is setting an onclick handler for clicking the menu item.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:78:"Pointer to $this->menuArr[$key] where the current menu element record is found";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:453:"		$this->I['addATagParams']='';
		$this->WMsubmenu = $this->subMenu($this->I['uid'],$this->I['mount_pid']);
		if (trim($this->WMsubmenu))	{
			$this->I['addATagParams']=' onclick="GF_menu('.$key.');'.($this->mconf['dontLinkIfSubmenu'] ? ' return false;' : '').'"';
			if ($this->isActive($this->I['uid']) && $this->mconf['displayActiveOnLoad'])	{	// orig: && $this->WMisSub, changed 210901
				$this->WM_activeOnLoad='GF_menu('.$key.');';
			}
		}
	}

	";i:1;i:0;}s:12:"content_size";i:453;s:13:"content_lines";i:10;s:6:"atLine";i:112;}i:7;a:4:{s:6:"header";s:37:"function extProc_afterLinking($key)	{";s:11:"parentClass";s:19:"tslib_gmenu_foldout";s:4:"cDat";a:3:{s:4:"text";s:136:"

Processing after linking, basically setting the <div>-layers for the menu items and possibly wrapping in table, adding bullet images.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:78:"Pointer to $this->menuArr[$key] where the current menu element record is found";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:6:"atLine";i:129;}i:9;a:7:{s:6:"header";s:27:"function extProc_finish()	{";s:11:"parentClass";s:19:"tslib_gmenu_foldout";s:4:"cDat";a:3:{s:4:"text";s:88:"

Putting things together, in particular the JavaScript code needed for the DHTML menu.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:98:"Empty string! (Since $GLOBALS['TSFE']->divSection is set with the <div>-sections used in the menu)";}}s:7:"content";a:2:{i:0;s:507:"		$bHeight = t3lib_div::intInRange(($this->mconf['bottomHeight']?$this->mconf['bottomHeight']:100) ,0,3000);
		$bottomContent = $this->mconf['bottomContent'] ? $GLOBALS['TSFE']->cObj->cObjGetSingle($this->mconf['bottomContent'],$this->mconf['bottomContent.'], '/GMENU_FOLDOUT/.bottomContent') : '';
		$adjustTopHeights = intval($this->mconf['adjustItemsH']);
		$adjustSubHeig
[...]
cripts/gmenu_foldout.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['media/scripts/gmenu_foldout.php']);
}

?>";i:1;i:1;}s:12:"content_size";i:4915;s:13:"content_lines";i:88;s:6:"atLine";i:155;}}}s:36:"tslib/media/scripts/gmenu_layers.php";a:3:{s:8:"filesize";i:19263;s:6:"header";a:5:{s:4:"text";s:240:"

Class extending tslib_gmenu for the creation of DHTML menus
NOTICE: The contents of this class is made so that it can be copied EXACTLY AS IS to the tmenu_layers class! See noties in class (for BEGIN/END) and also "diff.xmenu_layers.txt"
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=385&cHash=648519dd66";i:2;s:26:"@see diff.xmenu_layers.txt";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=385&cHash=648519dd66 ";}s:4:"@see";a:1:{i:0;s:22:"diff.xmenu_layers.txt ";}}}s:3:"DAT";a:9:{i:1;a:8:{s:6:"header";s:46:"class tslib_gmenu_layers extends tslib_gmenu {";s:5:"class";i:1;s:11:"parentClass";s:18:"tslib_gmenu_layers";s:4:"cDat";a:5:{s:4:"text";s:240:"

Class extending tslib_gmenu for the creation of DHTML menus
NOTICE: The contents of this class is made so that it can be copied EXACTLY AS IS to the tmenu_layers class! See noties in class (for BEGIN/END) and also "diff.xmenu_layers.txt"
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=385&cHash=648519dd66";i:2;s:26:"@see diff.xmenu_layers.txt";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=385&cHash=648519dd66 ";}s:4:"@see";a:1:{i:0;s:22:"diff.xmenu_layers.txt ";}}}s:7:"content";a:2:{i:0;s:568:"
// FULL DUPLICATE TO tmenu_layers BEGIN:

	var $GMENU_fixKey='layers';
	var $divLayers=Array();
	
	var $WMx=0;
	var $WMy=0;
	var $WMxyArray=array();
	var $WMextraScript='';
	var $WMlastKey='';
	var $WMrestoreScript='';
	var $WMresetSubMenus='';
	var $WMactiveHasSubMenu='';
	var $WMactiveKey='';
	var $WMtheSubMenu;
	var $WMisSub;
	var $WMhideCode;
	var $WMonlyOnLoad=0;
	var $WMbordersWithin=array();
	var $WMsubIds=array();
	var $WMtempStore=array();
	var $WMlockPosition_addAccumulated=array();
	var $VMmouseoverActions=array();
	var $VMmouseoutActions=array();

	";i:1;i:-1;}s:12:"content_size";i:568;s:13:"content_lines";i:26;s:6:"atLine";i:79;}i:3;a:7:{s:6:"header";s:25:"function extProc_init()	{";s:11:"parentClass";s:18:"tslib_gmenu_layers";s:4:"cDat";a:3:{s:4:"text";s:101:"

Creating unique menu id string plus other initialization of internal variables (all prefixed "WM")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		$this->WMid = trim($this->mconf['layer_menu_id'])?trim($this->mconf['layer_menu_id']).'x':substr(md5(microtime()),0,6);	// NO '_' (underscore) in the ID!!! NN4 breaks!

		$GLOBALS['TSFE']->applicationData['GMENU_LAYERS']['WMid'][]=$this->WMid;
		$this->WMtempStore = $GLOBALS['TSFE']->applicationData['GMENU_LAYERS']['WMid'];
		$GLOBALS['TSFE']->applicationData['GMENU_LAYE
[...]
ad.']['onlyOnLoad']);
		$this->WMbordersWithin = t3lib_div::intExplode(',',$this->mconf['bordersWithin'].',0,0,0,0,0');
	}

	";i:1;i:1;}s:12:"content_size";i:633;s:13:"content_lines";i:11;s:6:"atLine";i:111;}i:5;a:7:{s:6:"header";s:27:"function extProc_RO($key)	{";s:11:"parentClass";s:18:"tslib_gmenu_layers";s:4:"cDat";a:3:{s:4:"text";s:92:"

Processing of mouse-over features depending on whether "freezeMouseover" property is set.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:223:"Pointer to $this->menuArr[$key] where the current menu element record is found OR $this->result['RO'][$key] where the configuration for that elements RO version is found! Here it is used with the ->WMid to make unique names";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:446:"		if ($this->mconf['freezeMouseover'])	{
			$this->VMmouseoverActions[$this->WMid.$key]='case "Menu'.$this->WMid.$key.'":'.$this->I['linkHREF']['onMouseover'].'; break;';
			$this->VMmouseoutActions[$this->WMid.$key]='case "Menu'.$this->WMid.$key.'":'.$this->I['linkHREF']['onMouseout'].'; break;';
			$this->I['linkHREF']['onMouseover']='GL'.$this->WMid.'_over(\'Menu'.$this->WMid.$key.'\');';
			$this->I['linkHREF']['onMouseout']='';
		}
	}

	";i:1;i:0;}s:12:"content_size";i:446;s:13:"content_lines";i:8;s:6:"atLine";i:129;}i:7;a:7:{s:6:"header";s:38:"function extProc_beforeLinking($key)	{";s:11:"parentClass";s:18:"tslib_gmenu_layers";s:4:"cDat";a:3:{s:4:"text";s:114:"

Processing before the links are created.
This means primarily creating some javaScript code for the management.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:78:"Pointer to $this->menuArr[$key] where the current menu element record is found";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		if ($this->I['uid'])	{

			array_push($GLOBALS['TSFE']->applicationData['GMENU_LAYERS']['WMparentId'],$this->WMid);
			$this->WMtheSubMenu = $this->subMenu($this->I['uid'],$this->I['mount_pid']);
			array_pop($GLOBALS['TSFE']->applicationData['GMENU_LAYERS']['WMparentId']);
			$this->WMisSub = trim($this->WMtheSubMenu) ? 1 : 0;
	
			if ($this->mconf['lockPosition_addSelf
[...]
shortmd5($this->I['uid'].'-'.$this->WMid).'","anchorID'.t3lib_div::shortmd5($this->I['uid'].'-'.$this->WMid).'");';
		}
	}

	";i:1;i:1;}s:12:"content_size";i:2625;s:13:"content_lines";i:44;s:6:"atLine";i:145;}i:9;a:7:{s:6:"header";s:37:"function extProc_afterLinking($key)	{";s:11:"parentClass";s:18:"tslib_gmenu_layers";s:4:"cDat";a:3:{s:4:"text";s:123:"

Processing after linking, basically setting the <div>-layers for the menu items. Also some more JavaScript code is made.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:78:"Pointer to $this->menuArr[$key] where the current menu element record is found";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		if ($this->I['uid'])	{
			if (!$this->I['spacer'] && $this->WMisSub)	{
				$exStyle=$this->mconf['layerStyle'] ? $this->mconf['layerStyle'] : 'position:absolute;visibility:hidden';
				if (trim($exStyle))	{
					$exStyle=' '.$exStyle;
				}
				$GLOBALS['TSFE']->applicationData['GMENU_LAYERS']['layerCounter']++;
				$zIndex = 10000-$GLOBALS['TSFE']->applicationData['GMEN
[...]
is->I['val']['output_w'])+intval($this->mconf['lockPosition_adjust']);
			}
		}
		$this->WMresult.=$this->I['theItem'];
	}

	";i:1;i:1;}s:12:"content_size";i:1220;s:13:"content_lines";i:27;s:6:"atLine";i:196;}i:11;a:7:{s:6:"header";s:44:"function extProc_beforeAllWrap($item,$key)	{";s:11:"parentClass";s:18:"tslib_gmenu_layers";s:4:"cDat";a:3:{s:4:"text";s:74:"

Wrapping the item in a <div> section if 'relativeToTriggerItem' was set
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:72:"The current content of the menu item, $this->I['theItem'], passed along.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:78:"Pointer to $this->menuArr[$key] where the current menu element record is found";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:66:"The modified version of $item, going back into $this->I['theItem']";}}s:7:"content";a:2:{i:0;s:328:"		if ($this->mconf['relativeToTriggerItem'])	{
			$item = '<div id="anchorID'.t3lib_div::shortmd5($this->I['uid'].'-'.$this->WMid).'" style="position:absolute;visibility:hidden;"></div><div id="itemID'.t3lib_div::shortmd5($this->I['uid'].'-'.$this->WMid).'" width="100%" height="100%">'.$item.'</div>';
		}
		return $item;
	}

	";i:1;i:0;}s:12:"content_size";i:328;s:13:"content_lines";i:6;s:6:"atLine";i:231;}i:13;a:7:{s:6:"header";s:27:"function isSetIntval($in)	{";s:11:"parentClass";s:18:"tslib_gmenu_layers";s:4:"cDat";a:3:{s:4:"text";s:55:"

Returns true if different from ''  OR if intval()!=0
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:17:"Value to evaluate";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:51:"true if $in is different from ''  OR if intval()!=0";}}s:7:"content";a:2:{i:0;s:78:"		return $this->mconf['blankStrEqFalse'] ? strcmp($in,'') : intval($in);
	}

	";i:1;i:0;}s:12:"content_size";i:78;s:13:"content_lines";i:3;s:6:"atLine";i:244;}i:15;a:4:{s:6:"header";s:28:"function extProc_finish ()	{";s:11:"parentClass";s:18:"tslib_gmenu_layers";s:4:"cDat";a:3:{s:4:"text";s:88:"

Putting things together, in particular the JavaScript code needed for the DHTML menu.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:77:"Returns the value of a call to the parent function, parent::extProc_finish();";}}s:6:"atLine";i:253;}i:17;a:7:{s:6:"header";s:46:"function extCalcBorderWithin($kind,$integer)	{";s:11:"parentClass";s:18:"tslib_gmenu_layers";s:4:"cDat";a:5:{s:4:"text";s:133:"

Creates a JavaScript line which corrects the position of the layer based on the constraints in TypoScript property 'bordersWithin'
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:18:"Direction to test.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:99:"The boundary limit in the direction set by $kind. If set then a value is returned, otherwise blank.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:76:"JavaScript string for correction of the layer position (if $integer is true)";}s:5:"other";a:1:{i:0;s:37:"@see extProc_finish(), extProc_init()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:32:"extProc_finish(), extProc_init()";}}}s:7:"content";a:2:{i:0;s:507:"		if ($integer)	{
			switch($kind)	{
				case 'right':
				case 'bottom':
					$add='';
					if ($kind=='right')		{$add='GL_getObj(id).width'; $key = 'left';}
					if ($kind=='bottom')	{$add='GL_getObj(id).height'; $key = 'top';}
					$str = 'if (parseInt(GLV_menuOn["'.$this->WMid.'"].'.$key.')+'.$add.'>'.$integer.') GLV_menuOn["'.$this->WMid.'"].'.$key.'='.$integer.'-'.$a
[...]
/scripts/gmenu_layers.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['media/scripts/gmenu_layers.php']);
}

?>";i:1;i:1;}s:12:"content_size";i:880;s:13:"content_lines";i:27;s:6:"atLine";i:429;}}}s:36:"tslib/media/scripts/plaintextLib.inc";a:3:{s:8:"filesize";i:22020;s:6:"header";a:5:{s:4:"text";s:1045:"

Alternative rendering of content elements for Plain Text emails. That means text-only output. No HTML at all. Used by the Direct Mail extension.
Normally the plain text output should appear with type=99. 
To use this library you can include the static template "plugin.alt.plaintext"

## Insert DMailer Boundaries for all elements.
config.insertDmailerBoundaries = 1
includeLibs.plaintextLib = media/scripts/plaintextLib.inc

## Set up page/type number:
alt_plaintext >
alt_plaintext = PAGE
alt_plaintext.typeNum=99
alt_plaintext.config.disableAllHeaderCode = 1
alt_plaintext.10 = TEMPLATE
alt_plaintext.10 {
  template = FILE
  template.file = {$plugin.alt.plaintext.file.template}
  marks.CONTENT < styles.content.get
  marks.CONTENT.renderObj = < lib.alt_plaintext.renderObj
  marks.DATE = TEXT
  marks.DATE.data = date:U
  marks.DATE.strftime = %e. %B %Y
}

(And then also "lib.alt_plaintext.renderObj" is configured extensively - basically with the TypoScript options passed to this class. See the static template "plugin.alt.plaintext")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:2:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=398&cHash=e3024de334";}s:11:"other_index";a:2:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=398&cHash=e3024de334 ";}}}s:3:"DAT";a:24:{i:1;a:8:{s:6:"header";s:22:"class user_plaintext {";s:5:"class";i:1;s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:5:{s:4:"text";s:1045:"

Alternative rendering of content elements for Plain Text emails. That means text-only output. No HTML at all. Used by the Direct Mail extension.
Normally the plain text output should appear with type=99. 
To use this library you can include the static template "plugin.alt.plaintext"

## Insert DMailer Boundaries for all elements.
config.insertDmailerBoundaries = 1
includeLibs.plaintextLib = media/scripts/plaintextLib.inc

## Set up page/type number:
alt_plaintext >
alt_plaintext = PAGE
alt_plaintext.typeNum=99
alt_plaintext.config.disableAllHeaderCode = 1
alt_plaintext.10 = TEMPLATE
alt_plaintext.10 {
  template = FILE
  template.file = {$plugin.alt.plaintext.file.template}
  marks.CONTENT < styles.content.get
  marks.CONTENT.renderObj = < lib.alt_plaintext.renderObj
  marks.DATE = TEXT
  marks.DATE.data = date:U
  marks.DATE.strftime = %e. %B %Y
}

(And then also "lib.alt_plaintext.renderObj" is configured extensively - basically with the TypoScript options passed to this class. See the static template "plugin.alt.plaintext")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:2:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=398&cHash=e3024de334";}s:11:"other_index";a:2:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=398&cHash=e3024de334 ";}}}s:7:"content";a:2:{i:0;s:55:"	var $cObj;
	var $conf=array();
	var $charWidth=76;
	
	";i:1;i:-1;}s:12:"content_size";i:55;s:13:"content_lines";i:4;s:6:"atLine";i:117;}i:3;a:7:{s:6:"header";s:41:"function main_plaintext($content,$conf)	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:3:{s:4:"text";s:284:"

Main function, called from TypoScript
A content object that renders "tt_content" records. See the comment to this class for TypoScript example of how to trigger it.
This detects the CType of the current content element and renders it accordingly. Only wellknown types are rendered.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"Empty, ignore.";}i:1;a:2:{i:0;s:5:"array";i:1;s:59:"TypoScript properties for this content object/function call";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:18:"Plain text content";}}s:7:"content";a:2:{i:0;s:507:"		$this->conf = $conf;
		$this->siteUrl=$conf['siteUrl'];
		$lines = array();
		$CType= (string)$this->cObj->data['CType'];
		switch($CType)	{
			case 'header':
				$lines[]=$this->getHeader();
				if ($this->cObj->data['subheader'])	{
					$lines[]=$this->breakContent(strip_tags($this->cObj->data['subheader']));
				}
			break;
			case 'text':
			case 'textpic':
				$line
[...]
plode(chr(10),$lines);
		
			// User processing:
		$content=$this->userProcess('userProc',$content);
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:1874;s:13:"content_lines";i:66;s:6:"atLine";i:131;}i:5;a:7:{s:6:"header";s:27:"function getMenuSitemap()	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:3:{s:4:"text";s:25:"

Creates a menu/sitemap
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:7:"Content";}}s:7:"content";a:2:{i:0;s:209:"		$str = $this->cObj->cObjGetSingle($this->conf['menu'],$this->conf['menu.']);
		$str = $this->breakBulletlist(trim(strip_tags(eregi_replace('<br[ /]*>',chr(10),$this->parseBody($str)))));
		return $str;
	}

	";i:1;i:0;}s:12:"content_size";i:209;s:13:"content_lines";i:5;s:6:"atLine";i:203;}i:7;a:7:{s:6:"header";s:24:"function getShortcut()	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:3:{s:4:"text";s:21:"

Creates a shortcut
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:7:"Content";}}s:7:"content";a:2:{i:0;s:107:"		$str = $this->cObj->cObjGetSingle($this->conf['shortcut'],$this->conf['shortcut.']);
		return $str;
	}

	";i:1;i:0;}s:12:"content_size";i:107;s:13:"content_lines";i:4;s:6:"atLine";i:214;}i:9;a:7:{s:6:"header";s:32:"function getHTML($str=array())	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:3:{s:4:"text";s:53:"

Creates an HTML element (stripping tags of course)
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:73:"HTML content to process. If not passed along, the bodytext field is used.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:7:"Content";}}s:7:"content";a:2:{i:0;s:152:"		return $this->breakContent(strip_tags(eregi_replace('<br[ /]*>',chr(10),$this->parseBody(is_string($str)?$str:$this->cObj->data['bodytext']))));
	}

	";i:1;i:0;}s:12:"content_size";i:152;s:13:"content_lines";i:3;s:6:"atLine";i:225;}i:11;a:7:{s:6:"header";s:22:"function getHeader()	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:5:{s:4:"text";s:19:"

Creates a header
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:7:"Content";}s:5:"other";a:1:{i:0;s:19:"@see renderHeader()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:15:"renderHeader() ";}}}s:7:"content";a:2:{i:0;s:113:"		// links...
		return $this->renderHeader($this->cObj->data['header'],$this->cObj->data['header_layout']);
	}

	";i:1;i:0;}s:12:"content_size";i:113;s:13:"content_lines";i:4;s:6:"atLine";i:235;}i:13;a:7:{s:6:"header";s:22:"function getImages()	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:3:{s:4:"text";s:13:"

Get images
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:7:"Content";}}s:7:"content";a:2:{i:0;s:186:"		$images = $this->renderImages($this->cObj->data['image'],!$this->cObj->data['image_zoom']?$this->cObj->data['image_link']:'',$this->cObj->data['imagecaption']);
		return $images;
	}

	";i:1;i:0;}s:12:"content_size";i:186;s:13:"content_lines";i:4;s:6:"atLine";i:245;}i:15;a:7:{s:6:"header";s:26:"function parseBody($str)	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:3:{s:4:"text";s:79:"

Parsing the bodytext field content, removing typical entities and <br> tags.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:29:"Field content from "bodytext"";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:17:"Processed content";}}s:7:"content";a:2:{i:0;s:529:"			// First, regular parsing:
		$str = eregi_replace('<br[ /]*>',' ',$str);
		$str = $this->cObj->stdWrap($str,$this->conf['bodytext.']['stdWrap.']);
			// Then all a-tags:
		$aConf = array();
		$aConf['parseFunc.']['tags.']['a']='USER';
		$aConf['parseFunc.']['tags.']['a.']['userFunc']='user_plaintext->atag_to_http';
		$aConf['parseFunc.']['tags.']['a.']['siteUrl'] = $this->siteUrl;

		$str = $this->cObj->stdWrap($str,$aConf);
		$str = str_replace('&nbsp;',' ',t3lib_div::htmlspecialchars_decode($str));
		return $str;
	}

	";i:1;i:0;}s:12:"content_size";i:529;s:13:"content_lines";i:14;s:6:"atLine";i:256;}i:17;a:7:{s:6:"header";s:60:"function renderUploads($str,$upload_path='uploads/media/')	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:3:{s:4:"text";s:45:"

Creates a list of links to uploaded files.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:66:"List of uploaded filenames from "uploads/media/" (or $upload_path)";}i:1;a:2:{i:0;s:6:"string";i:1;s:22:"Alternative path value";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:7:"Content";}}s:7:"content";a:2:{i:0;s:299:"		$files = explode(',',$str);
		reset($files);
		$lines=array();
		if ($this->conf['uploads.']['header'])	{$lines[]=$this->getString($this->conf['uploads.']['header']);}
		while(list($k,$file)=each($files))	{
			$lines[]=$this->siteUrl.$upload_path.$file;
		}
		return implode(chr(10),$lines);
	}

	";i:1;i:0;}s:12:"content_size";i:299;s:13:"content_lines";i:10;s:6:"atLine";i:278;}i:19;a:7:{s:6:"header";s:37:"function renderHeader($str,$type=0)	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:3:{s:4:"text";s:98:"

Renders a content element header, observing the layout type giving different header formattings
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:17:"The header string";}i:1;a:2:{i:0;s:7:"integer";i:1;s:54:"The layout type of the header (in the content element)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:7:"Content";}}s:7:"content";a:2:{i:0;s:507:"		if ($str)	{
			$hConf = $this->conf['header.'];
			$defaultType = t3lib_div::intInRange($hConf['defaultType'],1,5);
			$type=t3lib_div::intInRange($type,0,6);
			if (!$type)	$type=$defaultType;
			if ($type!=6)	{	// not hidden
				$tConf = $hConf[$type.'.'];
		
				$lines=array();
		
				$blanks = t3lib_div::intInRange($tConf['preBlanks'],0,1000);
				if ($blanks)	{
				
[...]
'],0,1000);
				if ($blanks)	{$lines[]=str_pad('', $blanks-1, chr(10));}
				return implode(chr(10),$lines);
			}
		}		
	}

	";i:1;i:1;}s:12:"content_size";i:1775;s:13:"content_lines";i:41;s:6:"atLine";i:296;}i:21;a:7:{s:6:"header";s:40:"function pad($lines,$preLineChar,$len)	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:5:{s:4:"text";s:106:"

Function used to repeat a char pattern in head lines (like if you want "********" above/below a header)
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:69:"Array of existing lines to which the new char-pattern should be added";}i:1;a:2:{i:0;s:6:"string";i:1;s:47:"The character pattern to repeat. Default is "-"";}i:2;a:2:{i:0;s:7:"integer";i:1;s:77:"The length of the line. $preLineChar will be repeated to fill in this length.";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:38:"The input array with a new line added.";}s:5:"other";a:1:{i:0;s:19:"@see renderHeader()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:15:"renderHeader() ";}}}s:7:"content";a:2:{i:0;s:186:"		$strPad = t3lib_div::intInRange($len,0,1000);
		$strPadChar = $preLineChar?$preLineChar:'-';
		if ($strPad)	{
			$lines[]=str_pad('', $strPad, $strPadChar); 
		}
		return $lines;
	}

	";i:1;i:0;}s:12:"content_size";i:186;s:13:"content_lines";i:8;s:6:"atLine";i:347;}i:23;a:7:{s:6:"header";s:29:"function breakContent($str)	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:5:{s:4:"text";s:100:"

Function used to wrap the bodytext field content (or image caption) into lines of a max length of
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:20:"The content to break";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:16:"Processed value.";}s:5:"other";a:1:{i:0;s:35:"@see main_plaintext(), breakLines()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:30:"main_plaintext(), breakLines()";}}}s:7:"content";a:2:{i:0;s:196:"		$cParts = explode(chr(10),$str);
		reset($cParts);
		$lines=array();
		while(list(,$substrs)=each($cParts))	{
			$lines[]=$this->breakLines($substrs);
		}
		return implode(chr(10),$lines);
	}

	";i:1;i:0;}s:12:"content_size";i:196;s:13:"content_lines";i:9;s:6:"atLine";i:363;}i:25;a:7:{s:6:"header";s:32:"function breakBulletlist($str)	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:3:{s:4:"text";s:42:"

Breaks content lines into a bullet list
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:41:"Content string to make into a bullet list";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:15:"Processed value";}}s:7:"content";a:2:{i:0;s:507:"		$type = $this->cObj->data['layout'];
		$type=t3lib_div::intInRange($type,0,3);

		$tConf = $this->conf['bulletlist.'][$type.'.'];
		
		$cParts = explode(chr(10),$str);
		reset($cParts);
		$lines=array();
		$c=0;
		while(list(,$substrs)=each($cParts))	{
			$c++;
			$bullet = $tConf['bullet'] ? $this->getString($tConf['bullet']) : ' - ';
			$bLen=strlen($bullet);
			$bulle
[...]
nf['blanks'],0,1000);
			if ($blanks)	{$lines[]=str_pad('', $blanks-1, chr(10));}
		}
		return implode(chr(10),$lines);
	}

	";i:1;i:1;}s:12:"content_size";i:807;s:13:"content_lines";i:24;s:6:"atLine";i:379;}i:27;a:7:{s:6:"header";s:27:"function breakTable($str)	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:3:{s:4:"text";s:114:"

Formatting a table in plain text (based on the paradigm of lines being content rows and cells separated by "|")
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"Content string";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:15:"Processed value";}}s:7:"content";a:2:{i:0;s:507:"		$cParts = explode(chr(10),$str);
		reset($cParts);
		$lines=array();
		$cols = intval($this->conf['cols']) ? intval($this->conf['cols']) : 0 ;
		$c=0;
		while(list(,$substrs)=each($cParts))	{
			$c++;
			if (trim($substrs))	{
				$lineParts=explode('|',$substrs);
				if (!$cols)	$cols=count($lineParts);
				
				for ($a=0;$a<$cols;$a++)	{
					$jdu = explode(chr(10),$thi
[...]
Char;
			}
			$outLines[]=$this->addDiv($messure,'',$divChar,$joinChar,$cols);
		}
		return implode(chr(10),$outLines);
	}

	";i:1;i:1;}s:12:"content_size";i:1124;s:13:"content_lines";i:43;s:6:"atLine";i:410;}i:29;a:7:{s:6:"header";s:61:"function addDiv($messure,$content,$divChar,$joinChar,$cols)	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:6:{s:4:"text";s:72:"

Subfunction for breakTable(): Adds a divider line between table rows.
";s:5:"param";a:5:{i:0;a:2:{i:0;s:5:"array";i:1;s:28:"Some information about sizes";}i:1;a:2:{i:0;s:6:"string";i:1;s:6:"Empty.";}i:2;a:2:{i:0;s:6:"string";i:1;s:52:"Character to use for the divider line, typically "-"";}i:3;a:2:{i:0;s:6:"string";i:1;s:29:"Join character, typically "+"";}i:4;a:2:{i:0;s:7:"integer";i:1;s:23:"Number of table columns";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:26:"Divider line for the table";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:17:"@see breakTable()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:13:"breakTable() ";}}}s:7:"content";a:2:{i:0;s:176:"		$tempArr=array();
		for ($a=0;$a<$cols;$a++)	{
			$tempArr[$a]=str_pad($content,$messure[0][$a],$divChar);
		}
		return $joinChar.implode($joinChar,$tempArr).$joinChar;
	}

	";i:1;i:0;}s:12:"content_size";i:176;s:13:"content_lines";i:7;s:6:"atLine";i:466;}i:31;a:7:{s:6:"header";s:37:"function traverseTable($tableLines)	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:6:{s:4:"text";s:98:"

Traverses the table lines/cells and creates arrays with statistics for line numbers and lengths
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:53:"Array with [table rows] [table cells] [lines in cell]";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:30:"Statistics (max lines/lengths)";}s:6:"access";s:7:"private";s:5:"other";a:1:{i:0;s:17:"@see breakTable()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:13:"breakTable() ";}}}s:7:"content";a:2:{i:0;s:398:"		$maxLen=array();
		$maxLines=array();
		reset($tableLines);
		while(list($k,$v)=each($tableLines))	{
			reset($v);
			while(list($kk,$vv)=each($v))	{
				reset($vv);
				while(list($lk,$lv)=each($vv))	{
					if (strlen($lv)>intval($maxLen[$kk]))	$maxLen[$kk]=strlen($lv);
				}
				if (count($vv)>intval($maxLines[$k]))	$maxLines[$k]=count($vv);
			}
		}
		return array($maxLen,$maxLines); 
	}

	";i:1;i:0;}s:12:"content_size";i:398;s:13:"content_lines";i:16;s:6:"atLine";i:482;}i:33;a:7:{s:6:"header";s:74:"function renderImages($str,$links,$caption,$upload_path='uploads/pics/')	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:5:{s:4:"text";s:80:"

Render block of images - which means creating lines with links to the images.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:66:"List of image filenames (from "image" field in tt_content records)";}i:1;a:2:{i:0;s:6:"string";i:1;s:60:"Link value from the "image_link" field in tt_content records";}i:2;a:2:{i:0;s:6:"string";i:1;s:12:"Caption text";}i:3;a:2:{i:0;s:6:"string";i:1;s:54:"Alternative relative path for the files listed in $str";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:7:"Content";}s:5:"other";a:1:{i:0;s:16:"@see getImages()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:12:"getImages() ";}}}s:7:"content";a:2:{i:0;s:507:"		$images = explode(',',$str);
		$linksArr = explode(',',$links);
		reset($images);
		$lines=array();
		if ($this->conf['images.']['header'])	{$lines[]=$this->getString($this->conf['images.']['header']);}
		while(list($k,$file)=each($images))	{
			$lines[]=$this->siteUrl.$upload_path.$file;
			if ($links && count($linksArr)>1)	{
				if (isset($linksArr[$k]))	{
					$ll=$li
[...]
		if ($cHeader)		$lines[]=$cHeader;
			$lines[]=$this->breakContent($caption);
		}
		
		return implode(chr(10),$lines);
	}

	";i:1;i:1;}s:12:"content_size";i:986;s:13:"content_lines";i:32;s:6:"atLine";i:509;}i:35;a:7:{s:6:"header";s:23:"function getLink($ll)	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:3:{s:4:"text";s:41:"

Returns a typolink URL based on input.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:21:"Parameter to typolink";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:124:"The URL returned from $this->cObj->getTypoLink_URL(); - possibly it prefixed with the URL of the site if not present already";}}s:7:"content";a:2:{i:0;s:507:"		$theLink=$this->cObj->getTypoLink_URL($ll);
		if (substr($theLink,0,4)!='http')	{
			$theLink=$this->siteUrl.$theLink;
		}
		return $theLink;		
	}
	
	/**
	 * Breaking lines into fixed length lines, using t3lib_div::breakLinesForEmail()
	 *
	 * @param	string		The string to break
	 * @param	string		Line break character
	 * @param	integer		Length of lines, default is $this-
[...]
har="\n",$charWidth=0)	{
		return t3lib_div::breakLinesForEmail($str,$implChar,$charWidth?$charWidth:$this->charWidth);
	}

	";i:1;i:1;}s:12:"content_size";i:627;s:13:"content_lines";i:20;s:6:"atLine";i:548;}i:37;a:7:{s:6:"header";s:26:"function getString($str)	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:4:{s:4:"text";s:218:"

Explodes a string with "|" and if the second part is found it will return this, otherwise the first part.
Used for many TypoScript properties used in this class since they need preceeding whitespace to be preserved.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:12:"Input string";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:13:"Output string";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:86:"		$parts = explode('|',$str);
		return strcmp($parts[1],'')?$parts[1]:$parts[0];
	}

	";i:1;i:0;}s:12:"content_size";i:86;s:13:"content_lines";i:4;s:6:"atLine";i:577;}i:39;a:7:{s:6:"header";s:42:"function userProcess($mConfKey,$passVar)	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:3:{s:4:"text";s:47:"

Calls a user function for processing of data
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:248:"TypoScript property name, pointing to the definition of the user function to call (from the TypoScript array internally in this class). This array is passed to the user function. Notice that "parentObj" property is a reference to this class ($this)";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:19:"Variable to process";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:55:"The processed $passVar as returned by the function call";}}s:7:"content";a:2:{i:0;s:238:"		if ($this->conf[$mConfKey])	{
			$funcConf = $this->conf[$mConfKey.'.'];
			$funcConf['parentObj']=&$this;
			$passVar = $GLOBALS['TSFE']->cObj->callUserFunction($this->conf[$mConfKey], $funcConf, $passVar);
		}
		return $passVar;
	}

	";i:1;i:0;}s:12:"content_size";i:238;s:13:"content_lines";i:8;s:6:"atLine";i:589;}i:41;a:7:{s:6:"header";s:39:"function atag_to_http($content,$conf)	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:5:{s:4:"text";s:210:"

Function used by TypoScript "parseFunc" to process links in the bodytext. 
Extracts the link and shows it in plain text in a parathesis next to the link text. If link was relative the site URL was prepended.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"Empty, ignore.";}i:1;a:2:{i:0;s:5:"array";i:1;s:21:"TypoScript parameters";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:17:"Processed output.";}s:5:"other";a:1:{i:0;s:16:"@see parseBody()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:12:"parseBody() ";}}}s:7:"content";a:2:{i:0;s:349:"		$this->conf = $conf;
		$this->siteUrl=$conf['siteUrl'];
		$theLink  = trim($this->cObj->parameters['href']);
		if (strtolower(substr($theLink,0,7))=='mailto:')	{
			$theLink=substr($theLink,7);
		} elseif (substr($theLink,0,4)!='http')	{
			$theLink=$this->siteUrl.$theLink;
		}
		return $this->cObj->getCurrentVal().' (Link: '.$theLink.')';
	}

	";i:1;i:0;}s:12:"content_size";i:349;s:13:"content_lines";i:11;s:6:"atLine";i:607;}i:43;a:7:{s:6:"header";s:35:"function typolist($content,$conf)	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:3:{s:4:"text";s:90:"

User function (called from TypoScript) for generating a bullet list (used in parsefunc)
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"Empty, ignore.";}i:1;a:2:{i:0;s:5:"array";i:1;s:21:"TypoScript parameters";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:17:"Processed output.";}}s:7:"content";a:2:{i:0;s:250:"		$this->conf = $this->cObj->mergeTSRef($conf,'bulletlist');
		$this->siteUrl=$conf['siteUrl'];
		$str = trim($this->cObj->getCurrentVal());
		$this->cObj->data['layout'] = $this->cObj->parameters['type'];
		return $this->breakBulletlist($str);
	}

	";i:1;i:0;}s:12:"content_size";i:250;s:13:"content_lines";i:7;s:6:"atLine";i:626;}i:45;a:4:{s:6:"header";s:35:"function typohead($content,$conf)	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:3:{s:4:"text";s:94:"

User function (called from TypoScript) for generating a typo header tag (used in parsefunc)
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"Empty, ignore.";}i:1;a:2:{i:0;s:5:"array";i:1;s:21:"TypoScript parameters";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:17:"Processed output.";}}s:6:"atLine";i:641;}i:47;a:7:{s:6:"header";s:35:"function typocode($content,$conf)	{";s:11:"parentClass";s:14:"user_plaintext";s:4:"cDat";a:3:{s:4:"text";s:91:"

User function (called from TypoScript) for generating a code listing (used in parsefunc)
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"Empty, ignore.";}i:1;a:2:{i:0;s:5:"array";i:1;s:21:"TypoScript parameters";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:17:"Processed output.";}}s:7:"content";a:2:{i:0;s:341:"			// Nothing is really done here...
		$this->conf = $conf;
		$this->siteUrl=$conf['siteUrl'];
		return $this->cObj->getCurrentVal();
	}
}




if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['media/scripts/plaintextLib.inc'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['media/scripts/plaintextLib.inc']);
}
?>";i:1;i:0;}s:12:"content_size";i:341;s:13:"content_lines";i:13;s:6:"atLine";i:660;}}}s:38:"tslib/media/scripts/testscript_EXT.php";a:3:{s:8:"filesize";i:756;s:6:"header";N;s:3:"DAT";a:1:{i:1;a:6:{s:6:"header";s:44:"function user_printTimeExt($content,$conf)	{";s:11:"parentClass";s:0:"";s:7:"content";a:2:{i:0;s:507:"	return '<font color="red">Dynamic time: '.date('H:i:s').'</font><br />';
}

?>

This is output from an external script!
<br />
<br />

You can get the content of the record, that included this script in $REC:<br />
<br />


<?php debug($REC); ?>

<br />
<br />
The configuration for the script is in the array, $CONF:<br />
<br />




<?php
debug($CONF);

?>

<br />
<br />

[...]
);} ?>
<br />
<br />

<?php

$content = '(This is returned in the variable, $content, which is another option...';

?>
<hr />";i:1;i:1;}s:12:"content_size";i:632;s:13:"content_lines";i:47;s:6:"atLine";i:8;}}}s:36:"tslib/media/scripts/tmenu_layers.php";a:3:{s:8:"filesize";i:19254;s:6:"header";a:5:{s:4:"text";s:226:"

Class extending tslib_tmenu for the creation of text based DHTML menus
NOTICE: The contents of this class is copied EXACTLY AS IS from gmenu_layers class! See noties in class (for BEGIN/END) and also 'diff.xmenu_layers.txt'
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=385&cHash=648519dd66";i:2;s:26:"@see diff.xmenu_layers.txt";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=385&cHash=648519dd66 ";}s:4:"@see";a:1:{i:0;s:22:"diff.xmenu_layers.txt ";}}}s:3:"DAT";a:9:{i:1;a:8:{s:6:"header";s:46:"class tslib_tmenu_layers extends tslib_tmenu {";s:5:"class";i:1;s:11:"parentClass";s:18:"tslib_tmenu_layers";s:4:"cDat";a:5:{s:4:"text";s:226:"

Class extending tslib_tmenu for the creation of text based DHTML menus
NOTICE: The contents of this class is copied EXACTLY AS IS from gmenu_layers class! See noties in class (for BEGIN/END) and also 'diff.xmenu_layers.txt'
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";i:1;s:108:"@link http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=385&cHash=648519dd66";i:2;s:26:"@see diff.xmenu_layers.txt";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}s:5:"@link";a:1:{i:0;s:103:"http://typo3.org/doc.0.html?&tx_extrepmgm_pi1[extUid]=270&tx_extrepmgm_pi1[tocEl]=385&cHash=648519dd66 ";}s:4:"@see";a:1:{i:0;s:22:"diff.xmenu_layers.txt ";}}}s:7:"content";a:2:{i:0;s:571:"

// FULL DUPLICATE FROM gmenu_layers BEGIN:

	var $GMENU_fixKey='layers';
	var $divLayers=Array();
	
	var $WMx=0;
	var $WMy=0;
	var $WMxyArray=array();
	var $WMextraScript='';
	var $WMlastKey='';
	var $WMrestoreScript='';
	var $WMresetSubMenus='';
	var $WMactiveHasSubMenu='';
	var $WMactiveKey='';
	var $WMtheSubMenu;
	var $WMisSub;
	var $WMhideCode;
	var $WMonlyOnLoad=0;
	var $WMbordersWithin=array();
	var $WMsubIds=array();
	var $WMtempStore=array();
	var $WMlockPosition_addAccumulated=array();
	var $VMmouseoverActions=array();
	var $VMmouseoutActions=array();

	";i:1;i:-1;}s:12:"content_size";i:571;s:13:"content_lines";i:27;s:6:"atLine";i:79;}i:3;a:7:{s:6:"header";s:25:"function extProc_init()	{";s:11:"parentClass";s:18:"tslib_tmenu_layers";s:4:"cDat";a:3:{s:4:"text";s:101:"

Creating unique menu id string plus other initialization of internal variables (all prefixed "WM")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		$this->WMid = trim($this->mconf['layer_menu_id'])?trim($this->mconf['layer_menu_id']).'x':substr(md5(microtime()),0,6);	// NO '_' (underscore) in the ID!!! NN4 breaks!

		$GLOBALS['TSFE']->applicationData['GMENU_LAYERS']['WMid'][]=$this->WMid;
		$this->WMtempStore = $GLOBALS['TSFE']->applicationData['GMENU_LAYERS']['WMid'];
		$GLOBALS['TSFE']->applicationData['GMENU_LAYE
[...]
ad.']['onlyOnLoad']);
		$this->WMbordersWithin = t3lib_div::intExplode(',',$this->mconf['bordersWithin'].',0,0,0,0,0');
	}

	";i:1;i:1;}s:12:"content_size";i:633;s:13:"content_lines";i:11;s:6:"atLine";i:112;}i:5;a:7:{s:6:"header";s:27:"function extProc_RO($key)	{";s:11:"parentClass";s:18:"tslib_tmenu_layers";s:4:"cDat";a:3:{s:4:"text";s:92:"

Processing of mouse-over features depending on whether "freezeMouseover" property is set.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:223:"Pointer to $this->menuArr[$key] where the current menu element record is found OR $this->result['RO'][$key] where the configuration for that elements RO version is found! Here it is used with the ->WMid to make unique names";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:446:"		if ($this->mconf['freezeMouseover'])	{
			$this->VMmouseoverActions[$this->WMid.$key]='case "Menu'.$this->WMid.$key.'":'.$this->I['linkHREF']['onMouseover'].'; break;';
			$this->VMmouseoutActions[$this->WMid.$key]='case "Menu'.$this->WMid.$key.'":'.$this->I['linkHREF']['onMouseout'].'; break;';
			$this->I['linkHREF']['onMouseover']='GL'.$this->WMid.'_over(\'Menu'.$this->WMid.$key.'\');';
			$this->I['linkHREF']['onMouseout']='';
		}
	}

	";i:1;i:0;}s:12:"content_size";i:446;s:13:"content_lines";i:8;s:6:"atLine";i:130;}i:7;a:7:{s:6:"header";s:38:"function extProc_beforeLinking($key)	{";s:11:"parentClass";s:18:"tslib_tmenu_layers";s:4:"cDat";a:3:{s:4:"text";s:114:"

Processing before the links are created.
This means primarily creating some javaScript code for the management.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:78:"Pointer to $this->menuArr[$key] where the current menu element record is found";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		if ($this->I['uid'])	{

			array_push($GLOBALS['TSFE']->applicationData['GMENU_LAYERS']['WMparentId'],$this->WMid);
			$this->WMtheSubMenu = $this->subMenu($this->I['uid'],$this->I['mount_pid']);
			array_pop($GLOBALS['TSFE']->applicationData['GMENU_LAYERS']['WMparentId']);
			$this->WMisSub = trim($this->WMtheSubMenu) ? 1 : 0;
	
			if ($this->mconf['lockPosition_addSelf
[...]
shortmd5($this->I['uid'].'-'.$this->WMid).'","anchorID'.t3lib_div::shortmd5($this->I['uid'].'-'.$this->WMid).'");';
		}
	}

	";i:1;i:1;}s:12:"content_size";i:2625;s:13:"content_lines";i:44;s:6:"atLine";i:146;}i:9;a:7:{s:6:"header";s:37:"function extProc_afterLinking($key)	{";s:11:"parentClass";s:18:"tslib_tmenu_layers";s:4:"cDat";a:3:{s:4:"text";s:123:"

Processing after linking, basically setting the <div>-layers for the menu items. Also some more JavaScript code is made.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:78:"Pointer to $this->menuArr[$key] where the current menu element record is found";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"		if ($this->I['uid'])	{
			if (!$this->I['spacer'] && $this->WMisSub)	{
				$exStyle=$this->mconf['layerStyle'] ? $this->mconf['layerStyle'] : 'position:absolute;visibility:hidden';
				if (trim($exStyle))	{
					$exStyle=' '.$exStyle;
				}
				$GLOBALS['TSFE']->applicationData['GMENU_LAYERS']['layerCounter']++;
				$zIndex = 10000-$GLOBALS['TSFE']->applicationData['GMEN
[...]
is->I['val']['output_w'])+intval($this->mconf['lockPosition_adjust']);
			}
		}
		$this->WMresult.=$this->I['theItem'];
	}

	";i:1;i:1;}s:12:"content_size";i:1220;s:13:"content_lines";i:27;s:6:"atLine";i:197;}i:11;a:7:{s:6:"header";s:44:"function extProc_beforeAllWrap($item,$key)	{";s:11:"parentClass";s:18:"tslib_tmenu_layers";s:4:"cDat";a:3:{s:4:"text";s:74:"

Wrapping the item in a <div> section if 'relativeToTriggerItem' was set
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:72:"The current content of the menu item, $this->I['theItem'], passed along.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:78:"Pointer to $this->menuArr[$key] where the current menu element record is found";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:66:"The modified version of $item, going back into $this->I['theItem']";}}s:7:"content";a:2:{i:0;s:328:"		if ($this->mconf['relativeToTriggerItem'])	{
			$item = '<div id="anchorID'.t3lib_div::shortmd5($this->I['uid'].'-'.$this->WMid).'" style="position:absolute;visibility:hidden;"></div><div id="itemID'.t3lib_div::shortmd5($this->I['uid'].'-'.$this->WMid).'" width="100%" height="100%">'.$item.'</div>';
		}
		return $item;
	}

	";i:1;i:0;}s:12:"content_size";i:328;s:13:"content_lines";i:6;s:6:"atLine";i:232;}i:13;a:7:{s:6:"header";s:27:"function isSetIntval($in)	{";s:11:"parentClass";s:18:"tslib_tmenu_layers";s:4:"cDat";a:3:{s:4:"text";s:55:"

Returns true if different from ''  OR if intval()!=0
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:17:"Value to evaluate";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:51:"true if $in is different from ''  OR if intval()!=0";}}s:7:"content";a:2:{i:0;s:78:"		return $this->mconf['blankStrEqFalse'] ? strcmp($in,'') : intval($in);
	}

	";i:1;i:0;}s:12:"content_size";i:78;s:13:"content_lines";i:3;s:6:"atLine";i:245;}i:15;a:4:{s:6:"header";s:28:"function extProc_finish ()	{";s:11:"parentClass";s:18:"tslib_tmenu_layers";s:4:"cDat";a:3:{s:4:"text";s:88:"

Putting things together, in particular the JavaScript code needed for the DHTML menu.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:77:"Returns the value of a call to the parent function, parent::extProc_finish();";}}s:6:"atLine";i:254;}i:17;a:7:{s:6:"header";s:46:"function extCalcBorderWithin($kind,$integer)	{";s:11:"parentClass";s:18:"tslib_tmenu_layers";s:4:"cDat";a:5:{s:4:"text";s:133:"

Creates a JavaScript line which corrects the position of the layer based on the constraints in TypoScript property 'bordersWithin'
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:18:"Direction to test.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:99:"The boundary limit in the direction set by $kind. If set then a value is returned, otherwise blank.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:76:"JavaScript string for correction of the layer position (if $integer is true)";}s:5:"other";a:1:{i:0;s:37:"@see extProc_finish(), extProc_init()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:32:"extProc_finish(), extProc_init()";}}}s:7:"content";a:2:{i:0;s:507:"		if ($integer)	{
			switch($kind)	{
				case 'right':
				case 'bottom':
					$add='';
					if ($kind=='right')		{$add='GL_getObj(id).width'; $key = 'left';}
					if ($kind=='bottom')	{$add='GL_getObj(id).height'; $key = 'top';}
					$str = 'if (parseInt(GLV_menuOn["'.$this->WMid.'"].'.$key.')+'.$add.'>'.$integer.') GLV_menuOn["'.$this->WMid.'"].'.$key.'='.$integer.'-'.$a
[...]
/scripts/tmenu_layers.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['media/scripts/tmenu_layers.php']);
}

?>";i:1;i:1;}s:12:"content_size";i:882;s:13:"content_lines";i:27;s:6:"atLine";i:430;}}}s:37:"tslib/media/scripts/wapversionLib.inc";a:3:{s:8:"filesize";i:14565;s:6:"header";a:5:{s:4:"text";s:1338:"

Class that creates the current page and content element records as an WML structure using the library "t3lib_xml"
It is demonstrated in use in the testsite package on page "59"
The static template "plugin.alt.wap" is used to trigger this WML creation as well. That template contains this set of TypoScript lines which triggers the WML creation and disables all regular HTML headers

## Set up page/type:
alt_wap >
alt_wap = PAGE
alt_wap {
  typeNum=97
  config.disableAllHeaderCode = 1
  config.additionalHeaders = Content-type: text/vnd.wap.wml

  ## Includes the newsLib:
  includeLibs.alt_wap = media/scripts/wapversionLib.inc

  ## Inserting the USER cObject for WAP/XML rendering
  10 = USER
  10 {
    userFunc = user_wapversion->main_wapversion
    debug=0
    preTitle = T3WAP
    navLabels.prev = Prev
    navLabels.next = Next
    navLabels.up = Up
  }
}
 
NOTICE:
 
In the static template "plugin.alt.wap" there is a part in the end looking like this:

## If the browser is a WAP-device,
[device=wap]
alt_wap.typeNum=0
[global]

This means that IF the device coming to the URL is a WAP device they will get wap content even if they don't specify "&type=97" since the typeNum is changed to zero here!
In fact they CANNOT get any wap-content at "&type=97" anymore! This has been a source of error and confusion for many people
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:3:"DAT";a:15:{i:1;a:8:{s:6:"header";s:23:"class user_wapversion {";s:5:"class";i:1;s:11:"parentClass";s:15:"user_wapversion";s:4:"cDat";a:5:{s:4:"text";s:1338:"

Class that creates the current page and content element records as an WML structure using the library "t3lib_xml"
It is demonstrated in use in the testsite package on page "59"
The static template "plugin.alt.wap" is used to trigger this WML creation as well. That template contains this set of TypoScript lines which triggers the WML creation and disables all regular HTML headers

## Set up page/type:
alt_wap >
alt_wap = PAGE
alt_wap {
  typeNum=97
  config.disableAllHeaderCode = 1
  config.additionalHeaders = Content-type: text/vnd.wap.wml

  ## Includes the newsLib:
  includeLibs.alt_wap = media/scripts/wapversionLib.inc

  ## Inserting the USER cObject for WAP/XML rendering
  10 = USER
  10 {
    userFunc = user_wapversion->main_wapversion
    debug=0
    preTitle = T3WAP
    navLabels.prev = Prev
    navLabels.next = Next
    navLabels.up = Up
  }
}
 
NOTICE:
 
In the static template "plugin.alt.wap" there is a part in the end looking like this:

## If the browser is a WAP-device,
[device=wap]
alt_wap.typeNum=0
[global]

This means that IF the device coming to the URL is a WAP device they will get wap content even if they don't specify "&type=97" since the typeNum is changed to zero here!
In fact they CANNOT get any wap-content at "&type=97" anymore! This has been a source of error and confusion for many people
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:7:"content";a:2:{i:0;s:93:"	var $cObj;		// The backReference to the mother cObj object set at call time

	var $idx=0;

	";i:1;i:-1;}s:12:"content_size";i:93;s:13:"content_lines";i:4;s:6:"atLine";i:124;}i:3;a:7:{s:6:"header";s:42:"function main_wapversion($content,$conf)	{";s:11:"parentClass";s:15:"user_wapversion";s:4:"cDat";a:3:{s:4:"text";s:40:"

Main function, called from TypoScript
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"Empty, ignore.";}i:1;a:2:{i:0;s:5:"array";i:1;s:59:"TypoScript properties for this content object/function call";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:11:"WML content";}}s:7:"content";a:2:{i:0;s:507:"		$GLOBALS['TSFE']->set_no_cache();


		$className=t3lib_div::makeInstanceClassName('t3lib_xml');
		$xmlObj = new $className('wml');
		$xmlObj->XMLdebug=$conf['debug'];

			// Creating top level object
		$xmlObj->WAPHeader();

			// Creating back button:
		$xmlObj->WAPback();
		
		$pageRec = $GLOBALS['TSFE']->page;
		if ($GLOBALS['TSFE']->idParts[1])	{
				// Creating cont
[...]
j->Icode);
			$xmlObj->newLevel('card',0);
		}

			// Footer
		$xmlObj->renderFooter();
		return $xmlObj->getResult();

	}

	";i:1;i:1;}s:12:"content_size";i:1679;s:13:"content_lines";i:53;s:6:"atLine";i:136;}i:5;a:7:{s:6:"header";s:28:"function contentAbstract()	{";s:11:"parentClass";s:15:"user_wapversion";s:4:"cDat";a:3:{s:4:"text";s:82:"

Getting abstract of the first content elements header and bodytext for the menu
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:10:"WML string";}}s:7:"content";a:2:{i:0;s:389:"		$res = $this->getContentResult('tt_content');
		$row = mysql_fetch_assoc($res);
		$out = $this->bold(t3lib_div::fixed_lgd(htmlspecialchars($row['header']),20)).'<br/>';
		$out.= t3lib_div::fixed_lgd(htmlspecialchars($row['bodytext']),50);
		$out = '<p>'.$out.' <a href="'.htmlspecialchars('?id='.$GLOBALS['TSFE']->id.',1.'.$GLOBALS['TSFE']->type).'">[more]</a></p>';
		return $out;
	}

	";i:1;i:0;}s:12:"content_size";i:389;s:13:"content_lines";i:8;s:6:"atLine";i:195;}i:7;a:7:{s:6:"header";s:36:"function contentAll($chunkLgd=850)	{";s:11:"parentClass";s:15:"user_wapversion";s:4:"cDat";a:5:{s:4:"text";s:263:"

Returns all page content, but in an array where the content is divided into chunks or a max length (for WAP clients with limited memory capabilities)
Content is then displayed using the pointer value found in $GLOBALS['TSFE']->idParts[1], see main_wapversion()
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:32:"Max length of each content chunk";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:95:"Array with the page content divided into chucks WML code (default length equals $chunkLgd; 850)";}s:5:"other";a:1:{i:0;s:22:"@see main_wapversion()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:18:"main_wapversion() ";}}}s:7:"content";a:2:{i:0;s:507:"		$res = $this->getContentResult('tt_content');
		$overlap=5;
		$idx=0;
		$out=array();
		while($row = mysql_fetch_assoc($res))	{
				// Header:
			$get = '<br/>'.$this->cHeader($row['header']).'<br/>';
			if (strlen($out[$idx].$get)>$chunkLgd)	{
				$idx++;
			}
			$out[$idx].=$get;

			switch($row['CType'])	{
				case 'text':
				case 'bullets':
				case 'table':
					$b
[...]
).'<br/>';
					$safe++;
					if ($safe>100) break;
				} while (strlen($out[$idx])>$chunkLgd);
			}
		}
		return $out;
	}

	";i:1;i:1;}s:12:"content_size";i:1299;s:13:"content_lines";i:52;s:6:"atLine";i:212;}i:9;a:7:{s:6:"header";s:24:"function cHeader($str)	{";s:11:"parentClass";s:15:"user_wapversion";s:4:"cDat";a:5:{s:4:"text";s:43:"

Formats the header for a content element
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:22:"Header value to format";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:74:"Returns the formatted version, stripped from tags and htmlspecialchar()'ed";}s:5:"other";a:1:{i:0;s:17:"@see contentAll()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:13:"contentAll() ";}}}s:7:"content";a:2:{i:0;s:78:"		$out = $this->bold(htmlspecialchars(strip_tags($str)));
		return $out;
	}

	";i:1;i:0;}s:12:"content_size";i:78;s:13:"content_lines";i:4;s:6:"atLine";i:272;}i:11;a:7:{s:6:"header";s:42:"function cBodytext($str,$start=0,$max=0)	{";s:11:"parentClass";s:15:"user_wapversion";s:4:"cDat";a:5:{s:4:"text";s:45:"

Formats the bodytext for a content element
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:20:"The bodytext content";}i:1;a:2:{i:0;s:7:"integer";i:1;s:98:"Position where to start in the bodytext stream. If larger than zero a prefix, "...", is prepended.";}i:2;a:2:{i:0;s:7:"integer";i:1;s:10:"Max length";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:16:"Prepared content";}s:5:"other";a:1:{i:0;s:17:"@see contentAll()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:13:"contentAll() ";}}}s:7:"content";a:2:{i:0;s:282:"		$out = t3lib_div::fixed_lgd(($start?'...':'').substr($this->nl2br(htmlspecialchars(strip_tags($str))),$start),($max?$max:100000));
		$out = str_replace('&','',$out);	// No & in WAP docs??? --> or maybe just htmlspecialchar() things as the LAST thing instead!)
		return $out;
	}

	";i:1;i:0;}s:12:"content_size";i:282;s:13:"content_lines";i:5;s:6:"atLine";i:286;}i:13;a:7:{s:6:"header";s:22:"function nl2br($str)	{";s:11:"parentClass";s:15:"user_wapversion";s:4:"cDat";a:3:{s:4:"text";s:65:"

Local version of ml2br(). Replaces linebreaks with <br/> tags.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:27:"The input string to process";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"The processed value returned.";}}s:7:"content";a:2:{i:0;s:50:"		return ereg_replace(chr(10),'<br/>',$str);
	}

	";i:1;i:0;}s:12:"content_size";i:50;s:13:"content_lines";i:3;s:6:"atLine";i:298;}i:15;a:7:{s:6:"header";s:35:"function getContentResult($table) {";s:11:"parentClass";s:15:"user_wapversion";s:4:"cDat";a:3:{s:4:"text";s:151:"

Selects all records from $table having the current page id as PID (records belonging to that page)
Used to select content elements from "tt_content"
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:25:"A tablename found in $TCA";}}s:6:"return";a:2:{i:0;s:7:"pointer";i:1;s:27:"A database resource pointer";}}s:7:"content";a:2:{i:0;s:349:"		global $TCA;
		if ($TCA[$table])	{
			$orderBy = ($TCA[$table]['ctrl']['sortby']) ? 'ORDER BY '.$TCA[$table]['ctrl']['sortby'] : $TCA[$table]['ctrl']['default_sortby'];
			$query = 'SELECT * FROM '.$table.' WHERE pid='.$GLOBALS['TSFE']->id.$this->cObj->enableFields($table).' '.$orderBy;
			$res = mysql(TYPO3_db,$query);
			return $res;
		}
	}

	";i:1;i:0;}s:12:"content_size";i:349;s:13:"content_lines";i:9;s:6:"atLine";i:309;}i:17;a:7:{s:6:"header";s:21:"function bold($str)	{";s:11:"parentClass";s:15:"user_wapversion";s:4:"cDat";a:3:{s:4:"text";s:58:"

Simulates bold type - basically setting it in uppercase
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:43:"The string for format in "bold" (uppercase)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:17:"Processed output.";}}s:7:"content";a:2:{i:0;s:33:"		return strtoupper($str);	
	}

	";i:1;i:0;}s:12:"content_size";i:33;s:13:"content_lines";i:3;s:6:"atLine";i:325;}i:19;a:7:{s:6:"header";s:26:"function paragraph($str)	{";s:11:"parentClass";s:15:"user_wapversion";s:4:"cDat";a:3:{s:4:"text";s:36:"

Wraps a string in <p>...</p> tags
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:16:"The input string";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:18:"The wrapped string";}}s:7:"content";a:2:{i:0;s:33:"		return '<p>'.$str.'</p>';
	}

	";i:1;i:0;}s:12:"content_size";i:33;s:13:"content_lines";i:3;s:6:"atLine";i:335;}i:21;a:7:{s:6:"header";s:21:"function line($str)	{";s:11:"parentClass";s:15:"user_wapversion";s:4:"cDat";a:3:{s:4:"text";s:48:"

Adds a linebreak character to the end of $str
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:15:"The string/line";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:39:"The input string with '<br/>' prepended";}}s:7:"content";a:2:{i:0;s:28:"		return $str.'<br/>';
	}

	";i:1;i:0;}s:12:"content_size";i:28;s:13:"content_lines";i:3;s:6:"atLine";i:345;}i:23;a:7:{s:6:"header";s:33:"function navLink($str,$pointer)	{";s:11:"parentClass";s:15:"user_wapversion";s:4:"cDat";a:3:{s:4:"text";s:66:"

Creates a navigation link to the next part of the page content!
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:13:"The link text";}i:1;a:2:{i:0;s:7:"integer";i:1;s:17:"The pointer value";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:68:"The input string, linked with the pointer value to the current page.";}}s:7:"content";a:2:{i:0;s:130:"		return '<a href="'.htmlspecialchars('?id='.$GLOBALS['TSFE']->id.','.$pointer.'.'.$GLOBALS['TSFE']->type).'">'.$str.'</a>';
	}

	";i:1;i:0;}s:12:"content_size";i:130;s:13:"content_lines";i:3;s:6:"atLine";i:356;}i:25;a:7:{s:6:"header";s:36:"function menuCurrentLevel($indent)	{";s:11:"parentClass";s:15:"user_wapversion";s:4:"cDat";a:3:{s:4:"text";s:123:"

Creates a menu for the current pagelevel. Navigation is both a path-menu (rootline) and a menu of current page subpages.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:40:"Indentation prefix string per menu item.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:39:"A paragraph with the menu items inside.";}}s:7:"content";a:2:{i:0;s:507:"		$rL = $GLOBALS['TSFE']->config['rootLine'];
		reset($rL);
		$preSpace='';
		$out=array();
			// Hierarchy menu
		while(list($level,$data)=each($rL))	{
			$preSign = count($rL)-1 > $level ? '-' : '>';
			$menuItem = htmlspecialchars($preSign.' '.$data['title']);
			$menuItem = $this->link($preSpace.$menuItem,$data['uid']);
			$out[]=$indent.$this->line($menuItem);
			$pre
[...]
menuItem,$data['uid']);
			$out[]=$indent.$this->line($menuItem);
		}
		return $this->paragraph(implode(chr(10),$out));
	}

	";i:1;i:1;}s:12:"content_size";i:893;s:13:"content_lines";i:24;s:6:"atLine";i:366;}i:27;a:4:{s:6:"header";s:34:"function link($str,$id,$deck='')	{";s:11:"parentClass";s:15:"user_wapversion";s:4:"cDat";a:5:{s:4:"text";s:83:"

Creates a link around the input string to another page/deck
Used to create menus
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:36:"The string to be wrapped in <a> tags";}i:1;a:2:{i:0;s:7:"integer";i:1;s:22:"The page id to link to";}i:2;a:2:{i:0;s:6:"string";i:1;s:21:"The deck name, if any";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:26:"String wrapped in <a> tags";}s:5:"other";a:1:{i:0;s:23:"@see menuCurrentLevel()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:19:"menuCurrentLevel() ";}}}s:6:"atLine";i:401;}i:29;a:7:{s:6:"header";s:32:"function cleanMenuArray($menu)	{";s:11:"parentClass";s:15:"user_wapversion";s:4:"cDat";a:3:{s:4:"text";s:115:"

Cleaning up the menu array returned from sys_page->getMenu(). Removing page types with doktype "5" (not in menu)
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:15:"Menu item array";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:52:"New menu item array with doktype-5 elements removed.";}}s:7:"content";a:2:{i:0;s:507:"		reset($menu);
		$newMenu=array();
		while(list(,$data)=each($menu))	{
			if ($data['doktype']!=5)	{
				$newMenu[]=$data;
			}
		}
		return $newMenu;	
	}
}


// AND HERE just some debugging content: Basically a valid WML deck.

		/*
switch($id)	{
	case 1:
		<wml>
			<card id="Hallo" ontimer="#Login" title="wapportal.dk">
				<timer value="35"/>
				<p>
					<img src="/im
[...]
ripts/wapversionLib.inc'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['media/scripts/wapversionLib.inc']);
}


?>";i:1;i:1;}s:12:"content_size";i:1508;s:13:"content_lines";i:61;s:6:"atLine";i:417;}}}s:37:"tslib/media/scripts/xmlversionLib.inc";a:3:{s:8:"filesize";i:4646;s:6:"header";a:5:{s:4:"text";s:755:"

Class that creates the current page and content element records as an XML structure using the library "t3lib_xml"
It is demonstrated in use in the testsite package on page "59"
The static template "plugin.alt.xml" is used to trigger this XML creation as well. That template contains this set of TypoScript lines which triggers the XML creation and disables all regular HTML headers

## Set up page/type number:
alt_xml >
alt_xml = PAGE
alt_xml {
  typeNum=96
  config.disableAllHeaderCode = 1
  config.additionalHeaders = Content-type: text/xml

  ## Includes the newsLib:
  includeLibs.alt_xml = media/scripts/xmlversionLib.inc

  ## Inserting the USER cObject for XML rendering
  10 = USER
  10 {
    userFunc = user_xmlversion->main_xmlversion
  }
}
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:3:"DAT";a:3:{i:1;a:8:{s:6:"header";s:23:"class user_xmlversion {";s:5:"class";i:1;s:11:"parentClass";s:15:"user_xmlversion";s:4:"cDat";a:5:{s:4:"text";s:755:"

Class that creates the current page and content element records as an XML structure using the library "t3lib_xml"
It is demonstrated in use in the testsite package on page "59"
The static template "plugin.alt.xml" is used to trigger this XML creation as well. That template contains this set of TypoScript lines which triggers the XML creation and disables all regular HTML headers

## Set up page/type number:
alt_xml >
alt_xml = PAGE
alt_xml {
  typeNum=96
  config.disableAllHeaderCode = 1
  config.additionalHeaders = Content-type: text/xml

  ## Includes the newsLib:
  includeLibs.alt_xml = media/scripts/xmlversionLib.inc

  ## Inserting the USER cObject for XML rendering
  10 = USER
  10 {
    userFunc = user_xmlversion->main_xmlversion
  }
}
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:41:"@author	Kasper Skårhøj <kasper@typo3.com>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:33:"Kasper Skårhøj <kasper@typo3.com>";}}}s:7:"content";a:2:{i:0;s:80:"	var $cObj;		// The backReference to the mother cObj object set at call time


	";i:1;i:-1;}s:12:"content_size";i:80;s:13:"content_lines";i:3;s:6:"atLine";i:91;}i:3;a:4:{s:6:"header";s:42:"function main_xmlversion($content,$conf)	{";s:11:"parentClass";s:15:"user_xmlversion";s:4:"cDat";a:3:{s:4:"text";s:40:"

Main function, called from TypoScript
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"Empty, ignore.";}i:1;a:2:{i:0;s:5:"array";i:1;s:59:"TypoScript properties for this content object/function call";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:11:"XML content";}}s:6:"atLine";i:102;}i:5;a:7:{s:6:"header";s:35:"function getContentResult($table) {";s:11:"parentClass";s:15:"user_xmlversion";s:4:"cDat";a:3:{s:4:"text";s:101:"

Selects all records from $table having the current page id as PID (records belonging to that page)
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:25:"A tablename found in $TCA";}}s:6:"return";a:2:{i:0;s:7:"pointer";i:1;s:27:"A database resource pointer";}}s:7:"content";a:2:{i:0;s:552:"		global $TCA;
		if ($TCA[$table])	{
			$orderBy = ($TCA[$table]['ctrl']['sortby']) ? 'ORDER BY '.$TCA[$table]['ctrl']['sortby'] : $TCA[$table]['ctrl']['default_sortby'];
			$query = 'SELECT * FROM '.$table.' WHERE pid='.$GLOBALS['TSFE']->id.$this->cObj->enableFields($table).' '.$orderBy;
			$res = mysql(TYPO3_db,$query);
			return $res;
		}
	}
}



if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['media/scripts/xmlversionLib.inc'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['media/scripts/xmlversionLib.inc']);
}
?>";i:1;i:0;}s:12:"content_size";i:552;s:13:"content_lines";i:15;s:6:"atLine";i:132;}}}}}